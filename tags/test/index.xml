<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on My External Storage</title>
    <link>https://budougumi0617.github.io/tags/test/</link>
    <description>Recent content in Test on My External Storage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>budougumi[at]gmail.com (budougumi0617)</managingEditor>
    <webMaster>budougumi[at]gmail.com (budougumi0617)</webMaster>
    <lastBuildDate>Tue, 17 Nov 2020 09:30:48 +0900</lastBuildDate>
    
	<atom:link href="https://budougumi0617.github.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自作Terraform Providerのユニットテストの書き方</title>
      <link>https://budougumi0617.github.io/2020/11/17/unittest_for_terraform_custom_provider/</link>
      <pubDate>Tue, 17 Nov 2020 09:30:48 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/17/unittest_for_terraform_custom_provider/</guid>
      <description>&lt;p&gt;公式チュートリアルには載っていなかったので、自作Terraform Providerを作るときのユニットテストの書き方をメモしておく。&lt;br&gt;
なお、最初にコメントしておくと今回の記事はかなり説明を省略しているので各Providerにコミットしたことがあるか自作Providerを作った人じゃないとわからなそう…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go]次世代イメージcimg/goとcircleci/go Orbsを使った2020年版CircleCIの環境構築</title>
      <link>https://budougumi0617.github.io/2020/06/08/circleci_cimg_go_2020/</link>
      <pubDate>Mon, 08 Jun 2020 09:05:58 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/06/08/circleci_cimg_go_2020/</guid>
      <description>&lt;p&gt;2020年になって、CircleCIのCI用の公式ベースイメージは&lt;code&gt;cimg/base&lt;/code&gt;派生になった。&lt;br&gt;
ただ、2020/06/07現在、Go向けの言語別公式ガイドの中身は古いままである。&lt;br&gt;
&lt;code&gt;cimg/go&lt;/code&gt;を使ったGo向けのCircleCIの設定をまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goのtestを理解する - httptestサブパッケージ編</title>
      <link>https://budougumi0617.github.io/2020/05/29/go-testing-httptest/</link>
      <pubDate>Fri, 29 May 2020 12:19:49 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/29/go-testing-httptest/</guid>
      <description>&lt;p&gt;Goのテストについていくつかまとめを書いていた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/30/go-testing2019/&#34;&gt;Goのtestを理解する in 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;触れるのを忘れていたhttptestパッケージについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/net/http/httptest/&#34;&gt;https://golang.org/pkg/net/http/httptest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Go] 一部のフィールドを無視して構造体を比較したいときはgo-cmpを使う</title>
      <link>https://budougumi0617.github.io/2020/05/08/go-cmp-diif-with-ignore-fields/</link>
      <pubDate>Fri, 08 May 2020 08:31:18 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/08/go-cmp-diif-with-ignore-fields/</guid>
      <description>&lt;p&gt;Goでテストを書くとき、期待値として構造体を比較したいときは多々ある。&lt;br&gt;
時刻情報など、構造体の一部のフィールドの値だけ無視して構造体オブジェクトを比較する方法をまとめた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goでサーバを立ち上げてE2Eテストを実施するCI用のテストコードを書く</title>
      <link>https://budougumi0617.github.io/2020/03/27/http-test-in-go/</link>
      <pubDate>Fri, 27 Mar 2020 20:00:22 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/27/http-test-in-go/</guid>
      <description>&lt;p&gt;GoでCIで動かせるE2Eテストコードを書くための下調べをしたのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goのtestを理解する in 2019</title>
      <link>https://budougumi0617.github.io/2019/10/30/go-testing2019/</link>
      <pubDate>Wed, 30 Oct 2019 18:08:13 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/30/go-testing2019/</guid>
      <description>&lt;p&gt;昨年Go1.10時点でのGoのテストについてまとめた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018/&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まとめ記事を書いた後にリリースされたGo1.11からGo1.13に含まれるテスト関連の変更をまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DynamoDBを操作するコードをamazon/dynamodb-localコンテナとCircleCIを使ってCIする #aws</title>
      <link>https://budougumi0617.github.io/2019/06/02/use-dynamodb-local-on-circleci/</link>
      <pubDate>Sun, 02 Jun 2019 18:07:58 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/02/use-dynamodb-local-on-circleci/</guid>
      <description>&lt;p&gt;DynamoDBを操作するコードをCircleCI上でテストする方法をまとめた。&lt;br&gt;
dynamodb-localをCircleCI上で起動することで、実際にDBアクセスする状態でテストが実行できる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go][gomcok]引数によって挙動を変えるモックメソッドを定義する #golangjp</title>
      <link>https://budougumi0617.github.io/2019/03/10/define-gomock-method-by-doandreturn/</link>
      <pubDate>Sun, 10 Mar 2019 12:53:08 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/10/define-gomock-method-by-doandreturn/</guid>
      <description>&lt;p&gt;Goのテストでモックを使う場合、大抵の場合はgomockを使うと思う。&lt;br&gt;
gomockでモックメソッドの挙動を宣言するときのTipsをメモしておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/mock/&#34;&gt;https://github.com/golang/mock/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/golang/mock/gomock&#34;&gt;https://godoc.org/github.com/golang/mock/gomock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Jest( &gt;23.0.0 )、enzymeでReactのテーブル駆動テストを行う #react #test</title>
      <link>https://budougumi0617.github.io/2018/09/28/react-table-driven-test-by-jest-enzyme/</link>
      <pubDate>Fri, 28 Sep 2018 09:21:48 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/28/react-table-driven-test-by-jest-enzyme/</guid>
      <description>&lt;p&gt;Reactでもテーブル駆動テスト(データ駆動テスト)がしたいと思い、Jestを使ってみた。
ステートレスなコンポーネントがちゃんと設計できていれば入出力は冪等になるので、Reactとテーブル駆動テストは非常に相性がよさそう。
enzymeを使えばDOMアクセスも簡単だった。
ただ、Jestのバージョンが23.0.0以上じゃないと&lt;code&gt;each&lt;/code&gt;メソッドが使えないので、&lt;code&gt;create-react-app&lt;/code&gt;で作ったプロジェクトの場合は&lt;code&gt;eject&lt;/code&gt;する必要があった。&lt;/p&gt;
&lt;p&gt;JestはJavascriptで&lt;code&gt;rspec&lt;/code&gt;のようなテストが書けるツール。enzymeはairbnbが作成したいい感じにDOMにアクセスできるAPIライブラリ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jest
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;https://jestjs.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;enzyme
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://airbnb.io/enzyme/&#34;&gt;http://airbnb.io/enzyme/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのtestingを理解する in 2018 - iotestサブパッケージ編 #go</title>
      <link>https://budougumi0617.github.io/2018/09/09/go-testing2018-iotest/</link>
      <pubDate>Sun, 09 Sep 2018 21:51:11 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/09/go-testing2018-iotest/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかった&lt;code&gt;testing/iotest&lt;/code&gt;について触れる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのtestingを理解する in 2018 - quickサブパッケージ編 #go</title>
      <link>https://budougumi0617.github.io/2018/09/05/go-testing2018-quick/</link>
      <pubDate>Wed, 05 Sep 2018 10:02:02 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/05/go-testing2018-quick/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかった&lt;code&gt;testing/quick&lt;/code&gt;パッケージについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/&#34;&gt;Goのtestingを理解する in 2018 - Examples編 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのtestingを理解する in 2018 - Examples編 #go</title>
      <link>https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/</link>
      <pubDate>Thu, 30 Aug 2018 20:49:44 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかったExamplesについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのtestを理解する in 2018 #go</title>
      <link>https://budougumi0617.github.io/2018/08/19/go-testing2018/</link>
      <pubDate>Sun, 19 Aug 2018 12:14:01 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/19/go-testing2018/</guid>
      <description>&lt;p&gt;2018年夏(Go1.10)時点でGoのテスト方法をまとめる。&lt;br&gt;
この記事は以下のスライド資料の補足記事になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tour of testing in 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/budougumi0617/tour-of-testing-in-2018&#34;&gt;https://speakerdeck.com/budougumi0617/tour-of-testing-in-2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Go]go.uber.org/zap.loggerの出力をbytes.Bufferに変更する #golang</title>
      <link>https://budougumi0617.github.io/2018/05/24/inject-io-writer-to-zap-logger/</link>
      <pubDate>Thu, 24 May 2018 08:44:38 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/24/inject-io-writer-to-zap-logger/</guid>
      <description>go.uber.org/zapのzap.loggerは構造化されたログを高速に出力できるとしてGolangのLoggerの中で有名だ。 https://github.com/uber-go/zap gR</description>
    </item>
    
    <item>
      <title>[Go]gomockを使ったgRPCのテスト</title>
      <link>https://budougumi0617.github.io/2018/01/21/try-gomock-on-grpc-go/</link>
      <pubDate>Sun, 21 Jan 2018 19:21:28 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/21/try-gomock-on-grpc-go/</guid>
      <description>gRPCの勉強というより、gomockの勉強と言ったほうが良いかもしれないが、 protocコマンドで生成したgRPCコードをモックしてテスト</description>
    </item>
    
    <item>
      <title>Rspec内でテスト対象のControllerのメソッドの戻り値をスタブする</title>
      <link>https://budougumi0617.github.io/2017/09/20/rspec-access-controller/</link>
      <pubDate>Wed, 20 Sep 2017 08:52:42 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/09/20/rspec-access-controller/</guid>
      <description>C#では対象インスタンスのメソッドの挙動を変えることは出来ないので、別の手段を探していたのだが、rubyでは出来た。 TL;DR RSpec書いたCon</description>
    </item>
    
  </channel>
</rss>