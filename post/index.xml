<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My External Storage</title>
    <link>https://budougumi0617.github.io/post/</link>
    <description>Recent content in Posts on My External Storage</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <managingEditor>budougumi[at]gmail.com (budougumi0617)</managingEditor>
    <webMaster>budougumi[at]gmail.com (budougumi0617)</webMaster>
    <lastBuildDate>Mon, 30 Dec 2024 10:00:03 +0900</lastBuildDate>
    <atom:link href="https://budougumi0617.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024年に買ってよかったもの</title>
      <link>https://budougumi0617.github.io/2024/12/30/best_things_i_bought_in_2024/</link>
      <pubDate>Mon, 30 Dec 2024 10:00:03 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2024/12/30/best_things_i_bought_in_2024/</guid>
      <description>&lt;p&gt;2024年を振り返る前に買ってよかったものを振り返る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023年振り返り</title>
      <link>https://budougumi0617.github.io/2024/01/03/retrospective-2023/</link>
      <pubDate>Wed, 03 Jan 2024 17:03:53 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2024/01/03/retrospective-2023/</guid>
      <description>&lt;p&gt;今年も年をまたいでしまったが、2023年の振り返りを書く。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023年に買ってよかったもの</title>
      <link>https://budougumi0617.github.io/2023/12/31/best_things_i_bought_in_2023/</link>
      <pubDate>Sun, 31 Dec 2023 09:12:57 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2023/12/31/best_things_i_bought_in_2023/</guid>
      <description>&lt;p&gt;2023 年に買ってよかったものをまとめてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2022年振り返り</title>
      <link>https://budougumi0617.github.io/2023/01/01/retrospective-2022/</link>
      <pubDate>Sun, 01 Jan 2023 03:18:40 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2023/01/01/retrospective-2022/</guid>
      <description>&lt;p&gt;2022年を振り返った。&lt;br&gt;&#xA;例年GitHub上の振り返りもしていたが、2022年はこの記事だけにしようと思う。&lt;br&gt;&#xA;// 2022年中の公開は間に合わなかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub CLIを使って任意の条件のissueを一括closeする（一括操作する）</title>
      <link>https://budougumi0617.github.io/2022/09/20/closed-stale-github-issue-by-manual/</link>
      <pubDate>Tue, 20 Sep 2022 09:36:26 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/09/20/closed-stale-github-issue-by-manual/</guid>
      <description>&lt;p&gt;業務のタスク管理としてGitHub Project（Issue）を使っている。&lt;br&gt;&#xA;Issueの棚卸しとして、古いIssueを一括closeしたときの操作をまとめる。&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://docs.github.com/ja/graphql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub GraphQL API v4&lt;/a&gt;を用いてやろうと思ったが、GitHub CLIを利用する方法が一番カンタンだった。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://cli.github.com/&#34; data-iframely-url=&#34;//iframely.net/Yqle0ig?card=small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//iframely.net/embed.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>「詳解Go言語Webアプリケーション開発」という本を発売しました</title>
      <link>https://budougumi0617.github.io/2022/07/22/release_go_web_application_book/</link>
      <pubDate>Fri, 22 Jul 2022 10:14:41 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/07/22/release_go_web_application_book/</guid>
      <description>&lt;p&gt;「詳解Go言語Webアプリケーション開発」という書籍を執筆し、2022/07/22にC&amp;amp;R研究所様より発売しました。&lt;br&gt;&#xA;全国書店やAmazonで購入できます。本記事では本の内容の紹介や執筆経緯、執筆してみての感想など書きます。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.c-r.com/book/detail/1462&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.c-r.com/book/detail/1462&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Conferrence 2022 Springで登壇した #gocon</title>
      <link>https://budougumi0617.github.io/2022/04/25/gocon2022spring/</link>
      <pubDate>Mon, 25 Apr 2022 17:00:55 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/04/25/gocon2022spring/</guid>
      <description>&lt;p&gt;先日行われたGo Conferrence 2022 Springで「testingパッケージを使ったWebアプリケーションテスト」というタイトルで登壇した。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://gocon.jp/2022spring/sessions/a10-s/&#34; data-iframely-url=&#34;//iframely.net/rILEO0q?card=small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//iframely.net/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[New Relic] FACET CASE句を使って外部サービスのエンドポイントのレスポンスタイムを集計する</title>
      <link>https://budougumi0617.github.io/2022/03/22/newrelic_make_external_api_by_facet_case_capture/</link>
      <pubDate>Tue, 22 Mar 2022 09:33:50 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/03/22/newrelic_make_external_api_by_facet_case_capture/</guid>
      <description>&lt;p&gt;New Relicを使って外部サービスのエンドポイント別のレスポンスタイムを可視化した。&lt;br&gt;&#xA;IDのようなパスパラメータを含むエンドポイントがあるときは&lt;code&gt;FACET CASE&lt;/code&gt;句と&lt;code&gt;capture&lt;/code&gt;関数を使うとよい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]]THE CULTURE CODE 最強チームをつくる方法 | 何が良いチームをつくるのか？</title>
      <link>https://budougumi0617.github.io/2022/02/27/review_culture_code/</link>
      <pubDate>Sun, 27 Feb 2022 11:53:48 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/02/27/review_culture_code/</guid>
      <description>&lt;p&gt;チームの文化を作るために必要なことはなにか知るためにTHE CULTURE CODEを読んだ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://amzn.to/41TRusZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;THE CULTURE CODE 最強チームをつくる方法&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[書評] NO RULES 世界一「自由」な会社、NETFLIX | コントロールではなくコンテキストを</title>
      <link>https://budougumi0617.github.io/2022/02/16/review_netflix_no_rules/</link>
      <pubDate>Wed, 16 Feb 2022 10:36:28 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/02/16/review_netflix_no_rules/</guid>
      <description>&lt;p&gt;ハイパフォーマンス集団になるためのヒントを探しにNO RULESを読んだ。&lt;br&gt;&#xA;すべてをいますぐ真似することはできないが思想と目指すところにはとても共感できた。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08LDBNG74&amp;linkId=783e144a91e549747cb4d1d087a20ea1&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Notion] Mac Appでフォントのサイズが大きくならない</title>
      <link>https://budougumi0617.github.io/2022/01/30/notion_size_up_font_on_mac_app/</link>
      <pubDate>Sun, 30 Jan 2022 16:20:47 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/01/30/notion_size_up_font_on_mac_app/</guid>
      <description>&lt;p&gt;NotionのMac Appでアプリ全体のフォントサイズを大きくできなかったのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]ユニコーン企業のひみつ</title>
      <link>https://budougumi0617.github.io/2022/01/07/review_competing_with_unicorns/</link>
      <pubDate>Fri, 07 Jan 2022 10:11:14 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2022/01/07/review_competing_with_unicorns/</guid>
      <description>&lt;p&gt;チームトポロジーの前に読んでおこうと、今更ながらユニコーン企業のひみつを読んだので書評を書いておく。&#xA;物理本はA5サイズで図もふんだんなため3時間くらいで読めた。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4873119464&amp;linkId=74019af52dbda52dab2e1064720b0b00&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>2021年振り返り</title>
      <link>https://budougumi0617.github.io/2021/12/30/retrospective-2021/</link>
      <pubDate>Thu, 30 Dec 2021 09:30:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/12/30/retrospective-2021/</guid>
      <description>&lt;p&gt;2021年を振り返ってみる。GitHubベースの振り返りは別記事にまとめた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2021/12/26/retrospective-on-github-2021/&#34;&gt;2021年振り返り(GitHub編)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2021年振り返り（GitHub編）</title>
      <link>https://budougumi0617.github.io/2021/12/26/retrospective-on-github-2021/</link>
      <pubDate>Sun, 26 Dec 2021 15:00:57 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/12/26/retrospective-on-github-2021/</guid>
      <description>&lt;p&gt;今年も例年通りGitHubの活動を振り返った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gomockで順序を無視してスライスの引数を検証する</title>
      <link>https://budougumi0617.github.io/2021/12/20/gomock_verify_in_any_order/</link>
      <pubDate>Mon, 20 Dec 2021 10:30:49 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/12/20/gomock_verify_in_any_order/</guid>
      <description>&lt;p&gt;この記事はGoアドベントカレンダー2021 その1 20日目の記事となる。&lt;br&gt;&#xA;この記事では&lt;code&gt;github.com/golang/mock&lt;/code&gt;を使ったモックのメソッドで順不同なスライス引数を検証する方法を紹介する。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2021/go&#34; data-iframely-url=&#34;//cdn.iframe.ly/7pSCCsM?card=small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[書評] A Philosophy of Software Design を読んだ。複雑性を理解し、戦う術を身につけた</title>
      <link>https://budougumi0617.github.io/2021/12/17/review_aposd/</link>
      <pubDate>Fri, 17 Dec 2021 11:00:13 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/12/17/review_aposd/</guid>
      <description>&lt;p&gt;この記事は「おすすめ本 Advent Calendar 2021」17日目の記事となる。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://adventar.org/calendars/6382/embed&#34; data-iframely-url=&#34;//cdn.iframe.ly/pOcNyR6&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://booklog.jp/users/budougumi/stats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;今年読了した40冊ほどの本&lt;/a&gt;の中で一番よかった「A Philosophy of Software Design」を紹介する。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B09B8LFKQL&amp;linkId=bd9397f5a902d0c2ba71700b09d6f547&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>GitHub ActionsでER図を自動生成する話とNew Relicでデプロイ頻度をグラフにする話を寄稿した</title>
      <link>https://budougumi0617.github.io/2021/12/12/publish_base_blog/</link>
      <pubDate>Sun, 12 Dec 2021 10:11:36 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/12/12/publish_base_blog/</guid>
      <description>&lt;p&gt;会社のブログに寄稿したのでそちらには書かなかった個人的な感想と一緒にメモ。&lt;/p&gt;&#xA;&lt;div style=&#34;left: 0; width: 100%; height: 190px; position: relative;&#34;&gt;&lt;iframe src=&#34;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdevblog.thebase.in%2Fentry%2Fauto_generated_er_graph_by_tbls_and_github_actions&#34; style=&#34;top: 0; left: 0; width: 100%; height: 100%; position: absolute; border: 0;&#34; allowfullscreen scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&#xA;&lt;div style=&#34;left: 0; width: 100%; height: 190px; position: relative;&#34;&gt;&lt;iframe src=&#34;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdevblog.thebase.in%2Fentry%2Fdevops_key_metrics_on_newrelic&#34; style=&#34;top: 0; left: 0; width: 100%; height: 100%; position: absolute; border: 0;&#34; allowfullscreen scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>[書評] WHO YOU AREを読んだ。文化とはルールではない。行動だ。</title>
      <link>https://budougumi0617.github.io/2021/11/28/review_who_you_are/</link>
      <pubDate>Sun, 28 Nov 2021 11:30:51 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/11/28/review_who_you_are/</guid>
      <description>&lt;p&gt;WHO YOU AREを読んだ。&#xA;同著者の「HARD THINGS」も良かったが今作もよかった。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B086KX8LHZ&amp;linkId=4d160bf698b033b193efd91155f35ad8&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Notion] 完了ステータスのタスクの数を集計する（あるDBのSelectプロパティの特定値の数を集計する）</title>
      <link>https://budougumi0617.github.io/2021/11/26/notion_count_done/</link>
      <pubDate>Fri, 26 Nov 2021 18:30:15 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/11/26/notion_count_done/</guid>
      <description>&lt;p&gt;最近Notionを使い始めた。ステータスプロパティを追加した「タスク」DBでタスク管理をしている。&lt;br&gt;&#xA;「Done」タスクの数を数えるには少し回り道が必要だったのでメモしておく。&lt;br&gt;&#xA;なお、この記事は2021/11/26時点のNotionの機能をベースに記載されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Athenaでドットが含まれたJSONキーをパースする</title>
      <link>https://budougumi0617.github.io/2021/11/23/aws_athena_parse_key_with_dot/</link>
      <pubDate>Tue, 23 Nov 2021 00:57:39 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/11/23/aws_athena_parse_key_with_dot/</guid>
      <description>&lt;p&gt;ググっても答えがほとんど見つからなかったのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] 恐れのない組織 「心理的安全性」が学習・イノベーション・成長をもたらす</title>
      <link>https://budougumi0617.github.io/2021/10/31/review_the_fearless_organization/</link>
      <pubDate>Sun, 31 Oct 2021 10:59:06 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/10/31/review_the_fearless_organization/</guid>
      <description>&lt;p&gt;組織で成果を上げるために必要な知識として心理的安全性に関する本を読んだ。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08R8KBZKZ&amp;linkId=fc21153f17881b650937228a519823e2&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[書評] 他者と働く─「わかりあえなさ」から始める組織論</title>
      <link>https://budougumi0617.github.io/2021/10/26/review_work_with_others/</link>
      <pubDate>Tue, 26 Oct 2021 10:30:45 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/10/26/review_work_with_others/</guid>
      <description>&lt;p&gt;他者とよい関係を気づきながらモノゴトや困難に立ち向かっていくために読んだ。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07Y5FF3M4&amp;linkId=5df86419e7d043705a0bec03c808b477&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Go] JSONを構造体にマッピングしつつ生データを保存するUnmarshalJSONの実装方法</title>
      <link>https://budougumi0617.github.io/2021/10/25/smart_saving_json_raw_message/</link>
      <pubDate>Mon, 25 Oct 2021 08:00:09 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/10/25/smart_saving_json_raw_message/</guid>
      <description>&lt;p&gt;GoではJSONを扱うときでもしっかり型定義に当てはめて利用するのが一般的だ。&lt;br&gt;&#xA;しかし、外部から受け取ったJSONデータは型に当てはめつつ併せて生データも保存しておきたいときがある。&lt;br&gt;&#xA;&lt;code&gt;Defind Type&lt;/code&gt;をうまく使うとシンプルな&lt;code&gt;UnmarshalJSON(data []byte)&lt;/code&gt;メソッドを定義できる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;type&lt;/span&gt; Event &lt;span style=&#34;color:#268bd2&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ID   &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;          &lt;span style=&#34;color:#2aa198&#34;&gt;`json:&amp;#34;id&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Type &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;          &lt;span style=&#34;color:#2aa198&#34;&gt;`json:&amp;#34;type&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Payload Payload      &lt;span style=&#34;color:#2aa198&#34;&gt;`json:&amp;#34;pyload&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// 構造体にマッピングする前のJSONを保存しておきたい&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    Raw  json.RawMessage &lt;span style=&#34;color:#2aa198&#34;&gt;`json:&amp;#34;-&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>[書評] 失敗の科学 失敗から学習する組織、学習できない組織</title>
      <link>https://budougumi0617.github.io/2021/09/30/review_black_box_thinking/</link>
      <pubDate>Thu, 30 Sep 2021 04:51:19 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/09/30/review_black_box_thinking/</guid>
      <description>&lt;p&gt;失敗の科学を読んだ。&lt;br&gt;&#xA;「失敗から学ぶ」というと受け身な印象を受けるがそんなことはなく能動的に挑戦していく精神・方法を学べるいい本だった。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01MU364ID&amp;linkId=a51825928712d9ad1fee02705b0271c5&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title> [書評] フリーズする脳　思考が止まる、言葉に詰まる</title>
      <link>https://budougumi0617.github.io/2021/09/24/review_frozen_brain/</link>
      <pubDate>Fri, 24 Sep 2021 09:47:26 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/09/24/review_frozen_brain/</guid>
      <description>&lt;p&gt;最近物覚えがよくなかったり、急に話しかけられたときの挙動が不安定なので読んだ。&lt;br&gt;&#xA;プログラマのような職種とリモートワークの掛け算はとくに若年性ボケになりやすそうだと自覚した。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01NB17KYZ&amp;linkId=8e64b98c6733e51198c0db810601dd6d&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Go] 前方互換性を保ちながらhttp.DefaultTransportからチューニングしたhttp.Transportをつくる</title>
      <link>https://budougumi0617.github.io/2021/09/13/how_to_copy_default_transport/</link>
      <pubDate>Mon, 13 Sep 2021 10:00:13 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/09/13/how_to_copy_default_transport/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://twitter.com/dice_zu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dice_zu&lt;/a&gt;さんから&lt;code&gt;http.DefaultTransport&lt;/code&gt;の正しい（？）コピーのやり方を教えてもらったのでメモしておく。&lt;br&gt;&#xA;結論から言うと&lt;code&gt;http.DefaultTransport&lt;/code&gt;変数にたいして&lt;code&gt;net/http#Transport.Clone&lt;/code&gt;メソッドを使うと良い。&#xA;これなら新しいGoのバージョンで&lt;code&gt;http.Transport&lt;/code&gt;に新しいフィールドが追加されても問題ない。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://pkg.go.dev/net/http#Transport.Clone&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pkg.go.dev/net/http#Transport.Clone&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] 早く正しく決める技術</title>
      <link>https://budougumi0617.github.io/2021/08/31/review_technique_to_decide_quickly/</link>
      <pubDate>Tue, 31 Aug 2021 09:50:43 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/08/31/review_technique_to_decide_quickly/</guid>
      <description>&lt;p&gt;毎日の中で迷いがあったり下した決断で不安になったりすることがあるので手にとった。&lt;br&gt;&#xA;決断力の育て方だけでなく、直感力の重要性など多くの学びがある本だった。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00L8FDB0M&amp;linkId=2785388a387caa11355f9065b93225f4&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>S3に保存されたAWS ALBのアクセスログをローカルでさっと確認するワンライナー</title>
      <link>https://budougumi0617.github.io/2021/08/30/aws_s3_snippet_check_access_log/</link>
      <pubDate>Mon, 30 Aug 2021 00:24:25 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/08/30/aws_s3_snippet_check_access_log/</guid>
      <description>&lt;p&gt;AWS ALBのログを漁って疎通確認をするときにちょっとラクするためのスニペットメモ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ aws s3 ls s3://&lt;span style=&#34;color:#2aa198&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;ALB_LOG_BUCKET&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;}&lt;/span&gt;/AWSLogs/&lt;span style=&#34;color:#2aa198&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;ACCOUNT_ID&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;}&lt;/span&gt;/elasticloadbalancing/ap-northeast-1/2021/08/30/ &lt;span style=&#34;color:#cb4b16&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;&lt;/span&gt;| awk &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;{print &amp;#34; s3://${ALB_LOG_BUCKET}/AWSLogs/${ACCOUNT_ID}/elasticloadbalancing/ap-northeast-1/2021/08/30/&amp;#34;$4}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;&lt;/span&gt;| xargs -IS3URL aws s3 cp S3URL - | zcat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ISUCON11予選に参加した（最終スコア47,995点 79位） #isucon</title>
      <link>https://budougumi0617.github.io/2021/08/24/isucon11q/</link>
      <pubDate>Tue, 24 Aug 2021 09:55:49 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/08/24/isucon11q/</guid>
      <description>&lt;p&gt;ISUCON11予選にSpeed of Soundというチームで参加した。最終スコア47,995点で予選敗退だった。&lt;br&gt;&#xA;当日のメモややっていたよかったこと、次回に向けて頑張りたいところなどまとめておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] HARD THINGSを読んで他者との協調・組織運営について考えた</title>
      <link>https://budougumi0617.github.io/2021/07/27/review_hard_things/</link>
      <pubDate>Tue, 27 Jul 2021 09:13:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/07/27/review_hard_things/</guid>
      <description>&lt;p&gt;HARD THINGSを読んだのでその感想をまとめておく。&lt;br&gt;&#xA;困難に立ち向かうためのメンタリティはもちろんのこと、よい組織を目指すための方法や他者とどのように協調していくか学ぶことができた。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00W535LOU&amp;linkId=af942ae7197b2928cae145b3b37335da&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>Terraformでimportを使う理由とfor_eachをつかったリソース定義に実リソースをimportする方法</title>
      <link>https://budougumi0617.github.io/2021/07/26/terraform_import_into_for_each_resource/</link>
      <pubDate>Mon, 26 Jul 2021 09:23:35 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/07/26/terraform_import_into_for_each_resource/</guid>
      <description>&lt;p&gt;&lt;code&gt;for_each&lt;/code&gt;文を使ったTerraformのリソース定義に対してもimportができるよという話。&lt;br&gt;&#xA;なお、「どうしてそのようなことをする必要があるのか？」を説明する前置きのほうが長い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kindleで画像として引用する/WebブラウザでKindleのハイライト一覧を眺める</title>
      <link>https://budougumi0617.github.io/2021/07/12/kindle_highlight_tips/</link>
      <pubDate>Mon, 12 Jul 2021 01:29:27 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/07/12/kindle_highlight_tips/</guid>
      <description>&lt;p&gt;意外と知らない人が多いらしいので紹介用として記事にしておく。&lt;br&gt;&#xA;モバイルアプリを使うとKindleのハイライトは画像にしてSNSへ共有することができる。また、ハイライトした内容はブラウザ上から「メモとハイライト」を使って一覧することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでプログラムを終了するときのお作法</title>
      <link>https://budougumi0617.github.io/2021/06/30/which_termination_method_should_choose_on_go/</link>
      <pubDate>Wed, 30 Jun 2021 17:57:32 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/06/30/which_termination_method_should_choose_on_go/</guid>
      <description>&lt;p&gt;Goにはいくつかプログラムを終了させる手段が存在する。&lt;br&gt;&#xA;プログラムを終了させるときにどれを選べばいいか調べてみた。結論から言うと&lt;code&gt;main&lt;/code&gt;関数内で&lt;code&gt;defer&lt;/code&gt;を使わず&lt;code&gt;os.Exit&lt;/code&gt;関数を呼ぶ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] 1兆ドルコーチを仕事や仲間に対する姿勢について感銘をうけた</title>
      <link>https://budougumi0617.github.io/2021/06/29/review_million_dollar_coach/</link>
      <pubDate>Tue, 29 Jun 2021 10:49:50 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/06/29/review_million_dollar_coach/</guid>
      <description>&lt;p&gt;コーチングに興味をもって1兆ドルコーチを買ったけれど、仕事や仲間に対する姿勢についてとても感銘をうけた。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07ZCY5BXF&amp;linkId=bcda5af6ac52affa1de717d4c7f97adb&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[書評] 具体と抽象を読んで抽象化思考の整理と向上方法を学んだ。</title>
      <link>https://budougumi0617.github.io/2021/06/28/review_concrete_and_abstract/</link>
      <pubDate>Mon, 28 Jun 2021 09:39:51 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/06/28/review_concrete_and_abstract/</guid>
      <description>&lt;p&gt;「具体と抽象」を読んで、抽象化思考の整理と向上方法を学んだ。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B016LUTNI2&amp;linkId=71e11fd747cb9376c4f6c32f87f33601&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>GitHub API v3でPrivateリポジトリのPull Requestのdiffを取得する</title>
      <link>https://budougumi0617.github.io/2021/05/31/cannot_get_pull_request_diff/</link>
      <pubDate>Mon, 31 May 2021 09:30:50 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/05/31/cannot_get_pull_request_diff/</guid>
      <description>&lt;p&gt;GitHub API v3でPull Requestの情報をごにょごにょしようとしたらハマったのでメモ。&lt;br&gt;&#xA;GitHub API v3のPull RequestのJSONに含まれる&lt;code&gt;diff_url&lt;/code&gt;は役に立たない。&lt;code&gt;Accept&lt;/code&gt;ヘッダーでレスポンスが変化する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] ポモドーロ・テクニック入門を読んで正しくポモドーロをしようと反省した</title>
      <link>https://budougumi0617.github.io/2021/05/23/review_pomodoro_technique/</link>
      <pubDate>Sun, 23 May 2021 00:10:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/05/23/review_pomodoro_technique/</guid>
      <description>&lt;p&gt;時間あたりの生産性を向上させるため、改めてポモドーロテクニックの原典を読んでみた。&lt;br&gt;&#xA;フィードバックループを回していない自分のこれまでのポモドーロはまったくポモドーロテクニックを実践できていなかった。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07NRKH13Z&amp;linkId=1bf18116c0071db301597d223290d9b1&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>テストコードなどは除外してからPRのサイズを警告するActionsを作った</title>
      <link>https://budougumi0617.github.io/2021/05/07/reelase_action-pr-size-checker/</link>
      <pubDate>Fri, 07 May 2021 09:30:11 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/05/07/reelase_action-pr-size-checker/</guid>
      <description>&lt;p&gt;Pull Request（PR）の追加行数を計測して、指定行数以上だった場合はPRにコメントするGitHub Actionsをつくった。&lt;br&gt;&#xA;フィルターパターンを設定しておけば、テストコードや設定ファイルの追加行数を無視する。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/budougumi0617/action-pr-size-checker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/budougumi0617/action-pr-size-checker&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/marketplace/actions/action-pr-size-checker&#34; data-iframely-url=&#34;//cdn.iframe.ly/2rVGShx&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>gomockでモックメソッドの引数をいい感じに設定できるcmpmockを作った</title>
      <link>https://budougumi0617.github.io/2021/04/25/reelase_cmpmock/</link>
      <pubDate>Sun, 25 Apr 2021 08:04:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/04/25/reelase_cmpmock/</guid>
      <description>&lt;p&gt;&lt;code&gt;gomock&lt;/code&gt;（&lt;code&gt;github.com/golang/mock&lt;/code&gt;）のモックメソッドの引数をいい感じに設定できるカスタムマッチャーを作った。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/cmpmock&#34; data-iframely-url=&#34;//cdn.iframe.ly/TTjYmqy?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;br&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mrepo.&lt;span style=&#34;color:#268bd2&#34;&gt;EXPECT&lt;/span&gt;().&lt;span style=&#34;color:#268bd2&#34;&gt;Save&lt;/span&gt;(ctx, cmpmock.&lt;span style=&#34;color:#268bd2&#34;&gt;DiffEq&lt;/span&gt;(wantUser)).&lt;span style=&#34;color:#268bd2&#34;&gt;Return&lt;/span&gt;(&lt;span style=&#34;color:#cb4b16&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>[Go]環境変数を使ったテストを書く</title>
      <link>https://budougumi0617.github.io/2021/04/16/setenv_on_test/</link>
      <pubDate>Fri, 16 Apr 2021 03:38:05 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/04/16/setenv_on_test/</guid>
      <description>&lt;p&gt;Goで環境変数を使ってテストを行なうときに便利な関数を作ってみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] stringの比較でヌルポのpanicが発生する（こともある） #横浜Go読書会</title>
      <link>https://budougumi0617.github.io/2021/03/31/go-string-null-pointer-panic/</link>
      <pubDate>Wed, 31 Mar 2021 11:00:23 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/03/31/go-string-null-pointer-panic/</guid>
      <description>&lt;p&gt;誤った並行処理の実装をしていると、&lt;code&gt;string&lt;/code&gt;の比較でもヌルポのセグフォが発生する。&lt;br&gt;&#xA;正しく実装していればお目にかかることはないが、とても学びになったのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] go.uber.org/zapでNew Relic logs in contextをするためのライブラリを書き始めた</title>
      <link>https://budougumi0617.github.io/2021/03/21/release_nrzap_for_newrelic_logs_in_context/</link>
      <pubDate>Sun, 21 Mar 2021 10:30:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/03/21/release_nrzap_for_newrelic_logs_in_context/</guid>
      <description>&lt;p&gt;&lt;code&gt;uber-go/zap&lt;/code&gt;を使いつつNew Relic Logs in contextを利用するためのライブラリを作り始めた。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/nrzap&#34; data-iframely-url=&#34;//cdn.iframe.ly/2Ijbpvo?card=small&#34;&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>Amazon AlexaアプリでKindleを読み上げて積ん読を消化する（ながら読書をする）</title>
      <link>https://budougumi0617.github.io/2021/03/08/read_kindle_by_alexa/</link>
      <pubDate>Mon, 08 Mar 2021 18:02:33 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/03/08/read_kindle_by_alexa/</guid>
      <description></description>
    </item>
    <item>
      <title>Go1.16で追加されたio#ReadAll関数から読むストリーミング中のバッファ拡張の仕方</title>
      <link>https://budougumi0617.github.io/2021/02/22/update_capacity/</link>
      <pubDate>Mon, 22 Feb 2021 08:00:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/02/22/update_capacity/</guid>
      <description>&lt;p&gt;実質Futureさんの記事の引用なんだけれど自分用メモ。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://future-architect.github.io/articles/20210210/index.html&#34; data-iframely-url=&#34;//cdn.iframe.ly/gbhA0jg&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>reviewdogを使ったGitHub Actionsの作り方</title>
      <link>https://budougumi0617.github.io/2021/02/16/how_to_create_reviewdog_actions/</link>
      <pubDate>Tue, 16 Feb 2021 09:00:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/02/16/how_to_create_reviewdog_actions/</guid>
      <description>&lt;p&gt;reviewdogを使ったGitHub Actionsを作る過程をメモしておく。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2021/02/07/release_action_newrelic_segment_lint/&#34;&gt;[Go] 新規追加した関数にNew RelicのSegmentを入れ忘れていたら警告するGitHub Actionsを作った&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[Go] 新規追加した関数にNew RelicのSegmentを入れ忘れていたら警告するGitHub Actionsを作った</title>
      <link>https://budougumi0617.github.io/2021/02/07/release_action_newrelic_segment_lint/</link>
      <pubDate>Sun, 07 Feb 2021 00:19:47 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/02/07/release_action_newrelic_segment_lint/</guid>
      <description>&lt;p&gt;Goのアプリで新規関数を含むPull Requset（PR）を作ったとき、New RelicのSegmentをいれてなかったら怒るreviewdogのGitHub Actionsを作った。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/action-newrelic-segment-lint&#34; data-iframely-url=&#34;//cdn.iframe.ly/aLlaE2N?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[Go] まだレビュー中のgerrit上のコードパッチをローカルに取得する</title>
      <link>https://budougumi0617.github.io/2021/01/31/pull_cl_from_gerrit/</link>
      <pubDate>Sun, 31 Jan 2021 15:20:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/31/pull_cl_from_gerrit/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://twitter.com/dice_zu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dice_zu&lt;/a&gt;さんに教えてもらったことメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] ファイルが自動生成コードか判別したい</title>
      <link>https://budougumi0617.github.io/2021/01/22/detect_autogenerated_file/</link>
      <pubDate>Fri, 22 Jan 2021 09:39:25 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/22/detect_autogenerated_file/</guid>
      <description>&lt;p&gt;Goのコードを静的解析するとき、自動生成コードをスキップするためのメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoのアプリにNew Relic APMを導入する時とても便利なCLIを作った</title>
      <link>https://budougumi0617.github.io/2021/01/17/release_nrseg/</link>
      <pubDate>Sun, 17 Jan 2021 10:00:33 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/17/release_nrseg/</guid>
      <description>&lt;p&gt;GoのWebアプリコードにNew Relic APMでSpan（Segment）を計測するコードを自動挿入するOSSを作った。&lt;br&gt;&#xA;New RelicをGoのアプリケーションへ導入するときに利用をオススメする。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/nrseg&#34; data-iframely-url=&#34;//cdn.iframe.ly/HrUY585?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[Go] testing.Mオブジェクトを引数にとる関数をつくるアイデア</title>
      <link>https://budougumi0617.github.io/2021/01/10/use-testing-m-for-obvious-api-design/</link>
      <pubDate>Sun, 10 Jan 2021 00:05:02 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/10/use-testing-m-for-obvious-api-design/</guid>
      <description>&lt;p&gt;ライブラリを設計するときに考えたことのメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PixelaのGo用APIクライアントライブラリを作り始めた #pixela</title>
      <link>https://budougumi0617.github.io/2021/01/03/release_pixela_library/</link>
      <pubDate>Sun, 03 Jan 2021 08:00:27 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/03/release_pixela_library/</guid>
      <description>&lt;p&gt;GoのPixela APIクライアントライブラリを作り始めた。&lt;br&gt;&#xA;最低限自分が今必要なAPIはカバーできたのでpublicに公開した。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/pixela&#34; data-iframely-url=&#34;//cdn.iframe.ly/lYXbTqm?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>2020年振り返り</title>
      <link>https://budougumi0617.github.io/2020/12/27/retrospective-2020/</link>
      <pubDate>Sun, 27 Dec 2020 07:23:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/12/27/retrospective-2020/</guid>
      <description>&lt;p&gt;2020年を振り返ってみる。GitHubベースの振り返りは別記事にまとめた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2020/12/15/retrospective-on-github-2020/&#34;&gt;2020年振り返り(GitHub編)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;この記事はwrite-blog-every-week Advent Calendar 2029の25日目の記事となる（2日遅れ）。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://adventar.org/calendars/5530/embed&#34; data-iframely-url=&#34;//cdn.iframe.ly/CFIQIEi&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>2020年振り返り(GitHub編)</title>
      <link>https://budougumi0617.github.io/2020/12/15/retrospective-on-github-2020/</link>
      <pubDate>Tue, 15 Dec 2020 09:20:57 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/12/15/retrospective-on-github-2020/</guid>
      <description>&lt;p&gt;今年も例年通りGitHubの活動を振り返った。&lt;/p&gt;&#xA;&lt;p&gt;この記事は、&#xA;&lt;a href=&#34;https://adventar.org/calendars/5530&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;write-blog-every-week Advent Calendar 2020&lt;/a&gt;の15日目の記事になる。&lt;br&gt;&#xA;14日目は&#xA;&lt;a href=&#34;https://twitter.com/tada_infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tada_infra&lt;/a&gt;さんの&#xA;&lt;a href=&#34;https://sadayoshi-tada.hatenablog.com/entry/2020/12/14/090000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;毎週ブログを書くことを3年間続けてみた1年を振り返る&lt;/a&gt;だった。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://adventar.org/calendars/5530/embed&#34; data-iframely-url=&#34;//cdn.iframe.ly/CFIQIEi&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>TerraformでPixelaのグラフを宣言できるProviderを作った #pixela</title>
      <link>https://budougumi0617.github.io/2020/12/11/terraform_provider_pixela/</link>
      <pubDate>Fri, 11 Dec 2020 09:06:15 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/12/11/terraform_provider_pixela/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://pixe.la/ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixela&lt;/a&gt;のTerraform Providerを作った。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/terraform-provider-pixela&#34; data-iframely-url=&#34;//cdn.iframe.ly/zjuslmC&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[Go] benchstat/go tool traceコマンドをつかったベンチマークの可視化</title>
      <link>https://budougumi0617.github.io/2020/12/04/goroutine_tuning_with_benchmark_benchstat_trace/</link>
      <pubDate>Fri, 04 Dec 2020 19:00:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/12/04/goroutine_tuning_with_benchmark_benchstat_trace/</guid>
      <description>&lt;p&gt;この記事は&#xA;&lt;a href=&#34;https://qiita.com/advent-calendar/2020/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Advent Calendar 2020&lt;/a&gt; 4日目の記事となる。&lt;br&gt;&#xA;今回はGoでベンチマークの結果を可視化する方法をまとめる。&#xA;また、可視化した結果を用いてgoroutine最適化のリファクタリングをしてみる。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2020/go&#34; data-iframely-url=&#34;//cdn.iframe.ly/wxnEBTy?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>TerraformレジストリにリリースしようとGPG Keyをimportしようとすると「Could not find valid encryption key packet in key ~~」とエラーになる</title>
      <link>https://budougumi0617.github.io/2020/11/27/terraform_could_not_find_valid_encryption_key_packet_in_key/</link>
      <pubDate>Fri, 27 Nov 2020 09:44:44 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/27/terraform_could_not_find_valid_encryption_key_packet_in_key/</guid>
      <description>&lt;p&gt;Terraform Registryへ自作Providerをリリースしようとしたときに半日ハマったのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ifelseやswitch文のようにGitHub Actionsのステップの実行を制御したい</title>
      <link>https://budougumi0617.github.io/2020/11/21/execute_steps_with_iflese_in_github_actions/</link>
      <pubDate>Sat, 21 Nov 2020 13:15:23 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/21/execute_steps_with_iflese_in_github_actions/</guid>
      <description>&lt;p&gt;GitHub Actions上でこんな感じにステップの実行を制御する方法をまとめておく。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if condition1 {&#xA;  step1 実行&#xA;} else if condition2 {&#xA;  step2 実行&#xA;} else {&#xA;  step3 実行&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>自作Terraform Providerのユニットテストの書き方</title>
      <link>https://budougumi0617.github.io/2020/11/17/unittest_for_terraform_custom_provider/</link>
      <pubDate>Tue, 17 Nov 2020 09:30:48 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/17/unittest_for_terraform_custom_provider/</guid>
      <description>&lt;p&gt;公式チュートリアルには載っていなかったので、自作Terraform Providerを作るときのユニットテストの書き方をメモしておく。&lt;br&gt;&#xA;なお、最初にコメントしておくと今回の記事はかなり説明を省略しているので各Providerにコミットしたことがあるか自作Providerを作った人じゃないとわからなそう…&lt;/p&gt;</description>
    </item>
    <item>
      <title>TerraformでAWS上にHTTPS化したサブドメインを定義する</title>
      <link>https://budougumi0617.github.io/2020/11/07/define_https_subdomain_by_terraform/</link>
      <pubDate>Sat, 07 Nov 2020 00:19:31 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/07/define_https_subdomain_by_terraform/</guid>
      <description>&lt;p&gt;個人のAWS環境でTerraformを使ってHTTPS化したサブドメインを定義した。&lt;br&gt;&#xA;普段なかなかしないことで忘れてしまうので手順をまとめおく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] 埋め込みフィールドを使ったラッパー構造体定義</title>
      <link>https://budougumi0617.github.io/2020/11/01/how_to_craete_wrapper/</link>
      <pubDate>Sun, 01 Nov 2020 17:59:43 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/01/how_to_craete_wrapper/</guid>
      <description>&lt;p&gt;Goである構造体（例:サードパーティのクライアント）のラッパーを書くときは埋込みフィールドを使うといいよという話。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goらしさとは何なのか考える</title>
      <link>https://budougumi0617.github.io/2020/10/23/think_go_way/</link>
      <pubDate>Fri, 23 Oct 2020 09:50:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/10/23/think_go_way/</guid>
      <description>&lt;p&gt;「Goらしさ」や「Goに入ってはGoに従え」というけれど、「Goらしい」って一体なんだろう？と考えてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>goreleaserとGitHub Actionsを使えばGoのCLIはgit tagをpushするだけでGitHubとHomeBrewに自動リリースできる</title>
      <link>https://budougumi0617.github.io/2020/10/07/auto_release_by_goreleaser/</link>
      <pubDate>Wed, 07 Oct 2020 12:16:30 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/10/07/auto_release_by_goreleaser/</guid>
      <description>&lt;p&gt;goreleaserを使うとGo製のCLIのGitHubのリリースページの更新とHomeBrew Tap用リリースも簡単に行える。&lt;br&gt;&#xA;さらにGitHub Actionsを使えばYAMLを2ファイル追加するだけでgit tagに合わせて全自動リリースが可能になる。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/goreleaser/goreleaser-action&#34; data-iframely-url=&#34;//cdn.iframe.ly/N4iA3Tu?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>LeetCodeをローカルで効率よく解くためのGo専用CLIを作った</title>
      <link>https://budougumi0617.github.io/2020/10/06/release_leetgode/</link>
      <pubDate>Tue, 06 Oct 2020 10:42:02 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/10/06/release_leetgode/</guid>
      <description>&lt;p&gt;LeetCodeの問題をGoを使って解いている。&lt;br&gt;&#xA;テストファーストで解くためにテストコードも自動生成するCLIを作った。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/leetgode&#34; data-iframely-url=&#34;//cdn.iframe.ly/oK5Ai7E&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title> #golangtokyo 技術書典9の新刊に「LeetCodeでアルゴリズムとデータ構造エクササイズ」を寄稿しました #技術書典</title>
      <link>https://budougumi0617.github.io/2020/09/18/shoten9_golangtokyo/</link>
      <pubDate>Fri, 18 Sep 2020 09:42:25 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/09/18/shoten9_golangtokyo/</guid>
      <description>&lt;p&gt;技術書典9に&#xA;&lt;a href=&#34;https://golangtokyo.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.tokyo&lt;/a&gt;も参加しています。&lt;br&gt;&#xA;私は、今回の新刊である「Gopherの休日2020夏」に「LeetCodeでアルゴリズムとデータ構造エクササイズ」という内容で寄稿しました。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/product/5139800384339968&#34; data-iframely-url=&#34;//cdn.iframe.ly/33NuhY3&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[書評] 「わかるとはどういうことか」を読んで”わかる”がどんなことかわかった</title>
      <link>https://budougumi0617.github.io/2020/09/17/review_wakarutoha/</link>
      <pubDate>Thu, 17 Sep 2020 02:16:08 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/09/17/review_wakarutoha/</guid>
      <description>&lt;p&gt;「わかる」をわかるために「わかるとはどういうことか」を読んだ。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00IHR7ZVK&amp;linkId=1c50509c21daa9f60c35fa25c151344d&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Go] signal.Notifyを使うときは必ずバッファ付きチャネルで利用すること</title>
      <link>https://budougumi0617.github.io/2020/09/06/why_signal_notify_want_buffered_channel/</link>
      <pubDate>Sun, 06 Sep 2020 14:42:42 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/09/06/why_signal_notify_want_buffered_channel/</guid>
      <description>&lt;p&gt;Goで&lt;code&gt;singal.Notify&lt;/code&gt;関数を使うときは必ずバッファありチャネルを利用しなくてはいけない。&lt;br&gt;&#xA;なぜバッファなしチャネルを使ってはいけないのかまとめた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://godoc.org/os/signal#Notify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://godoc.org/os/signal#Notify&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[Go] パフォーマンスが悪い正規表現パッケージの使い方をチェックするlinterを作った</title>
      <link>https://budougumi0617.github.io/2020/08/20/regexponce/</link>
      <pubDate>Thu, 20 Aug 2020 00:47:56 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/08/20/regexponce/</guid>
      <description>&lt;p&gt;正規表現パッケージのコンパイルを何度も呼び出していないかチェックするlinterを作った。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/regexponce&#34; data-iframely-url=&#34;//cdn.iframe.ly/GXXIAnF&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[書評] Engineers in VOYAGEを読んで事業に立ち向かう技術者を知る #voyagebook</title>
      <link>https://budougumi0617.github.io/2020/08/16/review_voyagebook/</link>
      <pubDate>Sun, 16 Aug 2020 09:54:34 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/08/16/review_voyagebook/</guid>
      <description>&lt;p&gt;随所で話題のVAYOGE本を一気読みしたので感想をメモしておく。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;楽しみにしていた本が届いたので早速読む！！ &lt;a href=&#34;https://twitter.com/hashtag/voyagebook?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#voyagebook&lt;/a&gt;&lt;a href=&#34;https://t.co/ogxcPIz1ED&#34;&gt;https://t.co/ogxcPIz1ED&lt;/a&gt; &lt;a href=&#34;https://t.co/YuJFcfCx3z&#34;&gt;pic.twitter.com/YuJFcfCx3z&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yoichiro Shimizu (@budougumi0617) &lt;a href=&#34;https://twitter.com/budougumi0617/status/1293813474879889408?ref_src=twsrc%5Etfw&#34;&gt;August 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>vim-goを使わず、LSP（gopls）を使ってVimのGo開発環境を構築する</title>
      <link>https://budougumi0617.github.io/2020/07/24/make_vimrc_with_lsp/</link>
      <pubDate>Fri, 24 Jul 2020 07:00:26 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/07/24/make_vimrc_with_lsp/</guid>
      <description>&lt;p&gt;2020年にもなったので、vim-goを卒業して、vim-lsp（gopls）を使ったVimの開発環境を構築する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] gopls 0.4.3で構造体を初期化（&#34;fillstruct&#34;）しようとしても、&#34;No code actions found&#34;とだけ表示される</title>
      <link>https://budougumi0617.github.io/2020/07/18/use_fillstruct_of_goplus_on_vim/</link>
      <pubDate>Sat, 18 Jul 2020 13:50:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/07/18/use_fillstruct_of_goplus_on_vim/</guid>
      <description>&lt;p&gt;gopls 0.4.3を使って構造体を初期化（&lt;code&gt;fillstruct&lt;/code&gt;）しようとする（正確に言うとvim-lspで&lt;code&gt;:LspCodeAction&lt;/code&gt;をする）と、&lt;code&gt;No code actions found&lt;/code&gt;と表示されるだけで初期化ができなかった。&lt;br&gt;&#xA;0.4.3でも構造体の初期化を行うためのメモ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2020/08/04追記&#xA;&lt;ul&gt;&#xA;&lt;li&gt;gopls 0.4.4からfillstruct機能がデフォルト有効に戻ったようだ！&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/golang/tools/releases/tag/gopls/v0.4.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/golang/tools/releases/tag/gopls/v0.4.4&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Fillstruct performance improvements. It is now enabled by default again. (@joshbaum)&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>[Go]HTTPレスポンスボディの内容をログに残したい</title>
      <link>https://budougumi0617.github.io/2020/06/21/record_response_body/</link>
      <pubDate>Sun, 21 Jun 2020 19:13:24 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/06/21/record_response_body/</guid>
      <description>&lt;p&gt;GoでHTTPサーバを作成するとき、アクセスログを収集する文脈でレスポンスを記録したくなるだろう。&#xA;Middlewareを作成して、HTTPレスポンスをLoggerに出力するやり方をまとめる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]次世代イメージcimg/goとcircleci/go Orbsを使った2020年版CircleCIの環境構築</title>
      <link>https://budougumi0617.github.io/2020/06/08/circleci_cimg_go_2020/</link>
      <pubDate>Mon, 08 Jun 2020 09:05:58 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/06/08/circleci_cimg_go_2020/</guid>
      <description>&lt;p&gt;2020年になって、CircleCIのCI用の公式ベースイメージは&lt;code&gt;cimg/base&lt;/code&gt;派生になった。&lt;br&gt;&#xA;ただ、2020/06/07現在、Go向けの言語別公式ガイドの中身は古いままである。&lt;br&gt;&#xA;&lt;code&gt;cimg/go&lt;/code&gt;を使ったGo向けのCircleCIの設定をまとめる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料]ゆるふわ分散トレースはじめました #コネヒトマルシェ</title>
      <link>https://budougumi0617.github.io/2020/06/04/connehito_marche/</link>
      <pubDate>Thu, 04 Jun 2020 16:26:45 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/06/04/connehito_marche/</guid>
      <description>&lt;p&gt;2020/06/04のコネヒトマルシェオンラインで登壇したので資料中の参考情報をまとめておく。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://connehito.connpass.com/event/176890/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://connehito.connpass.com/event/176890/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Goのtestを理解する - httptestサブパッケージ編</title>
      <link>https://budougumi0617.github.io/2020/05/29/go-testing-httptest/</link>
      <pubDate>Fri, 29 May 2020 12:19:49 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/29/go-testing-httptest/</guid>
      <description>&lt;p&gt;Goのテストについていくつかまとめを書いていた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/30/go-testing2019/&#34;&gt;Goのtestを理解する in 2019&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;触れるのを忘れていたhttptestパッケージについてまとめる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://golang.org/pkg/net/http/httptest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://golang.org/pkg/net/http/httptest/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Goのパッケージ名は単数形？複数形？</title>
      <link>https://budougumi0617.github.io/2020/05/22/package-name-in-go/</link>
      <pubDate>Fri, 22 May 2020 09:16:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/22/package-name-in-go/</guid>
      <description>&lt;p&gt;Goのパッケージ名には複数形の名前はつけないほうがよいというメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] 情報と向きあい、より深い思考をするためにインテグラル・シンキングを読んだ</title>
      <link>https://budougumi0617.github.io/2020/05/14/review-integral-thinking/</link>
      <pubDate>Thu, 14 May 2020 09:06:06 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/14/review-integral-thinking/</guid>
      <description>&lt;p&gt;「インテグラル・シンキング　――統合的思考のためのフレームワーク」を読んだので感想をまとめた。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B009SXCOZO&amp;linkId=40ac60f9357474af978150e01718a7f7&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Go] 一部のフィールドを無視して構造体を比較したいときはgo-cmpを使う</title>
      <link>https://budougumi0617.github.io/2020/05/08/go-cmp-diif-with-ignore-fields/</link>
      <pubDate>Fri, 08 May 2020 08:31:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/08/go-cmp-diif-with-ignore-fields/</guid>
      <description>&lt;p&gt;Goでテストを書くとき、期待値として構造体を比較したいときは多々ある。&lt;br&gt;&#xA;時刻情報など、構造体の一部のフィールドの値だけ無視して構造体オブジェクトを比較する方法をまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub Actions上でGCP Datastoreエミュレータを使ったテストを実行する</title>
      <link>https://budougumi0617.github.io/2020/05/01/use-datastore-emulator-on-github-actions/</link>
      <pubDate>Fri, 01 May 2020 08:42:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/01/use-datastore-emulator-on-github-actions/</guid>
      <description>&lt;p&gt;GCP Datastoreを扱うコードをGitHub Actions上でテストする方法をまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Go Playgroundの実行結果に画像を出力する</title>
      <link>https://budougumi0617.github.io/2020/04/22/render-image-on-go-playground/</link>
      <pubDate>Wed, 22 Apr 2020 00:08:35 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/04/22/render-image-on-go-playground/</guid>
      <description>&lt;p&gt;Go Playgroundのテンプレートを見ていたら画像を出力できることを発見した。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2020/04/22_playground.png&#34; alt=&#34;実行結果&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trelloでカードを連続で登録したいときに覚えておきたいショートカット</title>
      <link>https://budougumi0617.github.io/2020/04/17/trello_shortcuts/</link>
      <pubDate>Fri, 17 Apr 2020 10:25:41 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/04/17/trello_shortcuts/</guid>
      <description>&lt;p&gt;個人のタスク管理にTrelloを使っている。&lt;br&gt;&#xA;Trelloで連続的にタスクを登録したいときに便利なショートカットをまとめておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Python] aiohttpで独自形式のアクセスログを出力する</title>
      <link>https://budougumi0617.github.io/2020/04/11/python-access-log-in-aiohttp/</link>
      <pubDate>Sat, 11 Apr 2020 11:29:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/04/11/python-access-log-in-aiohttp/</guid>
      <description>&lt;p&gt;PythonのWebアプリケーションフレームワーク（WAF）である&lt;code&gt;aiohttp&lt;/code&gt;でカスタムロガーを使ってアクセスログを出力する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Python] aiohttpでリクエストスコープのコンテキスト情報を扱う</title>
      <link>https://budougumi0617.github.io/2020/04/08/python-use-context-var-in-aiohttp/</link>
      <pubDate>Wed, 08 Apr 2020 09:30:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/04/08/python-use-context-var-in-aiohttp/</guid>
      <description>&lt;p&gt;Python（&lt;code&gt;aiohttp&lt;/code&gt;）で透過的にリクエストIDを扱いたいと思い、コンテキストについて調べてみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでサーバを立ち上げてE2Eテストを実施するCI用のテストコードを書く</title>
      <link>https://budougumi0617.github.io/2020/03/27/http-test-in-go/</link>
      <pubDate>Fri, 27 Mar 2020 20:00:22 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/27/http-test-in-go/</guid>
      <description>&lt;p&gt;GoでCIで動かせるE2Eテストコードを書くための下調べをしたのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Observability Japan Online #1 に参加してo11y成熟モデルを学んだ #o11yjp</title>
      <link>https://budougumi0617.github.io/2020/03/21/observability_japan_online/</link>
      <pubDate>Sat, 21 Mar 2020 10:55:46 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/21/observability_japan_online/</guid>
      <description>&lt;p&gt;Observabilityの勉強会に参加したので、メモ。&lt;/p&gt;&#xA;&lt;p&gt;なお、録画されていたので、動画は以下で視聴することができる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://youtu.be/mulfJV1F1nc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://youtu.be/mulfJV1F1nc&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>The Go Playground（play.golang.org）のショートカットキー</title>
      <link>https://budougumi0617.github.io/2020/03/13/shortcut-keys-on-the-go-playground/</link>
      <pubDate>Fri, 13 Mar 2020 08:32:11 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/13/shortcut-keys-on-the-go-playground/</guid>
      <description>&lt;p&gt;ちょっとした動作確認にThe Go Playgroundを多用する。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://play.golang.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://play.golang.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;実は、The Go Playgroundにはショートカットキーが存在するので、マウス操作は必要ない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo v0.60以上を使うと、Markdown中のHTMLタグが「raw HTML omitted」となって消えてしまう</title>
      <link>https://budougumi0617.github.io/2020/03/10/hugo-render-raw-html/</link>
      <pubDate>Tue, 10 Mar 2020 09:03:12 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/10/hugo-render-raw-html/</guid>
      <description>&lt;p&gt;2020/03/07時点で最新のHugo v0.66.0で&lt;code&gt;hugo&lt;/code&gt;コマンドを使ってMarkdownファイルからHTMLを生成した。&lt;br&gt;&#xA;すると、Markdown中に含まれていたHTMLタグがすべて&lt;code&gt;&amp;lt;!-- raw HTML omitted --&amp;gt;&lt;/code&gt;と出力され消えるようになってしまった。&lt;br&gt;&#xA;結論から言うと、Hugo v0.60.0からは設定で明示的に「HTMLタグをそのまま出力する」オプションを設定する必要があった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] 省略記号（...）を使った配列宣言の仕方</title>
      <link>https://budougumi0617.github.io/2020/03/06/go-array-with-the-ellipsis/</link>
      <pubDate>Fri, 06 Mar 2020 08:40:26 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/06/go-array-with-the-ellipsis/</guid>
      <description>&lt;p&gt;標準パッケージのコードを眺めていたら、珍しい書き方の部分を見つけた。&lt;br&gt;&#xA;以下のように宣言すると、配列サイズを明示的に書かずに配列を宣言できる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#719e07&#34;&gt;...&lt;/span&gt;]&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>[冒頭公開]技術書典 応援祭にgolang.tokyo新刊「Gopherの休日2020冬」で参加します #技術書典</title>
      <link>https://budougumi0617.github.io/2020/02/28/shote8-golangtokyo/</link>
      <pubDate>Fri, 28 Feb 2020 09:37:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/02/28/shote8-golangtokyo/</guid>
      <description>&lt;p&gt;技術書典8は中止になってしまいましたが、オンラインで開催される技術書典 応援祭に&#xA;&lt;a href=&#34;https://golangtokyo.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.tokyo&lt;/a&gt;も参加します。&lt;br&gt;&#xA;私は、今回の新刊である「Gopherの休日2020冬」に「GoにおけるSOLID原則」という内容で寄稿しました。&lt;br&gt;&#xA;また、その冒頭部分も公開します。気になる方はどうぞ次のリンク先よりご購入ください。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/product/6332688805920768&#34; data-iframely-url=&#34;//cdn.iframe.ly/9iNdWhK&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[Go] context.TODO()を使って漸進的にcontext対応を始める</title>
      <link>https://budougumi0617.github.io/2020/02/21/use-context/</link>
      <pubDate>Fri, 21 Feb 2020 09:55:37 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/02/21/use-context/</guid>
      <description>&lt;p&gt;Goではメソッドや関数の引数に&lt;code&gt;context.Context&lt;/code&gt;が含められていると何かと便利だ。&lt;br&gt;&#xA;とはいえ、最初からアプリケーションが&lt;code&gt;context.Context&lt;/code&gt;を考慮していない場合もある。&lt;br&gt;&#xA;アプリケーションを漸進的に&lt;code&gt;context.Context&lt;/code&gt;に対応させる方法を書いておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料] PHPerKaigi2020 PHPでつくるインタプリタ入門 #phperkaigi</title>
      <link>https://budougumi0617.github.io/2020/02/10/phperkaigi2020/</link>
      <pubDate>Mon, 10 Feb 2020 07:53:31 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/02/10/phperkaigi2020/</guid>
      <description></description>
    </item>
    <item>
      <title>[Go] Defined type（Named type）とType aliasを使い分ける</title>
      <link>https://budougumi0617.github.io/2020/02/01/go-named-type-and-type-alias/</link>
      <pubDate>Sat, 01 Feb 2020 12:31:27 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/02/01/go-named-type-and-type-alias/</guid>
      <description>&lt;p&gt;Goには既存の型に新しい名前をつける方法が2つある。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;type MyType int&lt;/code&gt;と宣言するDefined type&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以前はNamed typeと言っていたが、Go1.11からDefined typeと呼ぶようになった&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;type MyType = int&lt;/code&gt;と宣言するType alias&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;すでにいろいろ記事はあるものの、最近数回聞かれることがあったので改めてまとめておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PHPで独自クラスを使った型キャストをおこなう方法</title>
      <link>https://budougumi0617.github.io/2020/01/29/php-cast-original-class/</link>
      <pubDate>Wed, 29 Jan 2020 07:29:29 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/01/29/php-cast-original-class/</guid>
      <description>&lt;p&gt;PHPで型を使って安全かつIDEの支援を受けながら開発したい。&lt;br&gt;&#xA;&lt;code&gt;array&lt;/code&gt;やインターフェイスで受け取った引数に、型をキャストする方法を考えた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Re:VIEW] textlintのlintエラーからttインライン命令で装飾された文字列を除外する</title>
      <link>https://budougumi0617.github.io/2020/01/19/textlint-ignore-tt-inlines/</link>
      <pubDate>Sun, 19 Jan 2020 11:46:11 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/01/19/textlint-ignore-tt-inlines/</guid>
      <description>&lt;p&gt;Re:VIEWで文書を作成するときはtextlintを使って文書校正をしている。&lt;br&gt;&#xA;&lt;code&gt;@&amp;lt;tt&amp;gt;{git commit --amend}&lt;/code&gt;のような等幅設定をしている中で、&lt;code&gt;git =&amp;gt; Git (prh)&lt;/code&gt;というような警告を受けたくないときに行なう設定をまとめる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] ghq handbookを読んでghqコマンドに再入門する</title>
      <link>https://budougumi0617.github.io/2020/01/11/review-ghq-handbook/</link>
      <pubDate>Sat, 11 Jan 2020 21:31:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/01/11/review-ghq-handbook/</guid>
      <description>&lt;p&gt;ローカルでソースコードを効率よく管理するためのツールとして、&lt;code&gt;ghq&lt;/code&gt;コマンドがある。&lt;br&gt;&#xA;その&lt;code&gt;ghq&lt;/code&gt;コマンドの使い方をメンテナの&#xA;&lt;a href=&#34;https://twitter.com/songmu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@songmu&lt;/a&gt;さんが執筆したghq handbookを読んだので感想をまとめる。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;http://leanpub.com/ghq-handbook&#34; data-iframely-url=&#34;//cdn.iframe.ly/hPd1pAJ&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[Python3.8] TypedDictとPyCharmを使うと型ヒントの圧倒的な恩恵を享受できる</title>
      <link>https://budougumi0617.github.io/2019/12/30/introduction-typeddict/</link>
      <pubDate>Mon, 30 Dec 2019 11:01:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/12/30/introduction-typeddict/</guid>
      <description>&lt;p&gt;業務でも趣味でもPythonを書くときはPython3.8を使っている。&lt;br&gt;&#xA;Python3.8から使える&lt;code&gt;TypedDict&lt;/code&gt;とPyCharmを組合わせた開発体験が素晴らしいので紹介する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PhpStorm上でPHP_CodeSnifferのCoding Standardが見つからず、静的解析ができない</title>
      <link>https://budougumi0617.github.io/2019/12/29/fail-setting-php-code-sniffer-on-phpstorm/</link>
      <pubDate>Sun, 29 Dec 2019 15:28:44 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/12/29/fail-setting-php-code-sniffer-on-phpstorm/</guid>
      <description>&lt;p&gt;PhpStormで静的解析を利用しようとしてプロジェクトを新しく設定するたびにハマっているのでメモしておく。&lt;br&gt;&#xA;Dockerを利用してPHP_CodeSnifferを使った静的解析をPhpStormで利用するときの設定がうまくいかなった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2019年振り返り</title>
      <link>https://budougumi0617.github.io/2019/12/22/retrospective-2019/</link>
      <pubDate>Sun, 22 Dec 2019 16:42:47 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/12/22/retrospective-2019/</guid>
      <description>&lt;p&gt;2019年を振り返ってみる。GitHubベースの振り返りは別記事にまとめた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2019/12/14/retrospective-on-github-2019/&#34;&gt;2019年振り返り(GitHub編)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;この記事はwrite-blog-every-week Advent Calendar 2019の17日目の記事となる。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://adventar.org/calendars/3945&#34; data-iframely-url=&#34;//cdn.iframe.ly/b2dtHFs&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>2019年振り返り(GitHub編)</title>
      <link>https://budougumi0617.github.io/2019/12/14/retrospective-on-github-2019/</link>
      <pubDate>Sat, 14 Dec 2019 08:49:49 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/12/14/retrospective-on-github-2019/</guid>
      <description>&lt;p&gt;この記事は、&#xA;&lt;a href=&#34;https://adventar.org/calendars/3945&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;write-blog-every-week Advent Calendar 2019&lt;/a&gt;の14日目の記事になる。&lt;br&gt;&#xA;昨日は&#xA;&lt;a href=&#34;https://twitter.com/kdnakt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kdnakt&lt;/a&gt;さんで「&#xA;&lt;a href=&#34;http://kdnakt.hatenablog.com/entry/2019/12/13/233000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019年のブログをさっくり振り返る&lt;/a&gt;」だった。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://adventar.org/calendars/3945&#34; data-iframely-url=&#34;//cdn.iframe.ly/b2dtHFs&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;今年も1年の振り返りを行なうにあたり、GitHubの活動を振り返ってみた。</description>
    </item>
    <item>
      <title>OWASP/Go-SCPを読んでセキュアプログラミングとGoを学ぶ</title>
      <link>https://budougumi0617.github.io/2019/12/04/introduce_go-scp/</link>
      <pubDate>Wed, 04 Dec 2019 05:36:09 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/12/04/introduce_go-scp/</guid>
      <description>&lt;p&gt;この記事は&#xA;&lt;a href=&#34;https://qiita.com/advent-calendar/2019/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Advent Calendar 2019&lt;/a&gt;の4日目の記事になる。&lt;br&gt;&#xA;3日目は&#xA;&lt;a href=&#34;https://twitter.com/ikawaha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ikawaha&lt;/a&gt;さんの「&#xA;&lt;a href=&#34;https://qiita.com/ikawaha/items/e0c2b3ed0fedb12f4847&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Goa v3 のテストをシュッとする&lt;/a&gt;]」だった。&lt;/p&gt;&#xA;&lt;p&gt;本記事ではOpen Web Application Security Project（OWASP)が公開している&lt;code&gt;Go-SCP&lt;/code&gt;リポジトリを紹介する。&lt;br&gt;&#xA;Webアプリケーションには&#xA;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;クロスサイトスクリプティング（XSS）&lt;/a&gt;や&#xA;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%AA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;クロスサイトリクエストフォージェリ（CSRF）&lt;/a&gt;など、様々な脆弱性が潜む可能性がある。&#xA;脆弱性対策の書籍としては、&#xA;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07DVY4H3M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;体系的に学ぶ 安全なWebアプリケーションの作り方（徳丸本）&lt;/a&gt;などが有名だろう。&lt;br&gt;&#xA;&lt;code&gt;Go-SCP&lt;/code&gt;リポジトリにはWebアプリケーションを実装する際に必要な脆弱性の知識と、Goを使った脆弱性対策の実装方法が含まれている。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/OWASP/Go-SCP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/OWASP/Go-SCP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[書評] 気づけばプロ並みPHP改訂版を読んでPHPに入門した</title>
      <link>https://budougumi0617.github.io/2019/11/25/review_pronami_php/</link>
      <pubDate>Mon, 25 Nov 2019 06:10:08 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/25/review_pronami_php/</guid>
      <description>&lt;p&gt;「気づけばプロ並みPHP 改訂版&amp;ndash;ゼロから作れる人になる!」を読んでPHPの勉強を始めた。&lt;br&gt;&#xA;ECサイトの基本的な機能を実装しながら一通り読み終わったので感想を書く。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4865940650&amp;linkId=651b493478cd53b1c985d9c1620a9e07&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Go] &#34;vim-go: [golangci-lint] FAIL&#34;エラーが出てvim-goでgolangci-lintが動かない</title>
      <link>https://budougumi0617.github.io/2019/11/18/resolve-golangci-lint-setting-with-vim-go/</link>
      <pubDate>Mon, 18 Nov 2019 05:31:03 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/18/resolve-golangci-lint-setting-with-vim-go/</guid>
      <description>&lt;p&gt;公私でGoを書くときはVimを使っている。&lt;br&gt;&#xA;ファイル保存時に&lt;code&gt;golangci-lint&lt;/code&gt;を実行するように設定しているのだが、表題のエラーが出て静的解析が実行されなかったので原因調査・解決した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Release 10 Year Anniversary Party in Tokyo参加メモ</title>
      <link>https://budougumi0617.github.io/2019/11/16/goturns10-in-japan/</link>
      <pubDate>Sat, 16 Nov 2019 11:18:38 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/16/goturns10-in-japan/</guid>
      <description>&lt;p&gt;メルカリさんで行われたGoリリース10周年パーティに参加したので、遅くなったが参加メモ。&lt;br&gt;&#xA;Goは今年でOSS10周年！&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hey! Ho! Let&amp;#39;s Go! Open Sourcing the Go programming language http://bit.ly/1NxkxC &lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#golang&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/developer?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#developer&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/google?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#google&lt;/a&gt;&lt;/p&gt;&amp;mdash; Google Go Team (@golangnuts) &lt;a href=&#34;https://twitter.com/golangnuts/status/5606771876?ref_src=twsrc%5Etfw&#34;&gt;November 11, 2009&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[Go] タグなし switchは switch true {...}と等しい</title>
      <link>https://budougumi0617.github.io/2019/11/10/switch-statement-in-go/</link>
      <pubDate>Sun, 10 Nov 2019 12:50:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/10/switch-statement-in-go/</guid>
      <description>&lt;p&gt;先日のgolang.tokyoでは&lt;code&gt;switch&lt;/code&gt;文に関するDevquizが出題された。&#xA;私はわかっていたつもりで乾杯の挨拶中に解説を話したが、間違えた解説だったので改めて仕様を確認した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] GitHub Actionsでキャッシュ機能を使う #github</title>
      <link>https://budougumi0617.github.io/2019/11/03/use-cache-in-github-actions/</link>
      <pubDate>Sun, 03 Nov 2019 18:04:33 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/03/use-cache-in-github-actions/</guid>
      <description>&lt;p&gt;GitHub Actionsで待望のキャッシュ機能が使えるようになった。&lt;br&gt;&#xA;Windowsコンテナでジョブを実行していると少しハマる感じだったが、自分のGoのリポジトリのGitHub Actionsでキャッシュを使えるようになった。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/actions/cache&#34; data-iframely-url=&#34;//cdn.iframe.ly/vNWhS6o&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>Goのtestを理解する in 2019</title>
      <link>https://budougumi0617.github.io/2019/10/30/go-testing2019/</link>
      <pubDate>Wed, 30 Oct 2019 18:08:13 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/30/go-testing2019/</guid>
      <description>&lt;p&gt;昨年Go1.10時点でのGoのテストについてまとめた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018/&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まとめ記事を書いた後にリリースされたGo1.11からGo1.13に含まれるテスト関連の変更をまとめる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] レイヤードアーキテクチャの階層構造を守らないimportを警告するlinterを作った</title>
      <link>https://budougumi0617.github.io/2019/10/18/launch-layer-for-the-layered-achitectures/</link>
      <pubDate>Fri, 18 Oct 2019 14:36:56 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/18/launch-layer-for-the-layered-achitectures/</guid>
      <description>&lt;p&gt;Goでクリーンアーキテクチャ等のレイヤードアーキテクチャを実装するための静的解析ツールを作った。&lt;br&gt;&#xA;「&lt;code&gt;webhandler&lt;/code&gt;パッケージから&lt;code&gt;usecase&lt;/code&gt;パッケージを使わずに直接&lt;code&gt;domain&lt;/code&gt;パッケージを使わないで！」というような、やってほしくない&lt;code&gt;import&lt;/code&gt;をエラーにできる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/budougumi0617/layer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/budougumi0617/layer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[Go] 独自型にfmtパッケージのインターフェースを実装して出力を制御する</title>
      <link>https://budougumi0617.github.io/2019/10/12/confirm-print-with-fmt-interfaces/</link>
      <pubDate>Sat, 12 Oct 2019 15:17:06 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/12/confirm-print-with-fmt-interfaces/</guid>
      <description>&lt;p&gt;&lt;code&gt;fmt&lt;/code&gt;パッケージには&lt;code&gt;fmt.Printf&lt;/code&gt;の出力を任意に変更できるインターフェースが定義されている。&lt;br&gt;&#xA;各インターフェースを満たす独自型をフィールドに持つ構造体の出力がどうなるのか確認し、任意の型の出力を制御できるか確認してみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]imported and not usedエラー・declared and not usedエラーとの向き合いかた</title>
      <link>https://budougumi0617.github.io/2019/10/06/imported-declared-not-used-error/</link>
      <pubDate>Sun, 06 Oct 2019 11:02:11 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/06/imported-declared-not-used-error/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/05/jrits-why-go-how-is-go/&#34;&gt;先日の登壇資料&lt;/a&gt;に&#xA;&lt;a href=&#34;https://b.hatena.ne.jp/entry/4675383655814438370/comment/murishinai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ブコメでコメント&lt;/a&gt;いただいていたので私の考えを述べたいと思う。&lt;br&gt;&#xA;結論から書くと、やはり「単純さや簡潔性を保つため」が動機になるのだと思う。&lt;br&gt;&#xA;なお、このブログでは敬体は使わない方針なので、常体なのはご容赦願いたい。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;そういや &amp;ldquo;imported and not used&amp;rdquo; &amp;ldquo;declared and not used&amp;rdquo; でコンパイル通らなくなるのはどういう哲学なんだろうこれ。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>[発表資料] 第138回RITS技術交流会『なぜ私たちはGoを書くのか。今あらためて考えるGo言語の良さと実際』</title>
      <link>https://budougumi0617.github.io/2019/10/05/jrits-why-go-how-is-go/</link>
      <pubDate>Sat, 05 Oct 2019 09:28:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/05/jrits-why-go-how-is-go/</guid>
      <description>&lt;p&gt;前職主催の勉強会でGoがどんな言語が発表した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[dkl] 実行中のDocker ContainerやKubernetes Podを一覧して選択、アタッチするツールを作った</title>
      <link>https://budougumi0617.github.io/2019/09/28/release-dkl/</link>
      <pubDate>Sat, 28 Sep 2019 18:05:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/28/release-dkl/</guid>
      <description>&lt;p&gt;同僚がPythonで作ったOSSをGoに移植してみた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dkl -h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage of dkl:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -d -docker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list docker containers and &lt;span style=&#34;color:#b58900&#34;&gt;exec&lt;/span&gt; selected container.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -k -kubernetes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list pods and &lt;span style=&#34;color:#b58900&#34;&gt;exec&lt;/span&gt; selected pod.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -v  -version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print version information and quit.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>go mod tidyするとmodule ... found, but does not contain package ...エラーで失敗する</title>
      <link>https://budougumi0617.github.io/2019/09/20/fix-go-mod-tidy-does-not-contain-package/</link>
      <pubDate>Fri, 20 Sep 2019 08:35:57 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/20/fix-go-mod-tidy-does-not-contain-package/</guid>
      <description>&lt;p&gt;&lt;code&gt;go mod tidy&lt;/code&gt;が次のようなのエラーで失敗するとき、エラーを解決するメモ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go mod tidy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;github.com/budougumi0617/til/go/tui/promptui imports&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        github.com/manifoldco/promptui imports&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        github.com/alecthomas/gometalinter imports&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gopkg.in/alecthomas/kingpin.v3-unstable imports&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        github.com/nicksnyder/go-i18n/i18n: module github.com/nicksnyder/go-i18n@latest &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;v2.0.2+incompatible&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; found, but does not contain package github.com/nicksnyder/go-i18n/i18n&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>golang.tokyoの技術書典7新刊「Gopherの休日2019秋」に寄稿しました #技術書典</title>
      <link>https://budougumi0617.github.io/2019/09/15/shoten7-golangtokyo/</link>
      <pubDate>Sun, 15 Sep 2019 13:04:11 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/15/shoten7-golangtokyo/</guid>
      <description>&lt;p&gt;2019/09/22に行われる技術書典7へ、golang.tokyoも参加します。&lt;br&gt;&#xA;私は、今回の新刊である「Gopherの休日2019秋」に「準標準パッケージ（&lt;code&gt;golang.org/x&lt;/code&gt;）の早めぐり」という内容で寄稿しました。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf07/circle/5174941137764352&#34; data-iframely-url=&#34;//cdn.iframe.ly/yAYopWf&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>Go本体の開発進捗を確認できるGo Development Dashboard</title>
      <link>https://budougumi0617.github.io/2019/09/08/introduction-dev-golang-org/</link>
      <pubDate>Sun, 08 Sep 2019 10:31:15 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/08/introduction-dev-golang-org/</guid>
      <description>&lt;p&gt;Goの開発状況を確認する&lt;code&gt;Go Development Dashboard&lt;/code&gt;を見つけたのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] gofmtコマンドの-rオプションの使い方</title>
      <link>https://budougumi0617.github.io/2019/09/01/gofmt-rewrite-option/</link>
      <pubDate>Sun, 01 Sep 2019 14:15:42 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/01/gofmt-rewrite-option/</guid>
      <description>&lt;p&gt;Goでは標準ツールとして公式から&lt;code&gt;gofmt&lt;/code&gt;コマンドというフォーマッタが提供されている。&lt;br&gt;&#xA;このコマンドはコードのインデントなどをフォーマットしてくれるほかに、&lt;code&gt;-r&lt;/code&gt;オプションでASTベースの置換も行える。&lt;br&gt;&#xA;実装ベースから使い方を追ってみたのでメモする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新しいMacに開発環境を構築（移行）したときに行なうこと</title>
      <link>https://budougumi0617.github.io/2019/08/18/environmental-construction/</link>
      <pubDate>Sun, 18 Aug 2019 07:31:53 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/08/18/environmental-construction/</guid>
      <description>&lt;p&gt;最近開発用のMacの入れ替えを行なったので、新しいPCを使うときに行なう環境構築のメモ。&#xA;ブログ記事を書くときは一般的な内容になるよう心がけているが、今回は自分用のメモになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] 構造体オブジェクト初期化時にフィールド名を指定することを強制する #golangjp</title>
      <link>https://budougumi0617.github.io/2019/08/17/must-use-key-in-struct-initialize/</link>
      <pubDate>Sat, 17 Aug 2019 08:53:45 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/08/17/must-use-key-in-struct-initialize/</guid>
      <description>&lt;p&gt;静的解析に頼らず、コンパイル時に構造体オブジェクトの初期化でフィールド名の指定を強制するためのTips。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Helm] 配列の要素数だけリソースを繰り返し定義する</title>
      <link>https://budougumi0617.github.io/2019/08/11/repeated-definition-in-helm/</link>
      <pubDate>Sun, 11 Aug 2019 19:17:22 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/08/11/repeated-definition-in-helm/</guid>
      <description>&lt;p&gt;Kubernetes(k8s)のパッケージマネージャとしてHelmが存在する。&lt;br&gt;&#xA;今回はHelmで独自のChartを作るときに配列の要素数だけリソースを繰り返し定義するようにしてみたのでその方法をまとめておく。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://helm.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://helm.sh/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[書評] 改訂2版 みんなのGo言語はGo言語入門者にも初版所有者にもオススメな1冊</title>
      <link>https://budougumi0617.github.io/2019/08/04/review-mingo2/</link>
      <pubDate>Sun, 04 Aug 2019 15:22:15 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/08/04/review-mingo2/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://twitter.com/tenntenn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tenntenn&lt;/a&gt;さんに献本していただいたので、改訂版2版みんなのGo言語（通称みんGo）の感想をまとめる。&lt;br&gt;&#xA;なお、私は初版も持っているので、「前の持っているしどうしよう？」という方向けに初版との比較も記載する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/08/04_mingo.jpg&#34; alt=&#34;表紙画像&#34;&gt;&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07VPSXF6N&amp;linkId=eeb24badc64c61fb48808b960c329c80&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>[Go moudles] module名がgithub.com/account/repo/vXとなっているリポジトリの古いバージョンを使う #golangjp</title>
      <link>https://budougumi0617.github.io/2019/07/18/use-old-version-by-modules/</link>
      <pubDate>Thu, 18 Jul 2019 17:56:51 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/07/18/use-old-version-by-modules/</guid>
      <description>&lt;p&gt;Go Modulesの使い方をざっくり調べたのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料] GoCon Fukuokaでgoogle/wireを使った Goらしいアーキテクチャへの取り組みを発表した #gocon</title>
      <link>https://budougumi0617.github.io/2019/07/15/gocon2019summer/</link>
      <pubDate>Mon, 15 Jul 2019 17:33:07 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/07/15/gocon2019summer/</guid>
      <description>&lt;p&gt;GoCon &amp;lsquo;19 Summer in Fukuokaで登壇してきたので感想と参考資料などをまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]Sliceを含んだ構造体が等値演算子（==）でpanicを引き起こすのを回避する #golang</title>
      <link>https://budougumi0617.github.io/2019/07/07/prevent-runtime-error-by-pointer/</link>
      <pubDate>Sun, 07 Jul 2019 09:00:50 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/07/07/prevent-runtime-error-by-pointer/</guid>
      <description>&lt;p&gt;Goには&lt;code&gt;comparable&lt;/code&gt;が定義されておらず、比較できない型として&lt;code&gt;Slice&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;などがある。&lt;br&gt;&#xA;&lt;code&gt;interface&lt;/code&gt;がそのような型（フィールドにそのような型を持った構造体）を値に持っていたときに&lt;code&gt;==&lt;/code&gt;を利用すると&lt;code&gt;panic&lt;/code&gt;が発生する可能性がある。&lt;br&gt;&#xA;行儀の悪い構造体を定義しないテクニックがあったのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] UNIXという考え方―その設計思想と哲学 を読んで「単純さ」の大切さを改めて学んだ</title>
      <link>https://budougumi0617.github.io/2019/06/30/review-the-unix-philosophy/</link>
      <pubDate>Sun, 30 Jun 2019 20:35:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/30/review-the-unix-philosophy/</guid>
      <description>&lt;p&gt;「UNIXという考え方―その設計思想と哲学」を読んだのでその感想をまとめる。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4274064069&amp;linkId=395b62f54cc9dfae0b7fe848d5eb0914&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>textlint/reviewdogで文書校正エラーをGitHubのプルリクエストにコメントする 2019年6月版</title>
      <link>https://budougumi0617.github.io/2019/06/22/textlint-with-reviewdog-for-review/</link>
      <pubDate>Sat, 22 Jun 2019 11:03:47 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/22/textlint-with-reviewdog-for-review/</guid>
      <description>&lt;p&gt;技術書典7に向けて、執筆用のRe:VIEWのリポジトリの準備を始めた。&lt;br&gt;&#xA;今回はCircleCIを使って文書校正を行なう設定を行なった。&lt;br&gt;&#xA;検索して出てくる情報は古い情報が多かったので2019年6月時点の設定方法をまとめる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料] 今改めて読み直したい Go基礎情報 その1 #golangtokyo</title>
      <link>https://budougumi0617.github.io/2019/06/20/golangtokyo25-read-again-awesome-go-article/</link>
      <pubDate>Thu, 20 Jun 2019 07:02:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/20/golangtokyo25-read-again-awesome-go-article/</guid>
      <description>&lt;p&gt;golang.tokyo #25で過去の優良情報を振り返る発表を行なった。&lt;br&gt;&#xA;この記事は発表で使った資料と口頭で話したことの要約をまとめておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoのLanguage Specificationの特定の仕様に関わる処理系の実装を探す #golang</title>
      <link>https://budougumi0617.github.io/2019/06/13/explore-go-specification-and-implementation/</link>
      <pubDate>Thu, 13 Jun 2019 08:10:59 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/13/explore-go-specification-and-implementation/</guid>
      <description>&lt;p&gt;Goの仕様はこのHTML1ページにまとまっている。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The Go Programming Language Specification&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://golang.org/ref/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://golang.org/ref/spec&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;仕様に書いてある処理はどうやって実装されているのか調べたかった。&lt;br&gt;&#xA;Goの仕様の1文からその仕様に関係する処理系のコードを探す方法をメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DynamoDBを操作するコードをamazon/dynamodb-localコンテナとCircleCIを使ってCIする #aws</title>
      <link>https://budougumi0617.github.io/2019/06/02/use-dynamodb-local-on-circleci/</link>
      <pubDate>Sun, 02 Jun 2019 18:07:58 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/02/use-dynamodb-local-on-circleci/</guid>
      <description>&lt;p&gt;DynamoDBを操作するコードをCircleCI上でテストする方法をまとめた。&lt;br&gt;&#xA;dynamodb-localをCircleCI上で起動することで、実際にDBアクセスする状態でテストが実行できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] プリミティブ型の配列・スライスを出力するときはその型のverbが使える #golangjp</title>
      <link>https://budougumi0617.github.io/2019/05/26/print-array-and-slice-with-verbs/</link>
      <pubDate>Sun, 26 May 2019 20:32:20 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/05/26/print-array-and-slice-with-verbs/</guid>
      <description>&lt;p&gt;柴田さん(&#xA;&lt;a href=&#34;https://twitter.com/yoshiki_shibata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@yoshiki_shibata&lt;/a&gt;)に&lt;code&gt;fmt.Printf&lt;/code&gt;について教えてもらったのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[補足資料] Go Conference 2019 Springでdatabase/sql入門を発表した #gocon</title>
      <link>https://budougumi0617.github.io/2019/05/19/gocon2019spring/</link>
      <pubDate>Sun, 19 May 2019 13:01:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/05/19/gocon2019spring/</guid>
      <description>&lt;p&gt;Go Conference(GoCon)で「database/sql入門」というタイトルで発表してきた。&#xA;この記事は資料中のリンクや、口頭で説明した内容の補足資料となる。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://gocon.connpass.com/event/124530/&#34; data-iframely-url=&#34;//cdn.iframe.ly/NRErGxT?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>15日間勉強してAWS ソリューションアーキテクト アソシエイト試験に合格した</title>
      <link>https://budougumi0617.github.io/2019/05/12/pass-aws-solution-architect-associate/</link>
      <pubDate>Sun, 12 May 2019 08:30:20 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/05/12/pass-aws-solution-architect-associate/</guid>
      <description>&lt;p&gt;GWに勉強して、AWS ソリューションアーキテクト試験に合格したのでまとめる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/05/12_saa.png&#34; alt=&#34;スコア&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>正規表現の文字クラス（角括弧[]）にハイフンを含みたいときは、ハイフンを最初または最後に書く</title>
      <link>https://budougumi0617.github.io/2019/05/04/use-hyphens-in-regular-expression-name-classes/</link>
      <pubDate>Sat, 04 May 2019 07:41:57 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/05/04/use-hyphens-in-regular-expression-name-classes/</guid>
      <description>&lt;p&gt;正規表現をいじっていたらハマったのでメモ。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4873113598&amp;linkId=59ba8fe3cd580af67049dcacf9c16e40&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>ory/fositeから読み解くGoにおけるStrategy/FactoryMethodパターン</title>
      <link>https://budougumi0617.github.io/2019/04/28/study-design-pattern-from-ory-fosite/</link>
      <pubDate>Sun, 28 Apr 2019 17:05:19 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/04/28/study-design-pattern-from-ory-fosite/</guid>
      <description>&lt;p&gt;&lt;code&gt;ory/fosite&lt;/code&gt;というGoのSDKの中でいくつかのデザインパターンが利用されていたので、それを読み解いてみる。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/ory/fosite&#34; data-iframely-url=&#34;//cdn.iframe.ly/rg9NVGS&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>[Go] CicleCI2.1でgo modのデータを共有しながら複数ジョブを実行する</title>
      <link>https://budougumi0617.github.io/2019/04/21/ci_go_with_multiple_jobs_on_circleci/</link>
      <pubDate>Sun, 21 Apr 2019 15:31:49 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/04/21/ci_go_with_multiple_jobs_on_circleci/</guid>
      <description>&lt;p&gt;GitHub上のGoのリポジトリに対して継続的インテグレーション(CI)を行なう場合、CircleCIやTravisCIを使うのが一般的だろう。&lt;br&gt;&#xA;CicrcleCI2.1でGo Modulesを使いながらマルチJobを定義したWorkflowを定義する。&lt;br&gt;&#xA;&lt;code&gt;attach_workspace&lt;/code&gt;を使ってジョブ間のデータ共有をするのにひと手間必要だった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang.tokyoの技術書典6新刊「文Go」に「Goにおけるデータベース実践入門を寄稿しました。 #技術書典</title>
      <link>https://budougumi0617.github.io/2019/04/11/shoten6/</link>
      <pubDate>Thu, 11 Apr 2019 18:58:21 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/04/11/shoten6/</guid>
      <description>&lt;p&gt;2019/04/16に行われる&#xA;&lt;a href=&#34;https://techbookfest.org/event/tbf06&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技術書典6&lt;/a&gt;へ、golang.tokyoも参加します。&lt;br&gt;&#xA;私は、今回の新刊である「文Go」に「Goにおけるデータベース実践入門」という内容で寄稿しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/04/11_bungo_s.png&#34; alt=&#34;表紙&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf06/circle/63860004&#34; data-iframely-url=&#34;//cdn.iframe.ly/DxmrlWl&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>@kakakakakkuさんのブログメンティーを卒業した（2回目）  #ブログメンタリング</title>
      <link>https://budougumi0617.github.io/2019/04/02/graduate-blog-mentoring-by-kakakakakku2/</link>
      <pubDate>Tue, 02 Apr 2019 13:46:02 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/04/02/graduate-blog-mentoring-by-kakakakakku2/</guid>
      <description>&lt;p&gt;1月から3月まで&#xA;&lt;a href=&#34;https://twitter.com/kakakakakku&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kakakakakku&lt;/a&gt;さんのブログメンタリングを受けていた。&lt;br&gt;&#xA;私は昨年の4月から6月までも1回メンタリングしてもらっていたので、この記事はブログメンタリング2回目の振り返りとなる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] MySQLからScanしたときunsupported Scan, storing driver.Value type []uint8 into type *time.Timeと出てパースに失敗する</title>
      <link>https://budougumi0617.github.io/2019/03/31/go_db_unsupported_scan_storing_driver_value_type_uint8_into_type_time_time/</link>
      <pubDate>Sun, 31 Mar 2019 08:35:30 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/31/go_db_unsupported_scan_storing_driver_value_type_uint8_into_type_time_time/</guid>
      <description>&lt;p&gt;GoでDBを操作するコードを書いている。&lt;code&gt;jmoiron/sqlx&lt;/code&gt;パッケージを使ってMySQLサーバ内のDBをを操作しようとして表題のエラーに遭遇した。&lt;br&gt;&#xA;MySQLサーバとの接続パラメータを変えることでうまくいったので解決方法をメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>claatを使ってCodelabs形式のオリジナルハンズオンを作る</title>
      <link>https://budougumi0617.github.io/2019/03/27/create-codelab-page-by-claat/</link>
      <pubDate>Wed, 27 Mar 2019 17:24:43 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/27/create-codelab-page-by-claat/</guid>
      <description>&lt;p&gt;先日golang.tokyoのコンテンツとしてハンズオン資料を作成した。&lt;br&gt;&#xA;claatというツールを使うと、Google Docに書くだけでGoogle Codelabsと同じ体裁のコンテンツが作成できるので紹介する。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/claat-sample&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://budougumi0617.github.io/claat-sample&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/03/27_codelab.png&#34; alt=&#34;My Codelab&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>go/typesパッケージを使って型チェックを行なうハンズオンを作った #golangtokyo</title>
      <link>https://budougumi0617.github.io/2019/03/24/go-create-type-check-handson/</link>
      <pubDate>Sun, 24 Mar 2019 19:04:50 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/24/go-create-type-check-handson/</guid>
      <description>&lt;p&gt;golang.tokyoで静的解析ハンズオンを行なうにあたり、ハンズオン資料を作成した。&lt;br&gt;&#xA;ハンズオン作成時の際参考にした資料や、作る時に工夫した点をまとめておく。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;型チェックでインターフェースを実装しているか調べよう&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://golangtokyo.github.io/codelab/first-step-type-check/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://golangtokyo.github.io/codelab/first-step-type-check/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>クエリの練習用に20以上のテーブルと大量データを事前投入したMySQLイメージをDocker Hubで公開する</title>
      <link>https://budougumi0617.github.io/2019/03/20/publish-docker-image-for-sql-training/</link>
      <pubDate>Wed, 20 Mar 2019 19:43:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/20/publish-docker-image-for-sql-training/</guid>
      <description>&lt;p&gt;以前にDockerを使って使い捨てのMySQLを起動する方法を紹介した。今回はMySQL公式のプリセットデータを使ったMySQLコンテナを作成する。&#xA;また、ローカルから簡単に操作するMakefileも作成した。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;budougumi0617/mysql-sakila&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://cloud.docker.com/repository/docker/budougumi0617/mysql-sakila&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.docker.com/repository/docker/budougumi0617/mysql-sakila&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/budougumi0617/til/blob/master/sql/Makefile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/budougumi0617/til/blob/master/sql/Makefile&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[Go] selectのcase文中でch &lt;- &lt;- chやch &lt;- f()をしない方が良い #golangjp #横浜go読書会</title>
      <link>https://budougumi0617.github.io/2019/03/15/go-strange-result-in-select/</link>
      <pubDate>Fri, 15 Mar 2019 19:41:58 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/15/go-strange-result-in-select/</guid>
      <description>&lt;p&gt;簡潔にまとめられなかったので式表現をそのままタイトルに書いてしまったが、分かっていないとエンバグしそうな挙動を見つけたのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go][gomock]引数によって挙動を変えるモックメソッドを定義する #golangjp</title>
      <link>https://budougumi0617.github.io/2019/03/10/define-gomock-method-by-doandreturn/</link>
      <pubDate>Sun, 10 Mar 2019 12:53:08 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/10/define-gomock-method-by-doandreturn/</guid>
      <description>&lt;p&gt;Goのテストでモックを使う場合、大抵の場合はgomockを使うと思う。&lt;br&gt;&#xA;gomockでモックメソッドの挙動を宣言するときのTipsをメモしておく。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/golang/mock/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/golang/mock/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://godoc.org/github.com/golang/mock/gomock&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://godoc.org/github.com/golang/mock/gomock&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[書評] アウトプット大全 を一ヶ月試してみて毎日のアウトプット力が着実に向上し始めた</title>
      <link>https://budougumi0617.github.io/2019/03/03/review-output-encyclopedia/</link>
      <pubDate>Sun, 03 Mar 2019 08:32:31 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/03/review-output-encyclopedia/</guid>
      <description>&lt;p&gt;アウトプット大全を読み、一ヶ月試してみた感想を書いておく。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07FZWZPDS&amp;linkId=5291ca5f13307ec3fe795ebfff271794&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>GoでJSONのUnmarshalがシンタックスエラーで失敗した時、エラー周辺の文字列を表示する</title>
      <link>https://budougumi0617.github.io/2019/02/24/go-print-detail-of-json-syntax-error/</link>
      <pubDate>Sun, 24 Feb 2019 21:08:31 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/24/go-print-detail-of-json-syntax-error/</guid>
      <description>&lt;p&gt;&lt;code&gt;json.Unmarshal&lt;/code&gt;に失敗したとき&lt;code&gt;json.SyntaxError&lt;/code&gt;が取得できた場合は文字列の中のどの位置でパースに失敗したのか知ることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Modulesの概要とGo1.12に含まれるModulesに関する変更 #golangjp #go112party</title>
      <link>https://budougumi0617.github.io/2019/02/15/go-modules-on-go112/</link>
      <pubDate>Fri, 15 Feb 2019 10:43:23 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/15/go-modules-on-go112/</guid>
      <description>&lt;p&gt;今更ながらGo Modulesについて簡単にまとめた。&#xA;そして今月(2019年2月)にリリースされる予定のGo1.12に含まれるGo Modules関連の仕様変更について調べた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]未リリース版のGoの仕様や実際の動きを確認する #golangjp</title>
      <link>https://budougumi0617.github.io/2019/02/14/investigate-go-unreleased-version/</link>
      <pubDate>Thu, 14 Feb 2019 07:51:53 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/14/investigate-go-unreleased-version/</guid>
      <description>&lt;p&gt;未リリース版のGo仕様や実際の動きを確認する。&#xA;今回は2019/02/14現在未リリースのGo1.12の仕様を確認した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]スライス生成時(slice operator)に使える珍しい宣言方法 #golangjp</title>
      <link>https://budougumi0617.github.io/2019/02/08/go-slice-operator/</link>
      <pubDate>Fri, 08 Feb 2019 07:24:25 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/08/go-slice-operator/</guid>
      <description>&lt;p&gt;Goにおけるスライス演算子(&lt;em&gt;slice operator&lt;/em&gt;)を改めて調べ直し、3-INDEX記法などを学んだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang.org/x/tools/go/analysisでLinterツールを自作する #gounco #golang</title>
      <link>https://budougumi0617.github.io/2019/02/01/how-to-use-analisys-package/</link>
      <pubDate>Fri, 01 Feb 2019 08:48:38 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/01/how-to-use-analisys-package/</guid>
      <description>&lt;p&gt;この記事ではGo(Un)Conferenceで発表したGoにおけるLinterツールの作成方法をまとめる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go(Un)Conference（Goあんこ）LT大会 5kg&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://gounconference.connpass.com/event/112942/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gounconference.connpass.com/event/112942/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;golang.org/x/tools/go/analysisで静的解析ツールを自作する #gounco&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/budougumi0617/how-to-create-the-static-analysis-tool-for-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/budougumi0617/how-to-create-the-static-analysis-tool-for-go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>GoogleスプレットシートでWebサイトのKPIを集計するためのOSSを作った #blog #gas</title>
      <link>https://budougumi0617.github.io/2019/01/26/publish-blog-kpi-collector/</link>
      <pubDate>Sat, 26 Jan 2019 08:01:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/26/publish-blog-kpi-collector/</guid>
      <description>&lt;p&gt;Webサイト（ブログ）のKPIを集計するGoogle Apps Script(GAS)をシュッと作成するスターターキットのOSSを作った。&#xA;一通りの設定をすると、Googleスプレットシートに各情報が書き込まれる。GASのトリガー機能で定期実行すれば、定期的にKPIを自動集計できる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/01/26-results.png&#34; alt=&#34;集計イメージ&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;2019/01/26現在対応している項目は以下。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Google Analyticsの週間PV数&lt;/li&gt;&#xA;&lt;li&gt;Google Analyticsの週間直帰率&lt;/li&gt;&#xA;&lt;li&gt;はてなブックマークの総数&lt;/li&gt;&#xA;&lt;li&gt;はてなブログの読者数&lt;/li&gt;&#xA;&lt;li&gt;Twitterのフォロワー数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 168px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/blog-kpi-collector&#34; data-iframely-url=&#34;//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Fgithub.com%2Fbudougumi0617%2Fblog-kpi-collector%2F&amp;amp;key=bc7b75ad5adf2dc500d4b0dee9f92949&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>HugoブログにUser Heatを設置してヒートマップ分析をする</title>
      <link>https://budougumi0617.github.io/2019/01/21/use-heatmap-by-userheat/</link>
      <pubDate>Mon, 21 Jan 2019 06:21:39 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/21/use-heatmap-by-userheat/</guid>
      <description>&lt;p&gt;User Heatという無料サービスを使ってブログのヒートマップを導入してみた。&#xA;ヒートマップ分析を使うことで記事のどこに注目が集まっているかなどを分析することができる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;User Heat&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://userheat.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://userheat.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/01/21-heatmap.png&#34; alt=&#34;熟読エリア&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>BetaリリースされたGoのGoogle Cloud Functionsを試す #gcp #golangjp</title>
      <link>https://budougumi0617.github.io/2019/01/17/try-go-on-google-cloud-functions/</link>
      <pubDate>Thu, 17 Jan 2019 10:21:04 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/17/try-go-on-google-cloud-functions/</guid>
      <description>&lt;p&gt;Google Cloud FunctionsでついにGoがサポートされた（まだベータリリースだが）。&lt;br&gt;&#xA;さっそくさわってみたメモ。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 168px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/application-development/cloud-functions-go-1-11-is-now-a-supported-language/&#34; data-iframely-url=&#34;//cdn.iframe.ly/mGNAEkA&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>Google Apps ScriptをTypeScriptで実装する(clasp/TSLint/Prettier) #gas #typescript</title>
      <link>https://budougumi0617.github.io/2019/01/16/develop-google-apps-script-by-typescript/</link>
      <pubDate>Wed, 16 Jan 2019 00:57:55 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/16/develop-google-apps-script-by-typescript/</guid>
      <description>&lt;p&gt;claspというGoogle Apps Script(GAS)をローカルで開発するためのツールがある。claspを使うと、TypeScriptを使ったGASのコーディングも標準で行える。&#xA;今回はclaspを使って以下の要求を満たしながらGASの開発を行う際の設定をまとめる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TypeScriptによる実装&lt;/li&gt;&#xA;&lt;li&gt;Gitによる構成管理&lt;/li&gt;&#xA;&lt;li&gt;Prettierによる自動フォーマット&lt;/li&gt;&#xA;&lt;li&gt;TSLintによる静的解析&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/01/16-vscode.png&#34; alt=&#34;VSCodeでの実装画面&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub Actionsで特定のブランチのときのみワークフローを実行する #github #actions #ci</title>
      <link>https://budougumi0617.github.io/2019/01/11/filter-branch-in-github-actions/</link>
      <pubDate>Fri, 11 Jan 2019 07:17:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/11/filter-branch-in-github-actions/</guid>
      <description>&lt;p&gt;2019/01現在Public BataのGitHub ActionsでCircleCIの&lt;code&gt;branches only&lt;/code&gt;相当の処理を出来ないか調査した。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GitHub Actions&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/features/actions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/features/actions/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/01/11-failed.png&#34; alt=&#34;Failed&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTPSで公開しているHugoで一部のページがHTTPでページ遷移してしまう #hugo</title>
      <link>https://budougumi0617.github.io/2019/01/06/redirect-by-http-on-hugo/</link>
      <pubDate>Sun, 06 Jan 2019 17:14:48 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/06/redirect-by-http-on-hugo/</guid>
      <description>&lt;p&gt;Hugoで公開しているこのブログのサイドバーのリンクの一部をクリックすると、HTTPSで公開しているはずがHTTP通信となって遷移していた。&lt;br&gt;&#xA;HTTPS通信でページ遷移するように直したときのメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HugoでOGP(Facebook用のアイキャッチ画像)を設定する #hugo</title>
      <link>https://budougumi0617.github.io/2019/01/05/set-ogp-in-hugo-blog/</link>
      <pubDate>Sat, 05 Jan 2019 09:42:44 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/05/set-ogp-in-hugo-blog/</guid>
      <description>&lt;p&gt;Hugoで各記事にThe Open Graph protocol(OGP)を設定したときのメモ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The Open Graph protocol&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;http://ogp.me/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://ogp.me/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/01/05-ogp.png&#34; alt=&#34;ogp&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugoのブログ記事にTwitter Card(アイキャッチ画像)を設定する #hugo</title>
      <link>https://budougumi0617.github.io/2019/01/04/set-twitter-image-in-hugo-blog/</link>
      <pubDate>Fri, 04 Jan 2019 11:36:40 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/04/set-twitter-image-in-hugo-blog/</guid>
      <description>&lt;p&gt;HugoでTwitter Card（アイキャッチ画像）を設定したときのメモ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/01/04-twitter-image.png&#34; alt=&#34;card validator&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018年振り返り</title>
      <link>https://budougumi0617.github.io/2018/12/27/retrospective-2018/</link>
      <pubDate>Thu, 27 Dec 2018 07:34:49 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/27/retrospective-2018/</guid>
      <description>&lt;p&gt;2018年を振り返ってみる。GitHubベースの振り返りは別記事にまとめた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2018/12/27_nobuse.jpg&#34; alt=&#34;冬に登った野伏ヶ岳&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/12/15/retrospective-on-github/&#34;&gt;2018年振り返り(GitHub編)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>golang.tokyo #20 忘年LT大会！！ 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/12/19/report-golangtokyo-20/</link>
      <pubDate>Wed, 19 Dec 2018 11:12:16 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/19/report-golangtokyo-20/</guid>
      <description>&lt;p&gt;golang.tokyo #20に参加してきたのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018年振り返り(GitHub編)</title>
      <link>https://budougumi0617.github.io/2018/12/15/retrospective-on-github/</link>
      <pubDate>Sat, 15 Dec 2018 19:54:15 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/15/retrospective-on-github/</guid>
      <description>&lt;p&gt;この記事は、&#xA;&lt;a href=&#34;https://adventar.org/calendars/2925&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;write-blog-every-week Advent Calendar 2018&lt;/a&gt;の15日目の記事。&lt;br&gt;&#xA;「毎週ブログを書く」では無いが「毎日GitHubにコミットする」ということを続けている。今年も１年の振り返りを行なうにあたり、GitHubの活動を振り返ってみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>google/wireを使ったDIとDI関数のシグネチャについて #go</title>
      <link>https://budougumi0617.github.io/2018/12/14/how-to-use-google-wire/</link>
      <pubDate>Fri, 14 Dec 2018 09:25:57 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/14/how-to-use-google-wire/</guid>
      <description>&lt;p&gt;これは&#xA;&lt;a href=&#34;https://qiita.com/advent-calendar/2018/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Advent Calendar 2018&lt;/a&gt;の14日目の記事となる。&lt;br&gt;&#xA;この記事ではGoogleが提供するGoのDependency Injection(DI、依存性の注入)ツールであるWireを使ったDIの概要と、Wireで利用可能なDI関数の戻り値シグネチャのパターンを紹介する。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;github.com/google/wire&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/google/wire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/google/wire&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Compile-time Dependency Injection With Go Cloud&amp;rsquo;s Wire | The Go blog&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://blog.golang.org/wire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.golang.org/wire&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[Go] bluele/mecab-golangを含むコードをビルドすると Undefined symbols for architecture x86_64 と出て失敗する</title>
      <link>https://budougumi0617.github.io/2018/12/09/mecab-undefined-symbols-for-architecture-x86_64/</link>
      <pubDate>Sun, 09 Dec 2018 21:30:35 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/09/mecab-undefined-symbols-for-architecture-x86_64/</guid>
      <description>&lt;p&gt;他の方のリポジトリにビルドすると表題のエラーが出てしまった。&#xA;&lt;code&gt;bluele/mecab-golang&lt;/code&gt;をimportしている(CGOの設定が必要だった）のが原因だったのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>毎週ブログを書くということ #write_blog_every_week</title>
      <link>https://budougumi0617.github.io/2018/12/02/write-blog-every-week/</link>
      <pubDate>Sun, 02 Dec 2018 12:14:05 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/02/write-blog-every-week/</guid>
      <description>&lt;p&gt;この記事は、&#xA;&lt;a href=&#34;https://adventar.org/calendars/2925&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;write-blog-every-week Advent Calendar 2018&lt;/a&gt;の2日目の記事。&#xA;また、社内LT発表で利用した以下のスライドの再構成となる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;毎週ブログを書くということ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/budougumi0617/write-blog-every-week&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/budougumi0617/write-blog-every-week&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;このAdvent Calendarは毎週ブログを書く方々が集まるwrite-blog-every-week slackのSlackメンバーで書かれている。&#xA;write-blog-every-week slackについては以下の記事を参考のこと。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;勢いで週一ブログ書くslackグループを作った&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://kojirooooocks.hatenablog.com/entry/2018/09/21/223841&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kojirooooocks.hatenablog.com/entry/2018/09/21/223841&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>GoogleスライドやGoogleドキュメントのバージョン管理をする</title>
      <link>https://budougumi0617.github.io/2018/11/28/version-control-google-file/</link>
      <pubDate>Wed, 28 Nov 2018 10:47:44 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/11/28/version-control-google-file/</guid>
      <description>&lt;p&gt;たまにGoogleドライブで「xxx_v1」、「xxx_v2」なんてファイルを見かけたりするので紹介しておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] JSON内の数字や文字列が混じった配列を構造体にUnmarshalする</title>
      <link>https://budougumi0617.github.io/2018/11/23/unmarshal-json-array-in-go/</link>
      <pubDate>Fri, 23 Nov 2018 23:22:27 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/11/23/unmarshal-json-array-in-go/</guid>
      <description>&lt;p&gt;以下のようなJSONデータはGoではパースしずらい。&#xA;理由は、配列に複数の型が含まれていてGoの配列としては&lt;code&gt;[]interface{}&lt;/code&gt;にするしかないことと、名前(&lt;code&gt;key&lt;/code&gt;)が設定されていないのでマッピングしにくいからだ。&#xA;これを無理やりUnmarshalしたときのメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go] n秒おきになにかするループをtime.Tickで書く #go</title>
      <link>https://budougumi0617.github.io/2018/11/18/loop-by-time-tick-in-golang/</link>
      <pubDate>Sun, 18 Nov 2018 11:53:10 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/11/18/loop-by-time-tick-in-golang/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;http://amazon.jp/dp/4873118468&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go言語による並行処理&lt;/a&gt;に知らない書き方があったのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料] React&#43;Redux 次の一歩 補足資料 #WEBエンジニア勉強会10</title>
      <link>https://budougumi0617.github.io/2018/11/09/presentation-web-engineer-meetup-10/</link>
      <pubDate>Fri, 09 Nov 2018 09:00:22 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/11/09/presentation-web-engineer-meetup-10/</guid>
      <description>&lt;p&gt;WEBエンジニア勉強会 #10 (東京都, 渋谷)の発表資料と資料中の参考リンク、紹介ライブラリの導入手順をまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評] Go言語でつくるインタプリタ を読んだ #go</title>
      <link>https://budougumi0617.github.io/2018/10/30/review-writing-an-gnterpreter-in-go/</link>
      <pubDate>Tue, 30 Oct 2018 10:48:30 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/30/review-writing-an-gnterpreter-in-go/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://amazon.jp/dp/4873118220&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go言語でつくるインタプリタ&lt;/a&gt;を読んだのでメモ。&#xA;プログラマなら一度はやる（？）であろうインタプリタの実装をGoで行う本書では、優れた設計は拡張性が高く「小さく作る」・「常に動くものを作る」を可能にすること、テスト駆動開発とテーブル駆動テストを用いることで検証を繰り返しながら着実に開発を進めることができることを実感することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vim-goの自動補完が効かないときの調べ方（gocode が Error parsing input file (outer block)） #vim #go</title>
      <link>https://budougumi0617.github.io/2018/10/22/deug-gocode-and-vim-go-auto-completion/</link>
      <pubDate>Mon, 22 Oct 2018 21:00:19 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/22/deug-gocode-and-vim-go-auto-completion/</guid>
      <description>&lt;p&gt;&lt;code&gt;goimports&lt;/code&gt;などが更新されていたので、&lt;code&gt;vim-go&lt;/code&gt;で&lt;code&gt;GoUpdateBinaries&lt;/code&gt;コマンドを実行したら&lt;code&gt;vim&lt;/code&gt;で自動補完が効かなくなった。&lt;br&gt;&#xA;結局はgocodeの調子が悪いことが多いので、原因の調べ方をまとめる。&lt;br&gt;&#xA;（今回の場合は &lt;code&gt;let g:go_gocode_propose_source = 0&lt;/code&gt; で解決した。）&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料]go-cloudとWireを利用したDI #gounco #go</title>
      <link>https://budougumi0617.github.io/2018/10/19/presentation-gounco-lt4/</link>
      <pubDate>Fri, 19 Oct 2018 13:31:21 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/19/presentation-gounco-lt4/</guid>
      <description>&lt;p&gt;Go(Un)Conference（Goあんこ）LT大会 4kgの発表資料と資料中の参考リンク、補足をまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redux-actionsのcreateActionでFlux Standard Actionに則ったerror=trueなActionを作る #react</title>
      <link>https://budougumi0617.github.io/2018/10/10/how-to-throw-error-by-create-action-of-redux-actions/</link>
      <pubDate>Wed, 10 Oct 2018 14:04:10 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/10/how-to-throw-error-by-create-action-of-redux-actions/</guid>
      <description>&lt;p&gt;redux-actionsを使うと、Flux Standard Action(FSA)に則った&lt;code&gt;Action&lt;/code&gt;を簡単に作れる。&lt;br&gt;&#xA;が、エラーがあったときのAtionはどう作ればよいのだろう。&lt;br&gt;&#xA;よく読めば公式に書いてあるのだが、直接的なコードはなかったのでメモ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;createAction(s) | API Reference | redux-actions&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://redux-actions.js.org/api/createaction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://redux-actions.js.org/api/createaction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[書評]エンジニアの知的生産術を読んだ</title>
      <link>https://budougumi0617.github.io/2018/10/03/review-the-productive-technique-of-engineer/</link>
      <pubDate>Wed, 03 Oct 2018 10:03:23 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/03/review-the-productive-technique-of-engineer/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;http://amazon.jp/dp/4774198765&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;エンジニアの知的生産術&lt;/a&gt;を読んだので読書メモ。&lt;br&gt;&#xA;タイトルに「エンジニア」とついてはいるものの、それほどエンジニアリングに特化した内容でもなく&#xA;エンジニアでなくても読める、かつエンジニアでなくても日々の知的生産を向上できそうな良本だった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jest( &gt;23.0.0 )、enzymeでReactのテーブル駆動テストを行う #react #test</title>
      <link>https://budougumi0617.github.io/2018/09/28/react-table-driven-test-by-jest-enzyme/</link>
      <pubDate>Fri, 28 Sep 2018 09:21:48 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/28/react-table-driven-test-by-jest-enzyme/</guid>
      <description>&lt;p&gt;Reactでもテーブル駆動テスト(データ駆動テスト)がしたいと思い、Jestを使ってみた。&#xA;ステートレスなコンポーネントがちゃんと設計できていれば入出力は冪等になるので、Reactとテーブル駆動テストは非常に相性がよさそう。&#xA;enzymeを使えばDOMアクセスも簡単だった。&#xA;ただ、Jestのバージョンが23.0.0以上じゃないと&lt;code&gt;each&lt;/code&gt;メソッドが使えないので、&lt;code&gt;create-react-app&lt;/code&gt;で作ったプロジェクトの場合は&lt;code&gt;eject&lt;/code&gt;する必要があった。&lt;/p&gt;&#xA;&lt;p&gt;JestはJavascriptで&lt;code&gt;rspec&lt;/code&gt;のようなテストが書けるツール。enzymeはairbnbが作成したいい感じにDOMにアクセスできるAPIライブラリ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Jest&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://jestjs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://jestjs.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;enzyme&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;http://airbnb.io/enzyme/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://airbnb.io/enzyme/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>go listで依存パッケージを一覧する。-tagsで依存パッケージを切り替える #go</title>
      <link>https://budougumi0617.github.io/2018/09/21/package-dependencies-with-go-list-and-build-tags/</link>
      <pubDate>Fri, 21 Sep 2018 09:18:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/21/package-dependencies-with-go-list-and-build-tags/</guid>
      <description>&lt;p&gt;今更だがGoでビルドタグで依存パッケージをどう制御できるのか確認した。&lt;br&gt;&#xA;また、依存パッケージの一覧を確認するのには&lt;code&gt;go list&lt;/code&gt;コマンドの使い方を調べた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim &#43; ALEでReact&#43;Flowなファイルを開くと&#39;type aliases&#39; can only be used in a .ts file.と怒られる #react #eslint</title>
      <link>https://budougumi0617.github.io/2018/09/12/type-can-only-be-used-in-a-dot-ts-file-on-vim/</link>
      <pubDate>Wed, 12 Sep 2018 21:15:51 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/12/type-can-only-be-used-in-a-dot-ts-file-on-vim/</guid>
      <description>&lt;p&gt;&lt;code&gt;create-react-app&lt;/code&gt;を使って、React + Flowな開発を始めようとしたら以下のLintエラーがVimから出るようになってしまった。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;8008: &#39;type aliases&#39; can only be used in a .ts file.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;8011: &#39;type arguments&#39; can only be used in a .ts file.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;(今回は)TypeScriptは使うつもりをないので&lt;code&gt;.ts&lt;/code&gt;ファイルと言われても困ってしまう。&lt;br&gt;&#xA;エラーメッセージをググってもググってもVSCodeのエラー解決しか見つからなかったのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのtestingを理解する in 2018 - iotestサブパッケージ編 #go</title>
      <link>https://budougumi0617.github.io/2018/09/09/go-testing2018-iotest/</link>
      <pubDate>Sun, 09 Sep 2018 21:51:11 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/09/go-testing2018-iotest/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかった&lt;code&gt;testing/iotest&lt;/code&gt;について触れる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Goのtestingを理解する in 2018 - quickサブパッケージ編 #go</title>
      <link>https://budougumi0617.github.io/2018/09/05/go-testing2018-quick/</link>
      <pubDate>Wed, 05 Sep 2018 10:02:02 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/05/go-testing2018-quick/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかった&lt;code&gt;testing/quick&lt;/code&gt;パッケージについてまとめる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/&#34;&gt;Goのtestingを理解する in 2018 - Examples編 #go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Goのtestingを理解する in 2018 - Examples編 #go</title>
      <link>https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/</link>
      <pubDate>Thu, 30 Aug 2018 20:49:44 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかったExamplesについてまとめる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Goのtestを理解する in 2018 #go</title>
      <link>https://budougumi0617.github.io/2018/08/19/go-testing2018/</link>
      <pubDate>Sun, 19 Aug 2018 12:14:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/19/go-testing2018/</guid>
      <description>&lt;p&gt;2018年夏(Go1.10)時点でGoのテスト方法をまとめる。&lt;br&gt;&#xA;この記事は以下のスライド資料の補足記事になる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tour of testing in 2018&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/budougumi0617/tour-of-testing-in-2018&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/budougumi0617/tour-of-testing-in-2018&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Vimの:terminalコマンドでzshを開くと.zshrcが読み込まれない #vim #zsh</title>
      <link>https://budougumi0617.github.io/2018/08/15/cannot-load-zshrc-on-vim-terminal/</link>
      <pubDate>Wed, 15 Aug 2018 09:16:25 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/15/cannot-load-zshrc-on-vim-terminal/</guid>
      <description>&lt;p&gt;自分の&lt;code&gt;.zshrc&lt;/code&gt;配置が悪かったのでメモ。&#xA;zshはログインシェル時とインタラクティブシェル時でロードされるディレクトリが異なる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mercari.go #2 参加メモ #mercarigo</title>
      <link>https://budougumi0617.github.io/2018/08/12/report-mercarigo2/</link>
      <pubDate>Sun, 12 Aug 2018 12:04:41 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/12/report-mercarigo2/</guid>
      <description>&lt;p&gt;mercari.go #2に参加してきた。今回はGoの話だけでなく、GraphQLについても勉強することができた。&lt;br&gt;&#xA;次回は9月開催にGopherCon2018の参加報告を予定しているとのこと。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]Google Cloud Platform エンタープライズ設計ガイドを読んだ</title>
      <link>https://budougumi0617.github.io/2018/08/04/rewview-gcp-enterprise-design-guide/</link>
      <pubDate>Sat, 04 Aug 2018 07:03:18 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/04/rewview-gcp-enterprise-design-guide/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;http://amazon.jp/dp/4822257908&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud Platform エンタープライズ設計ガイド&lt;/a&gt;を読んだので読書メモ。&#xA;実際にGAEやGKEにデプロイしたりしながら学びたい人は別の本を探すか、GCP公式の&#xA;&lt;a href=&#34;https://cloud.google.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;チュートリアル&lt;/a&gt;や&#xA;&lt;a href=&#34;https://codelabs.developers.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Codelabs&lt;/a&gt;で勉強したほうが良いかも。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料]Spinnakerを利用した自動カナリー分析 #WEBエンジニア勉強会08</title>
      <link>https://budougumi0617.github.io/2018/07/27/presentation-web-engineer-study-meeting8/</link>
      <pubDate>Fri, 27 Jul 2018 14:07:39 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/27/presentation-web-engineer-study-meeting8/</guid>
      <description>&lt;p&gt;WEBエンジニア勉強会 #08の発表資料と資料中の参考リンク、補足をまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料]初級者向けGoの落とし穴と解説 #gounco</title>
      <link>https://budougumi0617.github.io/2018/07/26/presentation-gounco-lt3/</link>
      <pubDate>Thu, 26 Jul 2018 08:00:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/26/presentation-gounco-lt3/</guid>
      <description>&lt;p&gt;Go(Un)Conference（Goあんこ）LT大会 3kgの発表資料と資料中の参考リンク、補足をまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LINE Developer Meetup in Tokyo #40 -Kubernetes-参加メモ #LINE_DM #k8s</title>
      <link>https://budougumi0617.github.io/2018/07/20/report-line-developer-meetup-40-kubernetes/</link>
      <pubDate>Fri, 20 Jul 2018 13:32:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/20/report-line-developer-meetup-40-kubernetes/</guid>
      <description>&lt;p&gt;LINE Developer Meetup in Tokyo #40 -Kubernetes-に参加してきたのでメモ。&lt;br&gt;&#xA;オンプレでのk8sの運用や、Rancher、SpinnakerやDruckerといったツールについて学ぶことができた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCPUG Tokyo gVisor Day July 2018 参加メモ #gcpug #gvisor</title>
      <link>https://budougumi0617.github.io/2018/07/18/report-gcpug-gvisor/</link>
      <pubDate>Wed, 18 Jul 2018 08:30:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/18/report-gcpug-gvisor/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://gcpug.jp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCPUG(Google Cloud Platform User Group)&lt;/a&gt;の勉強会に参加してきた。&lt;br&gt;&#xA;先日OSSとして公開されて話題となっているgVisorの話を聞いてきたので参加メモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>@kakakakakku さんのブログメンタリングを3ヶ月間受けて卒業した</title>
      <link>https://budougumi0617.github.io/2018/07/10/graduate-blog-mentoring-by-kakakakakku/</link>
      <pubDate>Tue, 10 Jul 2018 08:50:47 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/10/graduate-blog-mentoring-by-kakakakakku/</guid>
      <description>&lt;p&gt;4月から6月の3ヶ月間カカカカック(&#xA;&lt;a href=&#34;https://twitter.com/kakakakakku&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kakakakakku&lt;/a&gt;)さんのブログメンタリングを受けていた。&#xA;6月で卒業したのでメンタリングの結果をまとめておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mercari.go #1 参加メモ #mercarigo</title>
      <link>https://budougumi0617.github.io/2018/07/05/report-mercarigo-1/</link>
      <pubDate>Thu, 05 Jul 2018 08:00:48 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/05/report-mercarigo-1/</guid>
      <description>&lt;p&gt;メルカリ内でGoがどのように使われているのかを聞くため&#xA;&lt;a href=&#34;https://mercari.connpass.com/event/91306/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mercari.go #1&lt;/a&gt;に参加してきた。&lt;br&gt;&#xA;詳しくは所感に書いたがいろいろな角度のGoの話を聞くことができてとても参加できてよかった。なお次回は8月を予定しているとのこと。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spinnakerを使ったカナリーリリースの自動評価 #spinnaker #kayenta</title>
      <link>https://budougumi0617.github.io/2018/06/29/get-started-auto-canary-analysis-by-spinnaker-with-kayenta/</link>
      <pubDate>Fri, 29 Jun 2018 08:33:06 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/29/get-started-auto-canary-analysis-by-spinnaker-with-kayenta/</guid>
      <description>&lt;p&gt;Netflixが4月に発表した&#xA;&lt;a href=&#34;https://www.spinnaker.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spinnaker&lt;/a&gt;と&#xA;&lt;a href=&#34;https://github.com/spinnaker/kayenta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kayenta&lt;/a&gt;を使ったカナリーリリースの自動分析を試してみた。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Automated Canary Analysis at Netflix with Kayenta&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://medium.com/netflix-techblog/automated-canary-analysis-at-netflix-with-kayenta-3260bc7acc69&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/netflix-techblog/automated-canary-analysis-at-netflix-with-kayenta-3260bc7acc69&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>SpinnakerでGKEの自動カナリー分析をするときはStackdriver k8s Monitoring V2 BETAを使う #spinnaker #kayenta</title>
      <link>https://budougumi0617.github.io/2018/06/27/gke-must-use-beta-monitoring-for-kayenta/</link>
      <pubDate>Wed, 27 Jun 2018 07:48:57 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/27/gke-must-use-beta-monitoring-for-kayenta/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://www.spinnaker.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spinnaker&lt;/a&gt;とKayentaを使えばカナリーリリースの結果を自動評価することができる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Automated Canary Analysis at Netflix with Kayenta&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://medium.com/netflix-techblog/automated-canary-analysis-at-netflix-with-kayenta-3260bc7acc69&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/netflix-techblog/automated-canary-analysis-at-netflix-with-kayenta-3260bc7acc69&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;この自動分析をGKEで試そうとしていたが、Kubenetes(k8s)コンテナー(Stackdriver)からメトリクスが取れていなかった。&#xA;理由がわかったのでメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]マイクロサービスアーキテクチャを読んだ</title>
      <link>https://budougumi0617.github.io/2018/06/26/review-microservices-architecture/</link>
      <pubDate>Tue, 26 Jun 2018 08:30:28 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/26/review-microservices-architecture/</guid>
      <description>&lt;p&gt;今更ながら&#xA;&lt;a href=&#34;http://amazon.jp/dp/4873117607&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;マイクロサービスアーキテクチャ&lt;/a&gt;を読んだので読書メモ&lt;/p&gt;</description>
    </item>
    <item>
      <title>GKE上でStackdriverと連携したSpinnaker/Kayenta環境を構築する #spinnaker #kayenta</title>
      <link>https://budougumi0617.github.io/2018/06/23/how-to-start-auto-canary-analysis/</link>
      <pubDate>Sat, 23 Jun 2018 18:28:42 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/23/how-to-start-auto-canary-analysis/</guid>
      <description>&lt;p&gt;SpinnakerとKayentaを組み合わせ自動カナリー分析を行うための環境構築を行う。&#xA;今回の構築ではGKE上にSpinnakerを構築し、Stackdriverから分析用のログを取得する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>未修正ファイルでもvim-gitgutter列を表示して差分表示で画面をガタガタさせない #vim #git</title>
      <link>https://budougumi0617.github.io/2018/06/20/setting-vim-gitgutter-column-shows-always/</link>
      <pubDate>Wed, 20 Jun 2018 08:36:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/20/setting-vim-gitgutter-column-shows-always/</guid>
      <description>&lt;p&gt;vim-gitgutterはvimで編集中のファイルの左端にgitの差分情報を表示してくれるプラグインだ。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/airblade/vim-gitgutter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;未修正の状態でもvim-gitgutterラインを常に表示させて画面をガタガタしない方法を調べた。「画面がガタガタする」の意味はGIF画像を見てもらえばわかると思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Spinnaker]GKE上でhal deploy applyするとkayenta failed http://localhost:8090/spectator/metrics with &lt;urlopen error [Errno 111] Connection refused&gt; #spinnaker #kayenta</title>
      <link>https://budougumi0617.github.io/2018/06/16/spinnaker-failing-with-stackdrivermetricsservice/</link>
      <pubDate>Sat, 16 Jun 2018 05:50:45 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/16/spinnaker-failing-with-stackdrivermetricsservice/</guid>
      <description>&lt;p&gt;Spinnakerで自動リリース分析をするための環境構築をしている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Try out Halyard on GKE&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://www.spinnaker.io/setup/quickstart/halyard-gke/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.spinnaker.io/setup/quickstart/halyard-gke/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Set up canary support&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://www.spinnaker.io/setup/canary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.spinnaker.io/setup/canary/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Spinnakerの設定を変更して&lt;code&gt;hal deploy apply&lt;/code&gt;したらそのままレスポンスが帰ってこなくなった。&#xA;表題のエラー内容をloggingで見つけるまでだいぶ悩んでしまったのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[k8s]隅からスミまでKubernetes総復習 - cndjpシーズン1まとめ参加メモ #cndjp #k8s</title>
      <link>https://budougumi0617.github.io/2018/06/15/cndjp6-review-kubernetes/</link>
      <pubDate>Fri, 15 Jun 2018 22:12:45 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/15/cndjp6-review-kubernetes/</guid>
      <description>&lt;p&gt;Cloud Native Developers JP(cndjp) の第6回目に参加してきたので、自分メモ。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://cnd.connpass.com/event/89854/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cnd.connpass.com/event/89854/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;オラクル青山センター 13F セミナールーム&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018/06/14(木) 18:30 〜 21:30&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;資料1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/hhiroshell/kubernetesying-yong&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes応用&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;資料2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/hhiroshell/kubernetesmaniatuku&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetesマニアック&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ハッシュタグ&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://twitter.com/hashtag/cndjp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#cndjp&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;知っていると便利あるいはハマらないKubernetes(k8s)の細かい設定を学ぶことができた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Continuous Delivery With Spinnakerでマイクロサービスの継続的デリバリーの課題と解決手法を学ぶ</title>
      <link>https://budougumi0617.github.io/2018/06/14/review-continuous-delivery-with-spinnaker/</link>
      <pubDate>Thu, 14 Jun 2018 08:55:40 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/14/review-continuous-delivery-with-spinnaker/</guid>
      <description>&lt;p&gt;Netflixが公開している無料の電子書籍をざっと読んだので紹介。&lt;br&gt;&#xA;マイクロサービスにおける継続的デリバリーのプラクティスと、継続的デリバリーのためのOSSツールであるSpinnakerの紹介がまとまっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>hal config canary google account addすると&#34;Required &#39;compute.projects.get&#39; permission for...&#34;で403エラー #spinnaker #kayenta</title>
      <link>https://budougumi0617.github.io/2018/06/13/403-error-when-add-google-account-for-kayenta/</link>
      <pubDate>Wed, 13 Jun 2018 09:13:51 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/13/403-error-when-add-google-account-for-kayenta/</guid>
      <description>&lt;p&gt;SpinnakerはKubenetesクラスターへの継続的デリバリーを可能とするOSSだ。&lt;br&gt;&#xA;Kayenataを有効化することで、カナリーリリースの自動スコアリングも可能とする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>コンテナ技術の学習するなら圧倒的にKatacodaがおすすめ #k8s #kubernetes</title>
      <link>https://budougumi0617.github.io/2018/06/10/katacoda-introduction/</link>
      <pubDate>Sun, 10 Jun 2018 16:54:38 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/06/10/katacoda-introduction/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://www.katacoda.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.katacoda.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2018/06/katacoda-top.png&#34; alt=&#34;lesson-image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Katacodaはコンテナ技術に強い無料の学習サイトだ。&lt;br&gt;&#xA;ブラウザさえあれば簡単にKubernetesなどを動かせるので、とりあえず触ってみたい人におすすめしたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料]Go入門</title>
      <link>https://budougumi0617.github.io/2018/05/30/go-introduction/</link>
      <pubDate>Wed, 30 May 2018 08:58:32 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/30/go-introduction/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://connpass.com/event/86508/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js/React/Go/Rails5.2のリアル★ShuuuMai #04&lt;/a&gt;の発表資料と資料中の参考リンク、補足をまとめた。&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://connpass.com/event/86508/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://connpass.com/event/86508/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;e6fbf358f82c4894b0546f467abb2e9f&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&#xA;&lt;h1 id=&#34;golang&#34;&gt;Golang&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://golang.org/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go自体のコードはここから読める。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/golang/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/golang/go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;language-specification&#34;&gt;Language Specification&lt;/h1&gt;&#xA;&lt;p&gt;Goの言語仕様については以下のページで詳細を確認できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]vim-goとDelveでVim上からGoのデバッグを行う #vim #golang</title>
      <link>https://budougumi0617.github.io/2018/05/30/debug-go-by-vim-go-and-delve/</link>
      <pubDate>Wed, 30 May 2018 08:00:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/30/debug-go-by-vim-go-and-delve/</guid>
      <description>&lt;p&gt;VimでGoを使う人は大半の人が&lt;code&gt;vim-go&lt;/code&gt;プラグインをインストールしているだろう。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;fatih/vim-go&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://github.com/fatih/vim-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/fatih/vim-go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今年の3月、ついに&lt;code&gt;vim-go&lt;/code&gt;が&lt;code&gt;delve&lt;/code&gt;をサポートした（他のVimプラグインを使えばすでにVimから使えたようだが）。&lt;br&gt;&#xA;VimからGoのプログラムをデバッグする方法をまとめる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]go.uber.org/zap.loggerの出力をbytes.Bufferに変更する #golang</title>
      <link>https://budougumi0617.github.io/2018/05/24/inject-io-writer-to-zap-logger/</link>
      <pubDate>Thu, 24 May 2018 08:44:38 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/24/inject-io-writer-to-zap-logger/</guid>
      <description>&lt;p&gt;&lt;code&gt;go.uber.org/zap&lt;/code&gt;の&lt;code&gt;zap.logger&lt;/code&gt;は構造化されたログを高速に出力できるとしてGolangのLoggerの中で有名だ。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/uber-go/zap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/uber-go/zap&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;gRPCを用いたMicroservicesを構成する際にも利用されることが多い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]SQL 第2版 ゼロからはじめるデータベース操作 を読んだ</title>
      <link>https://budougumi0617.github.io/2018/05/23/review-sql-study-database-operation-from-zero/</link>
      <pubDate>Wed, 23 May 2018 22:27:30 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/23/review-sql-study-database-operation-from-zero/</guid>
      <description>&lt;p&gt;今更ながら（？）表題の本を読んだので読書メモを書いておく。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4798144452&amp;linkId=4cdc008d82323946e1899eb0827ab4b5&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sqlの知識がまったくない人から読者の対象&#34;&gt;SQLの知識がまったくない人から読者の対象&lt;/h2&gt;&#xA;&lt;p&gt;この本の読者の対象レベルはタイトルの通りまったくのSQL未経験者を対象としている。&lt;br&gt;&#xA;自分のレベルはだいたいこれくらいだった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerで使い捨てのMySQL環境を用意する。事前データを投入して起動する。</title>
      <link>https://budougumi0617.github.io/2018/05/20/create-instant-mysql-by-docker/</link>
      <pubDate>Sun, 20 May 2018 12:47:20 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/20/create-instant-mysql-by-docker/</guid>
      <description>&lt;p&gt;データベースの勉強をしている。&lt;br&gt;&#xA;クエリを書く練習をしたりするにはやはり実際に動いている環境がほしい。&lt;br&gt;&#xA;ただ、ローカルの開発用のデータベースとは別でやりたいとか、使い捨ての環境が欲しくなるときがある。&lt;br&gt;&#xA;そんなときはDockerを利用することで使い捨ての環境を用意できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Googleスライドで「いい感じ」に背景画像を設定する</title>
      <link>https://budougumi0617.github.io/2018/05/18/make-presentation-on-google-slide/</link>
      <pubDate>Fri, 18 May 2018 09:13:20 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/18/make-presentation-on-google-slide/</guid>
      <description>&lt;p&gt;Googleスライドで「背景を画像にしていい感じ」の資料を作る方法を調べた。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;「背景」として画像を設定してはいけない&lt;/li&gt;&#xA;&lt;li&gt;メニューから「挿入」-「画像」を選び画像を添付する&lt;/li&gt;&#xA;&lt;li&gt;画像の「書式設定オプション」を表示して明るさを暗くしていく&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;before&#34;&gt;Before&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2018/05/0518_before_slide.png&#34; alt=&#34;before_image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>go getで取得されるコードはmasterブランチ(HEAD)がデフォルトではない #golang</title>
      <link>https://budougumi0617.github.io/2018/05/10/go-get-from-go1-tag-or-branch/</link>
      <pubDate>Thu, 10 May 2018 09:00:17 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/10/go-get-from-go1-tag-or-branch/</guid>
      <description>&lt;p&gt;gocon中の&#xA;&lt;a href=&#34;https://twitter.com/ymotongpoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ymotongpoo&lt;/a&gt;さんのTweetが気になったので調べた。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;前から結構言ってるんだけど、go getで最新取られたくない場合は go1 というタグを切れば良いです &lt;a href=&#34;https://twitter.com/hashtag/gocon?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#gocon&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yoshifumi Yamaguchi 🇺🇸 (@ymotongpoo) &lt;a href=&#34;https://twitter.com/ymotongpoo/status/985418278288764928?ref_src=twsrc%5Etfw&#34;&gt;2018年4月15日&lt;/a&gt;&lt;/blockquote&gt;&#xA;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;go 1.Xを使っているとき、&lt;code&gt;go get&lt;/code&gt;で取得されるコードはまず&lt;code&gt;go1&lt;/code&gt; branch or tagから取得される&lt;/li&gt;&#xA;&lt;li&gt;branchにもtagにも&lt;code&gt;go1&lt;/code&gt;が存在しなかったときに&lt;code&gt;master&lt;/code&gt;のコードが取得される&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;実際に仕様を見てみる&#34;&gt;実際に仕様を見てみる&lt;/h1&gt;&#xA;&lt;p&gt;golang.orgの&lt;code&gt;go get&lt;/code&gt;コマンドのページを見ると確かに&lt;code&gt;go1&lt;/code&gt;について言及されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[vim-go]GoFillStructで構造体のフィールド初期化文を自動生成する</title>
      <link>https://budougumi0617.github.io/2018/05/06/vim-go-gofillstruct/</link>
      <pubDate>Sun, 06 May 2018 16:25:33 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/06/vim-go-gofillstruct/</guid>
      <description>&lt;p&gt;Goで構造体の初期化をするときに「フィールド名なんだっけ？」となることがある。&#xA;また、フィールド名を手打ちしてタイポすることもあるだろう。&lt;br&gt;&#xA;vim-goを使っている場合、&lt;code&gt;:GoFillStruct&lt;/code&gt;コマンドで構造体のフィールド初期化を簡単に行うことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[k8s]あつまれ！ CI/CDツール大集合！ - cndjp第5回 参加メモ #cndjp5</title>
      <link>https://budougumi0617.github.io/2018/05/02/cndjp5-cicd-tools/</link>
      <pubDate>Wed, 02 May 2018 09:00:41 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/02/cndjp5-cicd-tools/</guid>
      <description>&lt;p&gt;Cloud Native Developers JP(cndjp) 第5回勉強会に参加してきたので、自分メモ。&lt;br&gt;&#xA;今回は有志による一人10分のCI/CDツールの紹介。自分は発表者としても参加させていただいた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[k8s]GCPUG Tokyo Kubernetes Engine Day April 2018参加メモ #gcpug</title>
      <link>https://budougumi0617.github.io/2018/04/28/gcpug-tokyo-kubernetes-engine-day-april-2018/</link>
      <pubDate>Sat, 28 Apr 2018 15:52:39 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/28/gcpug-tokyo-kubernetes-engine-day-april-2018/</guid>
      <description>&lt;p&gt;GCPUGに行ってMercariのマイクロサービス環境、有識者方のGKEパネルディスカッションを聞いてきたので参加メモ。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://gcpug-tokyo.connpass.com/event/81224/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gcpug-tokyo.connpass.com/event/81224/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;六本木ヒルズ 森タワー 18F メルカリ&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018/04/26(木)19:00 〜 22:00&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;資料&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/tcnksm/microservices-on-gke-at-mercari&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microservices on GKE at Mercari&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ハッシュタグ&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://twitter.com/hashtag/gcpug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#gcpug&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;microservices-on-gke-at-mercari&#34;&gt;Microservices On GKE At Mercari&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://twitter.com/deeeet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@deeet&lt;/a&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://speakerdeck.com/tcnksm/microservices-on-gke-at-mercari&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/tcnksm/microservices-on-gke-at-mercari&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[発表資料]Spinnaker入門 #cndjp5</title>
      <link>https://budougumi0617.github.io/2018/04/27/spinnaker-introduction/</link>
      <pubDate>Fri, 27 Apr 2018 10:09:26 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/27/spinnaker-introduction/</guid>
      <description>&lt;p&gt;Cloud Native Developers JP 第5回勉強会(cndjp5)の発表資料と資料中の参考リンクです。&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://cnd.connpass.com/event/84310/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cnd.connpass.com/event/84310/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3f26a8a1f1f44cb2ae26c2cda5978edd&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&#xA;&lt;h1 id=&#34;spinnaker&#34;&gt;Spinnaker&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Spinnaker&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://www.spinnaker.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.spinnaker.io&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;SpinnakerはKubernetesなどに対応した継続的デリバリーツール。&lt;br&gt;&#xA;Blue/Greenやカナリーリリースが簡単にできる&lt;/p&gt;</description>
    </item>
    <item>
      <title>GKEでSpinnakerを使ったKubernetesの継続的デリバリーを試してみた</title>
      <link>https://budougumi0617.github.io/2018/04/24/spinnaker-with-google-kubernetes-engine/</link>
      <pubDate>Tue, 24 Apr 2018 21:01:54 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/24/spinnaker-with-google-kubernetes-engine/</guid>
      <description>&lt;p&gt;Google Kubernetes EngineとSpinakerを使ったkubernetesの継続的デリバリーを試してみた。&lt;/p&gt;&#xA;&lt;p&gt;Spinnakerを始めるにあたってまずGCPでサンプルの継続的デリバリーを試してみた。&lt;br&gt;&#xA;一通りのコピペでGoogle Kubernetes Engine(GKE)に対するSpinnakerを使った継続的デリバリーを試せる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spinnakerの始め方いろいろ</title>
      <link>https://budougumi0617.github.io/2018/04/22/how-to-start-spinnaker/</link>
      <pubDate>Sun, 22 Apr 2018 22:47:22 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/22/how-to-start-spinnaker/</guid>
      <description>&lt;p&gt;Spinnakerはマルチクラウドに対応したOSSの継続的デリバリーツール。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Spinnaker&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://www.spinnaker.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.spinnaker.io&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;SpinnakerによるContinuous Delivery&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;http://tech.mercari.com/entry/2017/08/21/092743&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://tech.mercari.com/entry/2017/08/21/092743&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Spinnakerを試してみたいと思うにあたって、まずSpinnaker自体の環境構築方法を調べてみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang.tokyo #14 ゴールーチンとチャネルによる並行処理 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/04/19/golangtokyo-14-goroutine/</link>
      <pubDate>Thu, 19 Apr 2018 09:41:43 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/19/golangtokyo-14-goroutine/</guid>
      <description>&lt;p&gt;golang.tokyo #14はgroutineとchannelの話。&lt;br&gt;&#xA;@morkuniさんの発表は入門編、@knsh14さんの発表はdeep diveという感じで非常によかった。&lt;br&gt;&#xA;「golangは言語仕様が簡素だからすぐ覚えられる」とよく言われるけど、並行処理に関しては結構スキルがいるイメージ。&lt;br&gt;&#xA;なお、「並行処理」と「並列処理」の概念の違いはRob Pikeの以下の資料が分かりやすい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Conference 2018 Spring 参加メモ #gocon</title>
      <link>https://budougumi0617.github.io/2018/04/17/go-conference-2018-spring/</link>
      <pubDate>Tue, 17 Apr 2018 22:52:49 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/17/go-conference-2018-spring/</guid>
      <description>&lt;p&gt;先日行われたgoconの参加メモ。今回は2トラック制だったので、自分が見たものだけ。&#xA;公開されているスライド資料などは以下のリンクに添付されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git grepでマッチしたワードを含んだ関数名を表示する/関数スコープ全体を表示する #git</title>
      <link>https://budougumi0617.github.io/2018/04/11/git-grep-options-w-and-p/</link>
      <pubDate>Wed, 11 Apr 2018 08:22:22 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/11/git-grep-options-w-and-p/</guid>
      <description>&lt;p&gt;git 2.17にすると使える(？)&lt;code&gt;-W&lt;/code&gt;オプション(とついでに&lt;code&gt;-p&lt;/code&gt;)が便利すぎたのでメモ。&lt;br&gt;&#xA;2018/04/11現在、Macならば&lt;code&gt;brew upgrade git&lt;/code&gt;で2.1.7に更新できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのデバッガ(Delve)のいろいろな起動のしかた(引数を渡して起動、起動中のプロセスにアタッチして起動 etc...)</title>
      <link>https://budougumi0617.github.io/2018/04/08/debug-by-delve/</link>
      <pubDate>Sun, 08 Apr 2018 09:12:28 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/08/debug-by-delve/</guid>
      <description>&lt;p&gt;goでデバッグするときはdelveを使うことが多いと思う。&#xA;ユースケース別の起動方法をまとめた。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本的な起動方法と簡単な操作方法(&lt;code&gt;dlv debug&lt;/code&gt;/&lt;code&gt;dlv test&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;環境変数を設定して起動する(Windows以外)(&lt;code&gt;ENV=... dlv debug&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;引数を渡して起動する(&lt;code&gt;dlv debug --&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;特定のテストケースを指定して起動する(&lt;code&gt;dlv test -- -test.run&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;起動済みのプロセスにアタッチして起動する(&lt;code&gt;dlv attach&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;リモートから接続して起動する(&lt;code&gt;dlv exec&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;dlv connect&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;&#xA;&lt;p&gt;まずはvimを起動する。(&#xA;&lt;a href=&#34;https://github.com/fatih/vim-go/blob/master/CHANGELOG.md#117---march-27-2018&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;vim-go&lt;/code&gt;も&lt;code&gt;delve&lt;/code&gt;をサポート&lt;/a&gt;するようになりましたね。)&lt;br&gt;&#xA;…ではこの記事が閉じられそうなのでコマンドラインからDelveを使うことを前提とする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerでnode-SASSを使うとNode Sass could not find a binding for your current environment: Linux 64-bit with Node.js X.X...</title>
      <link>https://budougumi0617.github.io/2018/04/04/fail-node-sass-on-docker/</link>
      <pubDate>Wed, 04 Apr 2018 13:20:32 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/04/fail-node-sass-on-docker/</guid>
      <description>&lt;p&gt;2,3日ハマっていたのでメモ。&lt;br&gt;&#xA;Dockerでnode-SASSを使ったら以下のエラーが出て動かなかった。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sample-app    |         Module build failed: Error: Missing binding /usr/src/app/node_modules/node-sass/vendor/linux-x64-57/binding.node&#xA;sample-app    |         Node Sass could not find a binding for your current environment: Linux 64-bit with Node.js 8.x&#xA;sample-app    |&#xA;sample-app    |         Found bindings for the following environments:&#xA;sample-app    |           - OS X 64-bit with Node.js 8.x&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ホストの&lt;code&gt;node_modules&lt;/code&gt;ディレクトリをコンテナにマウントしてしまうとOS差異があったときに&lt;code&gt;node-sass&lt;/code&gt;の依存性解決に失敗する&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;ディレクトリはマウントしないようにしておく&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt;するときは&lt;code&gt;-v /your-project-root-in-container/node_modules&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docker compose&lt;/code&gt;するときは&lt;code&gt;volumes&lt;/code&gt;オプションで&lt;code&gt;- /your-project-root-in-container/node_modules&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;&#xA;&lt;p&gt;Reactとwebpack-dev-serverを使った開発用コンテナを作っていたが、コンテナを起動するとnode-SASSが以下のエラーで動かなかった。&lt;br&gt;&#xA;編集したコードをホットリロードをしながら開発したかったので、当然ホストのReactプロジェクトディレクトリはコンテナにマウントして起動していた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes Network Deep Dive!（Istioもあるよ） cndjp第四回参加メモ #cndjp4</title>
      <link>https://budougumi0617.github.io/2018/04/01/kubernetes-network-deep-dive-cndjp4/</link>
      <pubDate>Sun, 01 Apr 2018 11:19:22 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/01/kubernetes-network-deep-dive-cndjp4/</guid>
      <description>&lt;p&gt;オラクル&#xA;&lt;a href=&#34;https://twitter.com/hhiroshell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hhiroshell&lt;/a&gt;さん主催のcndjp。&#xA;今回はKubernetes(k8s)のネットワーク構成について、そしてIstioの概要とそれを利用したサービスメッシュ構成のハンズオンを行った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Ruby]ローカルで修正したgemのコードをbundle installする</title>
      <link>https://budougumi0617.github.io/2018/03/21/set-to-use-local-gem-code/</link>
      <pubDate>Wed, 21 Mar 2018 14:21:32 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/03/21/set-to-use-local-gem-code/</guid>
      <description>&lt;p&gt;Railsのプロダクトが参照しているgemを修正しながら開発する必要が出てきた。&lt;br&gt;&#xA;ローカルで編集して未コミット状態のコードを含んだの&lt;code&gt;gem&lt;/code&gt;を&lt;code&gt;bundle install&lt;/code&gt;する方法をまとめる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]golang.tokyo #13 - Macでハンズオンアプリを動かすまでに必要だったこと #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/03/14/report-golang-tokyo-13-android-with-gomobile/</link>
      <pubDate>Wed, 14 Mar 2018 09:46:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/03/14/report-golang-tokyo-13-android-with-gomobile/</guid>
      <description>&lt;p&gt;golang.tokyo #13の参加メモ。今回のgolang.tokyoはgomobileハンズオンだった。&#xA;自分は今回半分運営お手伝いとして参加していて、前半にあった技術の説明は聴けていないので、ハンズオンでデモアプリを動かすまでに必要だったことをメモしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]go-chiで作ったREST APIの定義からMarkdownやJSONを動的に出力する</title>
      <link>https://budougumi0617.github.io/2018/03/11/go-chi-generates-routing-map/</link>
      <pubDate>Sun, 11 Mar 2018 19:37:16 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/03/11/go-chi-generates-routing-map/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/go-chi/chi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/go-chi/chi&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;go-chi/chi&lt;/code&gt;はGolangのWebサーバを作成するときに使うシンプルなHTTPルータ。&lt;br&gt;&#xA;Swagger定義ではないが、ルーティングの設定をMarkdownやJSONで動的に出力することができたのでそのメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCPハンズオン( #CloudStudyJam )に参加した</title>
      <link>https://budougumi0617.github.io/2018/03/05/gcp-cloud-study-jam/</link>
      <pubDate>Mon, 05 Mar 2018 13:11:11 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/03/05/gcp-cloud-study-jam/</guid>
      <description>&lt;p&gt;今年から自己学習でGCPを触り始めている。&#xA;ちょうど土曜日にGCPのハンズオンに開催されたので、参加してきた。以下ハンズオン内容と自分メモ。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://www.meetup.com/ja-JP/gdg-tokyo-jp/events/248338420/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.meetup.com/ja-JP/gdg-tokyo-jp/events/248338420/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;DMM New Office&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018/03/03(土) 13:00 〜 17:00&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会費&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1,000円&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GCP初めて触る人向けハンズオン&lt;/li&gt;&#xA;&lt;li&gt;QwikLabs（e-ラーニングサイト）のチュートリアルを使ってGCPの基本サービスを学ぶ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://google.qwiklabs.com/focuses/5318&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;仮想マシンの作成&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://google.qwiklabs.com/focuses/5322&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Launcher を使用したサービスの プロビジョニング&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://google.qwiklabs.com/focuses/6988&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;永続ディスクの作成&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://google.qwiklabs.com/focuses/5689&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weather Data in BigQuery&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;当日以内（24時間以内なのかも）にEssentialsの残りの内容の学習を終えるとQwikLabが1ヶ月無料&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://google.qwiklabs.com/quests/23&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCP Essentials&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;BiqQueryでお金を溶かさないTips&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://google.qwiklabs.com/quests/29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes in the Google Cloud&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;ハンズオン内容&#34;&gt;ハンズオン内容&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://qwiklabs.com/?locale=ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QwikLabs&lt;/a&gt;はAWS、GCPの教材があるe-ラーニングサイト。&lt;br&gt;&#xA;チュートリアルごとに使い捨てのGCPアカウントなどを作成して学習することができる。そこそこ翻訳済みのチュートリアルも多い。&lt;br&gt;&#xA;今回のハンズオンでは&#xA;&lt;a href=&#34;https://google.qwiklabs.com/quests/23&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCP Essentials&lt;/a&gt;の中から３つ、それとは別Bigqueryのチュートリアルの合計4つを行った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]Goならわかるシステムプログラミングを読んだ</title>
      <link>https://budougumi0617.github.io/2018/02/26/review-go-system-programming/</link>
      <pubDate>Mon, 26 Feb 2018 08:56:25 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/26/review-go-system-programming/</guid>
      <description>&lt;p&gt;先日「Goならわかるシステムプログラミング」を読み終わった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Goならわかるシステムプログラミング（紙書籍）&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://www.lambdanote.com/products/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.lambdanote.com/products/go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;この本は元々ASCII.jpで連載されていた同連載を加筆修正して書籍化したものだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 1.10 Release Party in Tokyo参加メモ #go110party</title>
      <link>https://budougumi0617.github.io/2018/02/22/go110party/</link>
      <pubDate>Thu, 22 Feb 2018 13:48:52 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/22/go110party/</guid>
      <description>&lt;p&gt;Go1.10のリリースパーティ@googleに参加したのでその参加メモ。&#xA;Go1.10はGo1.9から半年ぶりのリリース&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://gocon.connpass.com/event/78128/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gocon.connpass.com/event/78128/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Google Tokyo&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018/02/20(火) 19:00 〜 22:00&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;whats-new-go110&#34;&gt;What&amp;rsquo;s new Go1.10?&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://twitter.com/tenntenn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tenntenn&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Goならわかるシステムプログラミング]libcontainerで実装したLinuxコンテナを起動するためのDockerfile</title>
      <link>https://budougumi0617.github.io/2018/02/15/dockerfile-for-libcontainer/</link>
      <pubDate>Thu, 15 Feb 2018 08:33:14 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/15/dockerfile-for-libcontainer/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Goならわかるシステムプログラミング ― 第20回 Go言語とコンテナ&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;http://ascii.jp/elem/000/001/502/1502967/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://ascii.jp/elem/000/001/502/1502967/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Goならわかるシステムプログラミングの中で、GoとlibcontainerライブラリでLinuxコンテナを実装する回があるのだが、&#xA;実装したコンテナはLinux上でしか&lt;code&gt;go build&lt;/code&gt;できないし、起動もできなかった。VirtualBoxなどでも良いが、Dockerで環境を用意するようにした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]Google Kubernetes Engineのチュートリアルをやるときに注意すること</title>
      <link>https://budougumi0617.github.io/2018/02/12/gcp-bookshelf-on-kubernetes-engine/</link>
      <pubDate>Mon, 12 Feb 2018 08:04:35 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/12/gcp-bookshelf-on-kubernetes-engine/</guid>
      <description>&lt;p&gt;Google Cloud Platform(GCP)のKubernetes Engine(GKE)でKubernetes(k8s)を動かしたいと以下のチュートリアルを始めた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCPUG Tokyo Container Builder Day February 2018 #gcpug 参加メモ</title>
      <link>https://budougumi0617.github.io/2018/02/05/gcpug-container-builder-day/</link>
      <pubDate>Mon, 05 Feb 2018 19:08:24 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/05/gcpug-container-builder-day/</guid>
      <description>&lt;p&gt;今年はGoogle Cloud Platform(GCP)を使ってみようと思っているので、&#xA;&lt;a href=&#34;https://gcpug.jp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCPUG&lt;/a&gt;の勉強会に参加してきた。&lt;br&gt;&#xA;02/05はGoogle Container Builder(GCB)の話だった。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://gcpug-tokyo.connpass.com/event/75961/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gcpug-tokyo.connpass.com/event/75961/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;六本木ヒルズ 森タワー 18F メルカリ&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018/02/05(月) 19:00 〜 21:30&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ハッシュタグ&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://twitter.com/search?q=%23gcpug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#gcpug&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Google Cloud BuilderはシンプルなコンテナーイメージをビルドするGCPのサービス&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://cloud.google.com/container-builder/?hl=ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.google.com/container-builder/?hl=ja&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;１日120分も無料でビルドできる&lt;/li&gt;&#xA;&lt;li&gt;シンプルにコンテナをビルドするだけ。GCP使っていなかったり、テストや複雑なビルドをしたいならば他のCIのほうが良いかも&lt;/li&gt;&#xA;&lt;li&gt;ビルドの1ステップ1ステップをステップごとに異なるビルド用のコンテナの上で&lt;code&gt;docker run&lt;/code&gt;していることを理解してないとハマる&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/cloud-builders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/GoogleCloudPlatform/cloud-builders&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;GCPのドキュメントは基本的にAPIリファレンスを読むとわかりやすい。人間用のドキュメントを読んでいてもあまりわからない。&lt;/li&gt;&#xA;&lt;li&gt;GCPUGのGCPノウハウは以下のリポジトリにある&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/gcpug/nouhau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/gcpug/nouhau&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;もっと話したい人はGCPUG Slack #g-tools_jaチャンネルで&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://gcpug.jp/join&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gcpug.jp/join&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;cloud-tools-introduction-by-sinmetal&#34;&gt;Cloud Tools Introduction by sinmetal&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://goo.gl/6WVrR5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://goo.gl/6WVrR5&lt;/a&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://twitter.com/sinmetal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sinmetal&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]gRPC GatewayでgRPCに対するREST APIを自動生成する</title>
      <link>https://budougumi0617.github.io/2018/02/03/grpc-gateway-for-rest-api/</link>
      <pubDate>Sat, 03 Feb 2018 14:52:19 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/03/grpc-gateway-for-rest-api/</guid>
      <description>&lt;p&gt;gRPCで作ったAPIは通常REST APIからコールできない。&lt;br&gt;&#xA;&lt;code&gt;grpc-ecosystem/grpc-gateway&lt;/code&gt;を使うとgRPC APIに対するREST APIのリバースプロクシサーバのコードが自動生成出来る。&#xA;Protocol BufferにREST用の定義を追加して&lt;code&gt;grpc-ecosystem/grpc-gateway&lt;/code&gt;を試してみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[k8s]Cloud Native Developers JP 第3回勉強会 #cndjp3 参加メモ</title>
      <link>https://budougumi0617.github.io/2018/02/03/kubernetes-with-availability-cndjp3/</link>
      <pubDate>Sat, 03 Feb 2018 13:31:14 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/03/kubernetes-with-availability-cndjp3/</guid>
      <description>&lt;p&gt;いつも楽しく学ばせていただいているオラクル早川さん主催のcndjp。&#xA;今回は「Kubernetesで実現する高可用性システム」というテーマでKubernetes(k8s)と可用性について、ハンズオンでは実際にk8sとApache Kafkaを使った構成に対して、chaoskubeによるカオスエンジニアリングを行った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redash Meetup #0.1 - Redash 初心者向けハンズオン #redashmeetup</title>
      <link>https://budougumi0617.github.io/2018/01/31/redashmeetup-hands-on/</link>
      <pubDate>Wed, 31 Jan 2018 14:06:34 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/31/redashmeetup-hands-on/</guid>
      <description>&lt;p&gt;Redash Meetupに参加して、Redashについて学んできた。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://redash-meetup.connpass.com/event/75423/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://redash-meetup.connpass.com/event/75423/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;株式会社ココラブル&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018/01/30(火) 19:00 〜 22:00&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ハッシュタグ&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://twitter.com/search?q=%23redashmeetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#redashmeetup&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Docker環境さえあればすぐにハンズオンを開始できる。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/kakakakakku/redash-hands-on&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/kakakakakku/redash-hands-on&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;基本的な操作を2時間で学習することが出来た！&#xA;&lt;ul&gt;&#xA;&lt;li&gt;クエリを作ってグラフを作る&lt;/li&gt;&#xA;&lt;li&gt;グラフをダッシュボードに貼る&lt;/li&gt;&#xA;&lt;li&gt;しきい値を作って外部サービス（Slack）に通知を流す&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ちょっとした便利な使い方、Tipsも教えていただけた&lt;/li&gt;&#xA;&lt;li&gt;ハンズオンリポジトリはSQLの勉強にも使えるかもしれない？？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;データソースにサンプルデータが山ほど入っているので、いろいろクエリが作れる&lt;/li&gt;&#xA;&lt;li&gt;Redashのクエリ編集画面は補完も効くし、構文エラーもすぐわかる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;redashとは&#34;&gt;Redashとは&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://redash.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://redash.io/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]golang.tokyo #12 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/01/31/golangtokyo-12/</link>
      <pubDate>Wed, 31 Jan 2018 09:30:08 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/31/golangtokyo-12/</guid>
      <description>&lt;p&gt;golang.tokyo #12にブログ枠で参加した。&lt;br&gt;&#xA;今回はテーマ：『スタートアップ・新規事業におけるGo』で本発表2名、LT3名という内容だった。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://golangtokyo.connpass.com/event/76540/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://golangtokyo.connpass.com/event/76540/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;株式会社ネクストカレンシー（DMMグループセミナールーム）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2018/01/29(月) 19:10 〜 22:00&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Toggeter&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://togetter.com/li/1194466&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://togetter.com/li/1194466&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;next-currencyとgaego&#34;&gt;Next CurrencyとGAE/Go&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/sonatard/next-currency-gaego&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/sonatard/next-currency-gaego&lt;/a&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://twitter.com/sonatard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sonatard&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]gomockを使ったgRPCのテスト</title>
      <link>https://budougumi0617.github.io/2018/01/21/try-gomock-on-grpc-go/</link>
      <pubDate>Sun, 21 Jan 2018 19:21:28 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/21/try-gomock-on-grpc-go/</guid>
      <description>&lt;p&gt;gRPCの勉強というより、gomockの勉強と言ったほうが良いかもしれないが、&#xA;&lt;code&gt;protoc&lt;/code&gt;コマンドで生成した&lt;code&gt;gRPC&lt;/code&gt;コードをモックしてテストする方法を確かめた。&#xA;せっかくなので今回は自分でProtocol Bufferの定義からやった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda Go早めぐり(LambdaContext, Logging, Error...)</title>
      <link>https://budougumi0617.github.io/2018/01/17/hello-aws-lambda-go/</link>
      <pubDate>Wed, 17 Jan 2018 07:33:10 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/17/hello-aws-lambda-go/</guid>
      <description>&lt;p&gt;AWS LambdaでGoが正式にサポートされた！！&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;AWS Lambda Supports Go&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/about-aws/whats-new/2018/01/aws-lambda-supports-go/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://aws.amazon.com/jp/about-aws/whats-new/2018/01/aws-lambda-supports-go/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;aws/aws-lambda-go&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://github.com/aws/aws-lambda-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/aws/aws-lambda-go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;2018/01/17現在、日本語版はまだだが、英語のDocsは公開されているので、それを基にGoでLambdaを動かす。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]世界のエリートがやっている 最高の休息法を読んだ</title>
      <link>https://budougumi0617.github.io/2018/01/16/review-the-best-way-to-rest/</link>
      <pubDate>Tue, 16 Jan 2018 08:50:31 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/16/review-the-best-way-to-rest/</guid>
      <description>&lt;p&gt;睡眠・休息時間のカイゼン・効率化活動の一環。こちらも会社の人が良いとおっしゃっていたので読んでみた。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01J2ZLLN8&amp;linkId=0a708d9d86dc30424cf21a5da24f0a3e&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/01/10/review-sleep-revolution/&#34;&gt;前回読んだ睡眠本&lt;/a&gt;よりもこちらはより実践的なHow To本だった。&#xA;すぐに効果が出る類のものではないが、少なくとも自分は寝付きが良くなった気もする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]gRPC Basics: GoからgRPCのストリーミングRPCを理解する</title>
      <link>https://budougumi0617.github.io/2018/01/14/grpc-basics-go/</link>
      <pubDate>Sun, 14 Jan 2018 10:47:23 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/14/grpc-basics-go/</guid>
      <description>&lt;p&gt;gRPC-goのクイックスタート、サーバーレリフレクションを試したので、次はgRPC Basics: Goをやってみた。クイックスタートを終えているので、そちらで学習できている部分（環境構築手順、基本的な概念）には触れない。&#xA;クイックスタートでは出てこなかったStreaming RPCについてまとめた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]スリープレボリューションを読んだ</title>
      <link>https://budougumi0617.github.io/2018/01/10/review-sleep-revolution/</link>
      <pubDate>Wed, 10 Jan 2018 07:25:06 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/10/review-sleep-revolution/</guid>
      <description>&lt;p&gt;睡眠時間のカイゼン・効率化が出来ないかと思い、会社の人が良いとおっしゃっていたのもあったので読んだ。&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N2NJLDW&amp;linkId=16e5d550437ab5ff650387c9500a4b21&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;&#xA;&lt;p&gt;自分はいわゆる外資系や商社をイメージする働き方はしたことがないが、8時出社24時退社くらいの勢いで働いたときもあって、&#xA;睡眠をおろそかにしていた。今はそんなことはないが睡眠導入剤を使っていた時期もあった。ある程度睡眠時間を用意しても&#xA;日中うとうとすることもあって、睡眠をもっとうまく取る方法がないか考えていたので読んでみようと思った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo内で古いURLから新しいURLにリダイレクトさせる</title>
      <link>https://budougumi0617.github.io/2018/01/05/redirect-url-by-aliases-in-hugo/</link>
      <pubDate>Fri, 05 Jan 2018 09:12:22 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/05/redirect-url-by-aliases-in-hugo/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HugoでThemeを変更した時に記事のURLが変わってしまった。&lt;/li&gt;&#xA;&lt;li&gt;該当記事のMarkdownのFront matterに&lt;code&gt;aliases&lt;/code&gt;を設定しておくと、昔のURLにリダイレクトページが自動生成される。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Hugo | URL Management - Aliases&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://gohugo.io/content-management/urls/#aliases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gohugo.io/content-management/urls/#aliases&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go][gRPC]Server Reflection Tutorialをやってみた</title>
      <link>https://budougumi0617.github.io/2018/01/04/server-reflection-tutorial/</link>
      <pubDate>Thu, 04 Jan 2018 08:54:30 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/04/server-reflection-tutorial/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2018/01/01/hello-grpc-go/&#34;&gt;前回&lt;/a&gt;のgRPCのクイックスタートをやったときにサーバーリフレクションのことがよくわからなかった。サーバーリフレクションにもチュートリアルがあったのでやってみた。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サーバーリフレクションを使うと実行中のサーバからプロトコルバッファーの定義を取得したり、実行出来るようになる。&lt;/li&gt;&#xA;&lt;li&gt;Goで利用するには、&lt;code&gt;grpc.NewServer()&lt;/code&gt;のあとで通常のプロトコルバッファーの&lt;code&gt;Register&lt;/code&gt;をした後&lt;code&gt;reflection.Register&lt;/code&gt;メソッドを呼ぶだけ&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/Documentation/server-reflection-tutorial.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;チュートリアル&lt;/a&gt;の手順通りに行うとc++のクライアントからサーバのプロトコルバッファーを確認することができる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;server-reflectionとは&#34;&gt;Server Reflectionとは&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;GRPC Server Reflection Protocol&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/server-reflection.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/blob/master/doc/server-reflection.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]SOFT SKILLSを読んだ</title>
      <link>https://budougumi0617.github.io/2018/01/03/review-soft-skills/</link>
      <pubDate>Wed, 03 Jan 2018 16:37:37 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/03/review-soft-skills/</guid>
      <description>&lt;p&gt;今更ながらSOFT SKILLSを読んだので、簡単にメモしておく&lt;/p&gt;&#xA;&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01GDS0994&amp;linkId=68ae87348fff65b9f5cf64ca4c162a96&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;&#xA;&lt;p&gt;今自分が悩んでいるところに関連する話題があったので今読んでよかった（むしろもっと早く読むべきだった）。&lt;br&gt;&#xA;「プロのエンジニアになること」を目指したときのプロフェッショナル像と、金銭的な面、精神的な面、肉体的な面も含め、そこにたどり着くための手順が網羅されており定期的に読み返したい。&lt;br&gt;&#xA;エンジニアマインド的な本は「&#xA;&lt;a href=&#34;http://amzn.to/2AaukOJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;プログラマーまだまだ現役続行&lt;/a&gt;」、「&#xA;&lt;a href=&#34;http://amzn.to/2AbcJpO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;アプレンティスシップ・パターン&lt;/a&gt;」などを昔に読んだっきりだったので、今またこのような本を読めてよかった。&lt;br&gt;&#xA;最近同系統で「&#xA;&lt;a href=&#34;http://amzn.to/2lKrBpM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ベタープログラマー&lt;/a&gt;」も発刊されたので、合わせて読んでおきたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]gRPCのGo Quick Startをやってみた。</title>
      <link>https://budougumi0617.github.io/2018/01/01/hello-grpc-go/</link>
      <pubDate>Mon, 01 Jan 2018 17:30:50 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/01/hello-grpc-go/</guid>
      <description>&lt;p&gt;gRPCについて理解を始めるため、gRPCのクイックスタートをやったのでメモしておく。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Go Quick Start&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://grpc.io/docs/quickstart/go.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://grpc.io/docs/quickstart/go.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ちなみに今回行ったのは、&lt;code&gt;Go&lt;/code&gt;のクイックスタートだが、公式には以下の言語のクイックスタートが用意されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2017年振り返り</title>
      <link>https://budougumi0617.github.io/2017/12/30/retrospective-2017/</link>
      <pubDate>Sat, 30 Dec 2017 19:05:30 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/30/retrospective-2017/</guid>
      <description>&lt;p&gt;2017年を振り返ってみる。GitHubベースの振り返りは別記事にまとめた。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2017/12/27/retrospective-on-github/&#34;&gt;2017年振り返り(GitHub編)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;主な出来事&#34;&gt;主な出来事&lt;/h1&gt;&#xA;&lt;h2 id=&#34;転職した&#34;&gt;転職した&lt;/h2&gt;&#xA;&lt;p&gt;人生で初めて転職した。&lt;br&gt;&#xA;新卒から6年勤めていた精密機器メーカー子会社の所謂SIerからクラウド会計・人事労務ソフトのWeb系ベンチャーに転職した。&lt;br&gt;&#xA;2016年に30歳を迎えたのだが30代をどうやって生きるか考えたとき、平日の大半の時間を占める就業時間中にもっとコードを書くことを選択したかった。&lt;br&gt;&#xA;前職最後の仕事が&lt;code&gt;C#&lt;/code&gt;のデスクトップアプリ開発だった縁で現在の会社に拾っていただくことができた。&lt;br&gt;&#xA;ポジションとしてはデスクトップアプリエンジニアなのだが、クラウド側のAPI部分についても開発に携わらせてもらっている。入社月に二桁万円無駄にする大失敗とかやったりした…&lt;br&gt;&#xA;Railsのコードも書いたり、WindowsストアにDesktop Bridgeアプリを公開したり、&lt;code&gt;Xamarin.Mac&lt;/code&gt;によるデスクトップアプリの開発もすることができた。&lt;br&gt;&#xA;ただ、求められているパフォーマンスは全然出せなかった。これに関しては完全に自分のスキルに自惚れがあって、ドメイン知識を利用した既存実装の拡張、あるいはシステムコールなどのコアな知識を要求されたとき、&#xA;あまりに役立たずだった。このあたりは新しいことに挑戦するたびに同じ状況になる。なので、「その知識を習得する」などの解決方法も必要なのだが、「最適解を求めるためのアプローチ」や「単純なコーディング速度の向上（によってトライアンドエラー回数を増やす）」という改善も必要になのかなと思っている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2017年振り返り(GitHub編)</title>
      <link>https://budougumi0617.github.io/2017/12/27/retrospective-on-github/</link>
      <pubDate>Wed, 27 Dec 2017 09:41:01 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/27/retrospective-on-github/</guid>
      <description>&lt;p&gt;今年を振り返るにあたって、まずGitHubの活動を振り返ってみた。&lt;br&gt;&#xA;個々のリポジトリへの記載を一年の活動の振り返りに含めるのも何か違和感があったので、ひとつの記事としてまとめておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]MacのVSCodeでGoのデバッグを試すと&#34;unexpected fault address...&#34;エラーになる</title>
      <link>https://budougumi0617.github.io/2017/12/24/activate-delve-on-mac/</link>
      <pubDate>Sun, 24 Dec 2017 13:11:28 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/24/activate-delve-on-mac/</guid>
      <description>&lt;p&gt;Macの&lt;code&gt;Visual Studio Code&lt;/code&gt;(以下&lt;code&gt;VSCode&lt;/code&gt;)を使って&lt;code&gt;Go&lt;/code&gt;のコードの中で&lt;code&gt;Syscall&lt;/code&gt;が呼ばれるまでをデバッグで確認したかったが、ステップインを使うと、&lt;code&gt;unexpected fault address...&lt;/code&gt;で失敗していた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[k8s]Cloud Native Developers JP 第2回勉強会 参加メモ #cndjp2</title>
      <link>https://budougumi0617.github.io/2017/12/18/kubernetes-in-production-cndjp2/</link>
      <pubDate>Mon, 18 Dec 2017 09:00:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/18/kubernetes-in-production-cndjp2/</guid>
      <description>&lt;p&gt;第2回Cloud Native Developers JP(cndjp)のハンズオンに参加し、&lt;code&gt;Kubernetes&lt;/code&gt;(以下k8s)について勉強してきた。&lt;br&gt;&#xA;第1回は最初ということもあり、基本的な用語と、ローカルのk8sクラスター環境でポッドを起動し、スケールさせてみるレベルの内容だった。&lt;br&gt;&#xA;&#xA;&lt;a href=&#34;https://budougumi0617.github.io/2017/11/23/cndjp1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Native Developers JP 第1回勉強会 参加メモ #cndjp1&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]golang.tokyo #11 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2017/12/12/golangtokyo-11/</link>
      <pubDate>Tue, 12 Dec 2017 09:39:32 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/12/golangtokyo-11/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://golangtokyo.connpass.com/event/72986/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://golangtokyo.connpass.com/event/72986/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TECH PLAY SHIBUYA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2017/12/11(月) 19:00 〜 21:50&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Toggeter&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://togetter.com/li/1180514&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://togetter.com/li/1180514&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;闇のbashをgoに置き換える技術nashiox&#34;&gt;闇のBashをGoに置き換える技術(nashiox)&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://speakerdeck.com/nashiox/golang-dot-tokyo-number-11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/nashiox/golang-dot-tokyo-number-11&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;怖くて触れないけどなぜか動いているBashスクリプト(10ファイル2128行)をGoに置き換えた。&lt;/li&gt;&#xA;&lt;li&gt;データ加工、ダンプ、インポートを行っていたスクリプト。GNU Parallelも使っていたりしたが、そのへんはgroutineで。&lt;/li&gt;&#xA;&lt;li&gt;Goならば&lt;code&gt;os/exec&lt;/code&gt;によるスクリプト実行やbashライクの書き方を許容しながら少しずつ移管できる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;たしかに&#xA;&lt;a href=&#34;https://golang.org/pkg/os/exec/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;os/exec&lt;/code&gt;&lt;/a&gt;で絡めて段階的にアプローチしていくの良さそう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Go]CircleCI2.0&#43;Codecovで作るGo学習環境</title>
      <link>https://budougumi0617.github.io/2017/12/10/setup-study-go-learning-environment/</link>
      <pubDate>Sun, 10 Dec 2017 08:13:12 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/10/setup-study-go-learning-environment/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;http://amzn.to/2kNkTlZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Goならわかるシステムプログラミング&lt;/a&gt;の写経、練習問題を解くにあたり、&lt;code&gt;Go&lt;/code&gt;の軽いCI環境を作った。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;自己学習や写経だと、レビューしてもらう(第三者の評価を得る)機会がない。それでも、自分の書いたコードに最低限の品質担保をする。&#xA;基本的にPublicリポジトリならば全て無料。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Xamarin.Mac]NStextFieldにテキストが入力されるたびに変更を検出する</title>
      <link>https://budougumi0617.github.io/2017/11/24/xamarin-nstextfield-delegate/</link>
      <pubDate>Fri, 24 Nov 2017 09:25:47 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/11/24/xamarin-nstextfield-delegate/</guid>
      <description>&lt;p&gt;知っているとすぐ出来るけど、知らないとちょっと時間がかかるシリーズ。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Xamarin.Mac&lt;/code&gt;で&lt;code&gt;C#&lt;/code&gt;側で文字入力のイベントを検出する&lt;/li&gt;&#xA;&lt;li&gt;その1。&lt;code&gt;NSTextField.value&lt;/code&gt;への&lt;code&gt;string&lt;/code&gt;のプロパティをデータバインドする&lt;/li&gt;&#xA;&lt;li&gt;その2。&lt;code&gt;NSTextFieldDelegate&lt;/code&gt;を実装したクラスを&lt;code&gt;NSTextField.Delegate&lt;/code&gt;に紐付けておく&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;nstextfieldやnssecuretextfieldの変更を検知したい&#34;&gt;&lt;code&gt;NStextField&lt;/code&gt;や&lt;code&gt;NSSecureTextField&lt;/code&gt;の変更を検知したい。&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Xamarin.Mac&lt;/code&gt;で&lt;code&gt;NSTextField&lt;/code&gt;や&lt;code&gt;NSSecureTextField&lt;/code&gt;などに対する文字列入力イベントを検知し、処理を行う。その1のほうが直感的だしシンプル。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Native Developers JP 第1回勉強会 参加メモ #cndjp1</title>
      <link>https://budougumi0617.github.io/2017/11/23/cndjp1/</link>
      <pubDate>Thu, 23 Nov 2017 16:31:12 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/11/23/cndjp1/</guid>
      <description>&lt;p&gt;Cloud Native Developers JP(cndjp)のハンズオンに参加し、&lt;code&gt;Kubernetes&lt;/code&gt;について勉強してきた。&#xA;クラウド素人の自分でもローカルにクラスター構成を作成、アプリのスケールイン、スケールアウトまで試せたので良かった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Conference 2017 Autumn参加メモ #gocon</title>
      <link>https://budougumi0617.github.io/2017/11/09/gocon2017-autumn/</link>
      <pubDate>Thu, 09 Nov 2017 01:27:48 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/11/09/gocon2017-autumn/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;URL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://gocon.connpass.com/event/66615/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gocon.connpass.com/event/66615/&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;会場&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;株式会社メルカリ&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;日時&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2017/11/05(日) 09:00 〜 17:30&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;toggeter&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&#xA;&lt;a href=&#34;https://togetter.com/li/1168291&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://togetter.com/li/1168291&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;&#xA;&lt;p&gt;自分は&#xA;&lt;a href=&#34;http://www.gopl.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gopl&lt;/a&gt;の練習問題や簡単なツールしかGoで作ったことがないので、サービス・アプリケーション構築におけるGoのプラクティスや利用OSSの知見を聞くことが出来て非常に良かった。聞いたOSS、サービスのリソースはだいたい探せたので、復習がてらひとつずつ確認しておきたい。&#xA;また、多くの発表者の方がスライドを英語で書かれており、英語弱者の自分としては必要なのは「プログラミング言語」だけではないなと痛感した。&#xA;贅沢にもおみやげにGopher Tシャツまで頂いた。Googleさん、Mercariさん、運営のみなさま、Gopherのみなさまありがとうございました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHubのタグに連動して、.NETStandard1.6のNugetパッケージを自動リリースする。</title>
      <link>https://budougumi0617.github.io/2017/10/13/publish-nupkg-by-appveyor/</link>
      <pubDate>Fri, 13 Oct 2017 17:06:29 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/10/13/publish-nupkg-by-appveyor/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;.NET Standard1.6&lt;/code&gt;ベースでNugetパッケージを作っています。&lt;code&gt;GitHub&lt;/code&gt;でリリースしたとき(&lt;code&gt;git tag&lt;/code&gt;をプッシュしたとき)、自動的に&#xA;&lt;a href=&#34;https://www.nuget.org/.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nuget.org&lt;/a&gt;上のパッケージが更新されるようにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[書評]Goプログラミング実践入門　標準ライブラリでゼロからWebアプリを作る</title>
      <link>https://budougumi0617.github.io/2017/10/12/go-web-programing/</link>
      <pubDate>Thu, 12 Oct 2017 08:37:20 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/10/12/go-web-programing/</guid>
      <description>&lt;p&gt;表題の本を読み終わった。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;http://amzn.to/2g2Op1E&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Goプログラミング実践入門　標準ライブラリでゼロからWebアプリを作る&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前提&#34;&gt;前提&lt;/h1&gt;&#xA;&lt;p&gt;自分の&lt;code&gt;Go&lt;/code&gt;の経験は以下の通り。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;http://amzn.to/2ycX1uH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;プログラミング言語Go&lt;/a&gt;は通読。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Go&lt;/code&gt;のプログラミング経験はプログラミング言語Goの練習問題くらい（9割くらいは解いた）&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/budougumi0617/gopl/tree/master/ch04/ex14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Go&lt;/code&gt;で&lt;code&gt;REST&lt;/code&gt;叩いてWebページ表示したり&lt;code&gt;JSON/XML&lt;/code&gt;パースしたり&lt;/a&gt;はやった。&lt;/li&gt;&#xA;&lt;li&gt;上記の本が&lt;code&gt;1.6&lt;/code&gt;くらいまでの内容なので、&lt;code&gt;context&lt;/code&gt;とかはまだわかっていない。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;1.7&lt;/code&gt;以降はみんGoやブログで補完している。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;&#xA;&lt;p&gt;Goを使ったRESTの書き方と、必要最低限のデータの取扱方法が載っているので、GoのWebプログラミングの取っ掛かりとしてはよかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rspec内でテスト対象のControllerのメソッドの戻り値をスタブする</title>
      <link>https://budougumi0617.github.io/2017/09/20/rspec-access-controller/</link>
      <pubDate>Wed, 20 Sep 2017 08:52:42 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/09/20/rspec-access-controller/</guid>
      <description>&lt;p&gt;&lt;code&gt;C#&lt;/code&gt;では対象インスタンスのメソッドの挙動を変えることは出来ないので、別の手段を探していたのだが、&lt;code&gt;ruby&lt;/code&gt;では出来た。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RSpec書いたControllerSpecの中でテスト対象のコントローラのメソッドの戻り値をモックオブジェクトに変えたかった。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ControllerExampleGroup&lt;/code&gt;で定義されている&lt;code&gt;controller&lt;/code&gt;からテスト中のコントローラインスタンスを操作することが可能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;http://www.rubydoc.info/gems/rspec-rails/RSpec/Rails/ControllerExampleGroup#controller-instance_method&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Module: RSpec::Rails::ControllerExampleGroup#controller&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>docker-compose上のRailsのデバッグを行う</title>
      <link>https://budougumi0617.github.io/2017/09/02/debug-rails-on-docker/</link>
      <pubDate>Sat, 02 Sep 2017 12:16:06 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/09/02/debug-rails-on-docker/</guid>
      <description>&lt;p&gt;Rails本の写経を&lt;code&gt;docker-compose&lt;/code&gt;で行なったときのTips。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt;で作ったRubyOnRailsコンテナで&lt;code&gt;binding.pry&lt;/code&gt;によるデバッグを行えるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xmarin.Macアプリでネイティブメソッドの動的ロードを含むビルドを行う</title>
      <link>https://budougumi0617.github.io/2017/08/04/xamarin-link-flags/</link>
      <pubDate>Fri, 04 Aug 2017 08:59:08 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/08/04/xamarin-link-flags/</guid>
      <description>&lt;p&gt;ネイティブライブラリの動的ロードを含む&lt;code&gt;Xamarin.Mac&lt;/code&gt;アプリを作ろうとしたら、ビルドエラーに遭遇しました。&lt;/p&gt;&#xA;&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;MMP : error MM5109: Native linking failed with error code 1&lt;/code&gt;というビルドエラーを解決したい。&lt;/li&gt;&#xA;&lt;li&gt;プロジェクトオプション-「Mac Build」タブ-「追加のmmp引数」に「&lt;code&gt;--link_flags=&amp;quot;-Wl,-undefined,dynamic_lookup&amp;quot;&lt;/code&gt;」と設定する。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Xamarin.Mac&lt;/code&gt;アプリのプロジェクトに、動的ロードで解決するメソッドが含まれていてもビルド出来るようになる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;mmp--error-mm5109-native-linking-failed-with-error-code-1&#34;&gt;&lt;code&gt;MMP : error MM5109: Native linking failed with error code 1&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Xamarin.Mac&lt;/code&gt;プロジェクトをビルドするとき、&lt;code&gt;C#&lt;/code&gt;のアプリをネイティブアプリに変換する処理が走ります。このとき、&lt;code&gt;C#&lt;/code&gt;の中でネイティブライブラリを動的にロードしているようなプロジェクトは以下のようなエラーでビルドが止まることがあります。&lt;code&gt;_C_FooFunction&lt;/code&gt;、&lt;code&gt;_C_BarFunction&lt;/code&gt;は動的にロードするライブラリの中で宣言されているメソッドです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xamarin.Macプロジェクトのオプションにある「追加のmmp引数」に指定できる値</title>
      <link>https://budougumi0617.github.io/2017/07/26/xamarin-mmp/</link>
      <pubDate>Wed, 26 Jul 2017 22:24:00 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/07/26/xamarin-mmp/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Visual Studio for Mac&lt;/code&gt;で&lt;code&gt;Cocoa App&lt;/code&gt;のプロジェクトをビルドするとき、「&lt;code&gt;追加のmmp引数&lt;/code&gt;」を設定しておくと&lt;code&gt;.app&lt;/code&gt;ファイルを作成するときに詳細なオプションが渡せます。&lt;code&gt;.csproj&lt;/code&gt;ファイル内では&lt;code&gt;&amp;lt;MonoBundlingExtraArgs&amp;gt;&lt;/code&gt;の属性です。指定できる引数は以下のコマンドで確認することが出来ます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>.NET Standard1.6プロジェクトのCI環境を構築する。</title>
      <link>https://budougumi0617.github.io/2017/07/25/ci-for-dotnet16/</link>
      <pubDate>Tue, 25 Jul 2017 20:46:26 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/07/25/ci-for-dotnet16/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;.NET Standard1.6&lt;/code&gt;ベースで&lt;code&gt;Nuget&lt;/code&gt;パッケージを作っています。開発で利用しているCI環境の構築方法です。実際に利用しているリポジトリは以下になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VS for MacのテストエクスプローラーからXUnit(.NET Core1.1)が実行できない</title>
      <link>https://budougumi0617.github.io/2017/07/17/cannot-execute-xunit/</link>
      <pubDate>Mon, 17 Jul 2017 23:41:03 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/07/17/cannot-execute-xunit/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;Visual Studio for Macから&lt;code&gt;XUnit&lt;/code&gt;プロジェクトのテストが実行できないときは、コンソールから&lt;code&gt;dotnet test&lt;/code&gt;コマンドを実行してみて出力を確認してみます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenCoverでVS2017でビルドした.NETプロジェクトのカバレッジを測る</title>
      <link>https://budougumi0617.github.io/2017/07/13/opencover-to-vs2017/</link>
      <pubDate>Thu, 13 Jul 2017 09:25:36 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/07/13/opencover-to-vs2017/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;&#xA;&lt;p&gt;OpenCoverでVisual Studio2017でビルドした&lt;code&gt;.NET Core/Standard&lt;/code&gt;のプロジェクトのコードカバレッジを計測したいときは、&lt;code&gt;.csproj&lt;/code&gt;ファイルに&lt;code&gt;DebugType&lt;/code&gt;を&lt;code&gt;full&lt;/code&gt;で追加すること。&lt;/p&gt;</description>
    </item>
    <item>
      <title>About me</title>
      <link>https://budougumi0617.github.io/2017/07/11/about-this-site/</link>
      <pubDate>Tue, 11 Jul 2017 10:06:36 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/07/11/about-this-site/</guid>
      <description>&lt;p&gt;普段はTwitterでGoのことをよくつぶやきます。毎週ブログを書いています。&lt;br&gt;&#xA;今までは&#xA;&lt;a href=&#34;http://qiita.com/budougumi0617&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qiita&lt;/a&gt;に書いていましたが、個人ブログで書くことにしました。&lt;/p&gt;&#xA;&lt;h1 id=&#34;about-me&#34;&gt;About Me&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Yoichiro Shimizu&lt;/li&gt;&#xA;&lt;li&gt;1986/06/17&lt;/li&gt;&#xA;&lt;li&gt;ソフトウェアエンジニア&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://github.com/budougumi0617&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://twitter.com/budougumi0617&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;http://qiita.com/budougumi0617&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qiita&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;skills&#34;&gt;Skills&lt;/h1&gt;&#xA;&lt;p&gt;現在は以下の技術を使ってWEBエンジニアをしています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello Hugo</title>
      <link>https://budougumi0617.github.io/2017/06/25/hello-hugo/</link>
      <pubDate>Sun, 25 Jun 2017 20:20:50 +0900</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/06/25/hello-hugo/</guid>
      <description>&lt;p&gt;I got new blog by hugo.&lt;/p&gt;&#xA;&lt;p&gt;知っていれば何てことはない。ただ、知らないとけっこうハマる、そんなことを書いていきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://budougumi0617.github.io/1/01/01/google81dc605883760103/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/1/01/01/google81dc605883760103/</guid>
      <description>google-site-verification: google81dc605883760103.html</description>
    </item>
  </channel>
</rss>
