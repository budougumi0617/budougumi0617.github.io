<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on My External Storage</title>
    <link>https://budougumi0617.github.io/categories/go/</link>
    <description>Recent content in Go on My External Storage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <managingEditor>budougumi[at]gmail.com (budougumi0617)</managingEditor>
    <webMaster>budougumi[at]gmail.com (budougumi0617)</webMaster>
    <lastBuildDate>Fri, 16 Apr 2021 03:38:05 +0900</lastBuildDate>
    
	<atom:link href="https://budougumi0617.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Go]環境変数を使ったテストを書く</title>
      <link>https://budougumi0617.github.io/2021/04/16/setenv_on_test/</link>
      <pubDate>Fri, 16 Apr 2021 03:38:05 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/04/16/setenv_on_test/</guid>
      <description>&lt;p&gt;Goで環境変数を使ってテストを行なうときに便利な関数を紹介する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] stringの比較でヌルポのpanicが発生する（こともある） #横浜Go読書会</title>
      <link>https://budougumi0617.github.io/2021/03/31/go-string-null-pointer-panic/</link>
      <pubDate>Wed, 31 Mar 2021 11:00:23 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/03/31/go-string-null-pointer-panic/</guid>
      <description>&lt;p&gt;誤った並行処理の実装をしていると、&lt;code&gt;string&lt;/code&gt;の比較でもヌルポのセグフォが発生する。&lt;br&gt;
正しく実装していればお目にかかることはないが、とても学びになったのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] go.uber.org/zapでNew Relic logs in contextをするためのライブラリを書き始めた</title>
      <link>https://budougumi0617.github.io/2021/03/21/release_nrzap_for_newrelic_logs_in_context/</link>
      <pubDate>Sun, 21 Mar 2021 10:30:00 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/03/21/release_nrzap_for_newrelic_logs_in_context/</guid>
      <description>&lt;p&gt;&lt;code&gt;uber-go/zap&lt;/code&gt;を使いつつNew Relic Logs in contextを利用するためのライブラリを作り始めた。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/nrzap&#34; data-iframely-url=&#34;//cdn.iframe.ly/2Ijbpvo&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Go1.16で追加されたio#ReadAll関数から読むストリーミング中のバッファ拡張の仕方</title>
      <link>https://budougumi0617.github.io/2021/02/22/update_capacity/</link>
      <pubDate>Mon, 22 Feb 2021 08:00:00 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/02/22/update_capacity/</guid>
      <description>&lt;p&gt;実質Futureさんの記事の引用なんだけれど自分用メモ。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://future-architect.github.io/articles/20210210/index.html&#34; data-iframely-url=&#34;//cdn.iframe.ly/gbhA0jg&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>reviewdogを使ったGitHub Actionsの作り方</title>
      <link>https://budougumi0617.github.io/2021/02/16/how_to_create_reviewdog_actions/</link>
      <pubDate>Tue, 16 Feb 2021 09:00:00 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/02/16/how_to_create_reviewdog_actions/</guid>
      <description>&lt;p&gt;reviewdogを使ったGitHub Actionsを作る過程をメモしておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2021/02/07/release_action_newrelic_segment_lint/&#34;&gt;[Go] 新規追加した関数にNew RelicのSegmentを入れ忘れていたら警告するGitHub Actionsを作った&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Go] 新規追加した関数にNew RelicのSegmentを入れ忘れていたら警告するGitHub Actionsを作った</title>
      <link>https://budougumi0617.github.io/2021/02/07/release_action_newrelic_segment_lint/</link>
      <pubDate>Sun, 07 Feb 2021 00:19:47 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/02/07/release_action_newrelic_segment_lint/</guid>
      <description>&lt;p&gt;Goのアプリで新規関数を含むPull Requset（PR）を作ったとき、New RelicのSegmentをいれてなかったら怒るreviewdogのGitHub Actionsを作った。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/action-newrelic-segment-lint&#34; data-iframely-url=&#34;//cdn.iframe.ly/aLlaE2N&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] まだレビュー中のgerrit上のコードパッチをローカルに取得する</title>
      <link>https://budougumi0617.github.io/2021/01/31/pull_cl_from_gerrit/</link>
      <pubDate>Sun, 31 Jan 2021 15:20:00 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/31/pull_cl_from_gerrit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/dice_zu&#34;&gt;@dice_zu&lt;/a&gt;さんに教えてもらったことメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] ファイルが自動生成コードか判別したい</title>
      <link>https://budougumi0617.github.io/2021/01/22/detect_autogenerated_file/</link>
      <pubDate>Fri, 22 Jan 2021 09:39:25 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/22/detect_autogenerated_file/</guid>
      <description>&lt;p&gt;Goのコードを静的解析するとき、自動生成コードをスキップするためのメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GoのアプリにNew Relic APMを導入する時とても便利なCLIを作った</title>
      <link>https://budougumi0617.github.io/2021/01/17/release_nrseg/</link>
      <pubDate>Sun, 17 Jan 2021 10:00:33 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/17/release_nrseg/</guid>
      <description>&lt;p&gt;GoのWebアプリコードにNew Relic APMでSpan（Segment）を計測するコードを自動挿入するOSSを作った。&lt;br&gt;
New RelicをGoのアプリケーションへ導入するときに利用をオススメする。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/nrseg&#34; data-iframely-url=&#34;//cdn.iframe.ly/HrUY585&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] testing.Mオブジェクトを引数にとる関数をつくるアイデア</title>
      <link>https://budougumi0617.github.io/2021/01/10/use-testing-m-for-obvious-api-design/</link>
      <pubDate>Sun, 10 Jan 2021 00:05:02 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/10/use-testing-m-for-obvious-api-design/</guid>
      <description>&lt;p&gt;ライブラリを設計するときに考えたことのメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PixelaのGo用APIクライアントライブラリを作り始めた #pixela</title>
      <link>https://budougumi0617.github.io/2021/01/03/release_pixela_library/</link>
      <pubDate>Sun, 03 Jan 2021 08:00:27 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2021/01/03/release_pixela_library/</guid>
      <description>&lt;p&gt;GoのPixela APIクライアントライブラリを作り始めた。&lt;br&gt;
最低限自分が今必要なAPIはカバーできたのでpublicに公開した。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/pixela&#34; data-iframely-url=&#34;//cdn.iframe.ly/lYXbTqm&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>TerraformでPixelaのグラフを宣言できるProviderを作った #pixela</title>
      <link>https://budougumi0617.github.io/2020/12/11/terraform_provider_pixela/</link>
      <pubDate>Fri, 11 Dec 2020 09:06:15 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/12/11/terraform_provider_pixela/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pixe.la/ja&#34;&gt;Pixela&lt;/a&gt;のTerraform Providerを作った。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/terraform-provider-pixela&#34; data-iframely-url=&#34;//cdn.iframe.ly/zjuslmC&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] benchstat/go tool traceコマンドをつかったベンチマークの可視化</title>
      <link>https://budougumi0617.github.io/2020/12/04/goroutine_tuning_with_benchmark_benchstat_trace/</link>
      <pubDate>Fri, 04 Dec 2020 19:00:00 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/12/04/goroutine_tuning_with_benchmark_benchstat_trace/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2020/go&#34;&gt;Go Advent Calendar 2020&lt;/a&gt; 4日目の記事となる。&lt;br&gt;
今回はGoでベンチマークの結果を可視化する方法をまとめる。
また、可視化した結果を用いてgoroutine最適化のリファクタリングをしてみる。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2020/go&#34; data-iframely-url=&#34;//cdn.iframe.ly/wxnEBTy?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>自作Terraform Providerのユニットテストの書き方</title>
      <link>https://budougumi0617.github.io/2020/11/17/unittest_for_terraform_custom_provider/</link>
      <pubDate>Tue, 17 Nov 2020 09:30:48 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/17/unittest_for_terraform_custom_provider/</guid>
      <description>&lt;p&gt;公式チュートリアルには載っていなかったので、自作Terraform Providerを作るときのユニットテストの書き方をメモしておく。&lt;br&gt;
なお、最初にコメントしておくと今回の記事はかなり説明を省略しているので各Providerにコミットしたことがあるか自作Providerを作った人じゃないとわからなそう…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] 埋め込みフィールドを使ったラッパー構造体定義</title>
      <link>https://budougumi0617.github.io/2020/11/01/how_to_craete_wrapper/</link>
      <pubDate>Sun, 01 Nov 2020 17:59:43 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/11/01/how_to_craete_wrapper/</guid>
      <description>&lt;p&gt;Goである構造体（例:サードパーティのクライアント）のラッパーを書くときは埋込みフィールドを使うといいよという話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goらしさとは何なのか考える</title>
      <link>https://budougumi0617.github.io/2020/10/23/think_go_way/</link>
      <pubDate>Fri, 23 Oct 2020 09:50:01 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/10/23/think_go_way/</guid>
      <description>&lt;p&gt;「Goらしさ」や「Goに入ってはGoに従え」というけれど、「Goらしい」って一体なんだろう？と考えてみる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>goreleaserとGitHub Actionsを使えばGoのCLIはgit tagをpushするだけでGitHubとHomeBrewに自動リリースできる</title>
      <link>https://budougumi0617.github.io/2020/10/07/auto_release_by_goreleaser/</link>
      <pubDate>Wed, 07 Oct 2020 12:16:30 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/10/07/auto_release_by_goreleaser/</guid>
      <description>&lt;p&gt;goreleaserを使うとGo製のCLIのGitHubのリリースページの更新とHomeBrew Tap用リリースも簡単に行える。&lt;br&gt;
さらにGitHub Actionsを使えばYAMLを2ファイル追加するだけでgit tagに合わせて全自動リリースが可能になる。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/goreleaser/goreleaser-action&#34; data-iframely-url=&#34;//cdn.iframe.ly/N4iA3Tu?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>LeetCodeをローカルで効率よく解くためのGo専用CLIを作った</title>
      <link>https://budougumi0617.github.io/2020/10/06/release_leetgode/</link>
      <pubDate>Tue, 06 Oct 2020 10:42:02 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/10/06/release_leetgode/</guid>
      <description>&lt;p&gt;LeetCodeの問題をGoを使って解いている。&lt;br&gt;
テストファーストで解くためにテストコードも自動生成するCLIを作った。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/budougumi0617/leetgode&#34; data-iframely-url=&#34;//cdn.iframe.ly/oK5Ai7E&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title> #golangtokyo 技術書典9の新刊に「LeetCodeでアルゴリズムとデータ構造エクササイズ」を寄稿しました #技術書典</title>
      <link>https://budougumi0617.github.io/2020/09/18/shoten9_golangtokyo/</link>
      <pubDate>Fri, 18 Sep 2020 09:42:25 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/09/18/shoten9_golangtokyo/</guid>
      <description>&lt;p&gt;技術書典9に&lt;a href=&#34;https://golangtokyo.github.io/&#34;&gt;golang.tokyo&lt;/a&gt;も参加しています。&lt;br&gt;
私は、今回の新刊である「Gopherの休日2020夏」に「LeetCodeでアルゴリズムとデータ構造エクササイズ」という内容で寄稿しました。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/product/5139800384339968&#34; data-iframely-url=&#34;//cdn.iframe.ly/33NuhY3&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] signal.Notifyを使うときは必ずバッファ付きチャネルで利用すること</title>
      <link>https://budougumi0617.github.io/2020/09/06/why_signal_notify_want_buffered_channel/</link>
      <pubDate>Sun, 06 Sep 2020 14:42:42 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/09/06/why_signal_notify_want_buffered_channel/</guid>
      <description>&lt;p&gt;Goで&lt;code&gt;singal.Notify&lt;/code&gt;関数を使うときは必ずバッファありチャネルを利用しなくてはいけない。&lt;br&gt;
なぜバッファなしチャネルを使ってはいけないのかまとめた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/os/signal#Notify&#34;&gt;https://godoc.org/os/signal#Notify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>vim-goを使わず、LSP（gopls）を使ってVimのGo開発環境を構築する</title>
      <link>https://budougumi0617.github.io/2020/07/24/make_vimrc_with_lsp/</link>
      <pubDate>Fri, 24 Jul 2020 07:00:26 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/07/24/make_vimrc_with_lsp/</guid>
      <description>&lt;p&gt;2020年にもなったので、vim-goを卒業して、vim-lsp（gopls）を使ったVimの開発環境を構築する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] gopls 0.4.3で構造体を初期化（&#34;fillstruct&#34;）しようとしても、&#34;No code actions found&#34;とだけ表示される</title>
      <link>https://budougumi0617.github.io/2020/07/18/use_fillstruct_of_goplus_on_vim/</link>
      <pubDate>Sat, 18 Jul 2020 13:50:01 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/07/18/use_fillstruct_of_goplus_on_vim/</guid>
      <description>&lt;p&gt;gopls 0.4.3を使って構造体を初期化（&lt;code&gt;fillstruct&lt;/code&gt;）しようとする（正確に言うとvim-lspで&lt;code&gt;:LspCodeAction&lt;/code&gt;をする）と、&lt;code&gt;No code actions found&lt;/code&gt;と表示されるだけで初期化ができなかった。&lt;br&gt;
0.4.3でも構造体の初期化を行うためのメモ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2020/08/04追記
&lt;ul&gt;
&lt;li&gt;gopls 0.4.4からfillstruct機能がデフォルト有効に戻ったようだ！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/tools/releases/tag/gopls/v0.4.4&#34;&gt;https://github.com/golang/tools/releases/tag/gopls/v0.4.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Fillstruct performance improvements. It is now enabled by default again. (@joshbaum)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>[Go]HTTPレスポンスボディの内容をログに残したい</title>
      <link>https://budougumi0617.github.io/2020/06/21/record_response_body/</link>
      <pubDate>Sun, 21 Jun 2020 19:13:24 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/06/21/record_response_body/</guid>
      <description>&lt;p&gt;GoでHTTPサーバを作成するとき、アクセスログを収集する文脈でレスポンスを記録したくなるだろう。
Middlewareを作成して、HTTPレスポンスをLoggerに出力するやり方をまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go]次世代イメージcimg/goとcircleci/go Orbsを使った2020年版CircleCIの環境構築</title>
      <link>https://budougumi0617.github.io/2020/06/08/circleci_cimg_go_2020/</link>
      <pubDate>Mon, 08 Jun 2020 09:05:58 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/06/08/circleci_cimg_go_2020/</guid>
      <description>&lt;p&gt;2020年になって、CircleCIのCI用の公式ベースイメージは&lt;code&gt;cimg/base&lt;/code&gt;派生になった。&lt;br&gt;
ただ、2020/06/07現在、Go向けの言語別公式ガイドの中身は古いままである。&lt;br&gt;
&lt;code&gt;cimg/go&lt;/code&gt;を使ったGo向けのCircleCIの設定をまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goのtestを理解する - httptestサブパッケージ編</title>
      <link>https://budougumi0617.github.io/2020/05/29/go-testing-httptest/</link>
      <pubDate>Fri, 29 May 2020 12:19:49 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/29/go-testing-httptest/</guid>
      <description>&lt;p&gt;Goのテストについていくつかまとめを書いていた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/30/go-testing2019/&#34;&gt;Goのtestを理解する in 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;触れるのを忘れていたhttptestパッケージについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/net/http/httptest/&#34;&gt;https://golang.org/pkg/net/http/httptest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのパッケージ名は単数形？複数形？</title>
      <link>https://budougumi0617.github.io/2020/05/22/package-name-in-go/</link>
      <pubDate>Fri, 22 May 2020 09:16:17 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/22/package-name-in-go/</guid>
      <description>&lt;p&gt;Goのパッケージ名には複数形の名前はつけないほうがよいというメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] 一部のフィールドを無視して構造体を比較したいときはgo-cmpを使う</title>
      <link>https://budougumi0617.github.io/2020/05/08/go-cmp-diif-with-ignore-fields/</link>
      <pubDate>Fri, 08 May 2020 08:31:18 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/08/go-cmp-diif-with-ignore-fields/</guid>
      <description>&lt;p&gt;Goでテストを書くとき、期待値として構造体を比較したいときは多々ある。&lt;br&gt;
時刻情報など、構造体の一部のフィールドの値だけ無視して構造体オブジェクトを比較する方法をまとめた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub Actions上でGCP Datastoreエミュレータを使ったテストを実行する</title>
      <link>https://budougumi0617.github.io/2020/05/01/use-datastore-emulator-on-github-actions/</link>
      <pubDate>Fri, 01 May 2020 08:42:01 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/05/01/use-datastore-emulator-on-github-actions/</guid>
      <description>&lt;p&gt;GCP Datastoreを扱うコードをGitHub Actions上でテストする方法をまとめた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Go Playgroundの実行結果に画像を出力する</title>
      <link>https://budougumi0617.github.io/2020/04/22/render-image-on-go-playground/</link>
      <pubDate>Wed, 22 Apr 2020 00:08:35 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/04/22/render-image-on-go-playground/</guid>
      <description>&lt;p&gt;Go Playgroundのテンプレートを見ていたら画像を出力できることを発見した。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2020/04/22_playground.png&#34; alt=&#34;実行結果&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goでサーバを立ち上げてE2Eテストを実施するCI用のテストコードを書く</title>
      <link>https://budougumi0617.github.io/2020/03/27/http-test-in-go/</link>
      <pubDate>Fri, 27 Mar 2020 20:00:22 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/27/http-test-in-go/</guid>
      <description>&lt;p&gt;GoでCIで動かせるE2Eテストコードを書くための下調べをしたのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Go Playground（play.golang.org）のショートカットキー</title>
      <link>https://budougumi0617.github.io/2020/03/13/shortcut-keys-on-the-go-playground/</link>
      <pubDate>Fri, 13 Mar 2020 08:32:11 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/13/shortcut-keys-on-the-go-playground/</guid>
      <description>&lt;p&gt;ちょっとした動作確認にThe Go Playgroundを多用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.golang.org/&#34;&gt;https://play.golang.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実は、The Go Playgroundにはショートカットキーが存在するので、マウス操作は必要ない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] 省略記号（...）を使った配列宣言の仕方</title>
      <link>https://budougumi0617.github.io/2020/03/06/go-array-with-the-ellipsis/</link>
      <pubDate>Fri, 06 Mar 2020 08:40:26 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/03/06/go-array-with-the-ellipsis/</guid>
      <description>&lt;p&gt;標準パッケージのコードを眺めていたら、珍しい書き方の部分を見つけた。&lt;br&gt;
以下のように宣言すると、配列サイズを明示的に書かずに配列を宣言できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#719e07&#34;&gt;...&lt;/span&gt;]&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>[冒頭公開]技術書典 応援祭にgolang.tokyo新刊「Gopherの休日2020冬」で参加します #技術書典</title>
      <link>https://budougumi0617.github.io/2020/02/28/shote8-golangtokyo/</link>
      <pubDate>Fri, 28 Feb 2020 09:37:18 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/02/28/shote8-golangtokyo/</guid>
      <description>&lt;p&gt;技術書典8は中止になってしまいましたが、オンラインで開催される技術書典 応援祭に&lt;a href=&#34;https://golangtokyo.github.io/&#34;&gt;golang.tokyo&lt;/a&gt;も参加します。&lt;br&gt;
私は、今回の新刊である「Gopherの休日2020冬」に「GoにおけるSOLID原則」という内容で寄稿しました。&lt;br&gt;
また、その冒頭部分も公開します。気になる方はどうぞ次のリンク先よりご購入ください。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/product/6332688805920768&#34; data-iframely-url=&#34;//cdn.iframe.ly/9iNdWhK&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] context.TODO()を使って漸進的にcontext対応を始める</title>
      <link>https://budougumi0617.github.io/2020/02/21/use-context/</link>
      <pubDate>Fri, 21 Feb 2020 09:55:37 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/02/21/use-context/</guid>
      <description>&lt;p&gt;Goではメソッドや関数の引数に&lt;code&gt;context.Context&lt;/code&gt;が含められていると何かと便利だ。&lt;br&gt;
とはいえ、最初からアプリケーションが&lt;code&gt;context.Context&lt;/code&gt;を考慮していない場合もある。&lt;br&gt;
アプリケーションを漸進的に&lt;code&gt;context.Context&lt;/code&gt;に対応させる方法を書いておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] Defined type（Named type）とType aliasを使い分ける</title>
      <link>https://budougumi0617.github.io/2020/02/01/go-named-type-and-type-alias/</link>
      <pubDate>Sat, 01 Feb 2020 12:31:27 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2020/02/01/go-named-type-and-type-alias/</guid>
      <description>&lt;p&gt;Goには既存の型に新しい名前をつける方法が2つある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type MyType int&lt;/code&gt;と宣言するDefined type
&lt;ul&gt;
&lt;li&gt;以前はNamed typeと言っていたが、Go1.11からDefined typeと呼ぶようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type MyType = int&lt;/code&gt;と宣言するType alias&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すでにいろいろ記事はあるものの、最近数回聞かれることがあったので改めてまとめておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OWASP/Go-SCPを読んでセキュアプログラミングとGoを学ぶ</title>
      <link>https://budougumi0617.github.io/2019/12/04/introduce_go-scp/</link>
      <pubDate>Wed, 04 Dec 2019 05:36:09 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/12/04/introduce_go-scp/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2019/go&#34;&gt;Go Advent Calendar 2019&lt;/a&gt;の4日目の記事になる。&lt;br&gt;
3日目は&lt;a href=&#34;https://twitter.com/ikawaha&#34;&gt;@ikawaha&lt;/a&gt;さんの「&lt;a href=&#34;https://qiita.com/ikawaha/items/e0c2b3ed0fedb12f4847&#34;&gt;Goa v3 のテストをシュッとする&lt;/a&gt;]」だった。&lt;/p&gt;
&lt;p&gt;本記事ではOpen Web Application Security Project（OWASP)が公開している&lt;code&gt;Go-SCP&lt;/code&gt;リポジトリを紹介する。&lt;br&gt;
Webアプリケーションには&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0&#34;&gt;クロスサイトスクリプティング（XSS）&lt;/a&gt;や&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%AA&#34;&gt;クロスサイトリクエストフォージェリ（CSRF）&lt;/a&gt;など、様々な脆弱性が潜む可能性がある。
脆弱性対策の書籍としては、&lt;a href=&#34;https://www.amazon.co.jp/dp/B07DVY4H3M&#34;&gt;体系的に学ぶ 安全なWebアプリケーションの作り方（徳丸本）&lt;/a&gt;などが有名だろう。&lt;br&gt;
&lt;code&gt;Go-SCP&lt;/code&gt;リポジトリにはWebアプリケーションを実装する際に必要な脆弱性の知識と、Goを使った脆弱性対策の実装方法が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OWASP/Go-SCP&#34;&gt;https://github.com/OWASP/Go-SCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Go] &#34;vim-go: [golangci-lint] FAIL&#34;エラーが出てvim-goでgolangci-lintが動かない</title>
      <link>https://budougumi0617.github.io/2019/11/18/resolve-golangci-lint-setting-with-vim-go/</link>
      <pubDate>Mon, 18 Nov 2019 05:31:03 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/18/resolve-golangci-lint-setting-with-vim-go/</guid>
      <description>&lt;p&gt;公私でGoを書くときはVimを使っている。&lt;br&gt;
ファイル保存時に&lt;code&gt;golangci-lint&lt;/code&gt;を実行するように設定しているのだが、表題のエラーが出て静的解析が実行されなかったので原因調査・解決した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Release 10 Year Anniversary Party in Tokyo参加メモ</title>
      <link>https://budougumi0617.github.io/2019/11/16/goturns10-in-japan/</link>
      <pubDate>Sat, 16 Nov 2019 11:18:38 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/16/goturns10-in-japan/</guid>
      <description>&lt;p&gt;メルカリさんで行われたGoリリース10周年パーティに参加したので、遅くなったが参加メモ。&lt;br&gt;
Goは今年でOSS10周年！&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hey! Ho! Let&amp;#39;s Go! Open Sourcing the Go programming language http://bit.ly/1NxkxC &lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#golang&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/developer?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#developer&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/google?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#google&lt;/a&gt;&lt;/p&gt;&amp;mdash; Google Go Team (@golangnuts) &lt;a href=&#34;https://twitter.com/golangnuts/status/5606771876?ref_src=twsrc%5Etfw&#34;&gt;November 11, 2009&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] タグなし switchは switch true {...}と等しい</title>
      <link>https://budougumi0617.github.io/2019/11/10/switch-statement-in-go/</link>
      <pubDate>Sun, 10 Nov 2019 12:50:18 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/10/switch-statement-in-go/</guid>
      <description>&lt;p&gt;先日のgolang.tokyoでは&lt;code&gt;switch&lt;/code&gt;文に関するDevquizが出題された。
私はわかっていたつもりで乾杯の挨拶中に解説を話したが、間違えた解説だったので改めて仕様を確認した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] GitHub Actionsでキャッシュ機能を使う #github</title>
      <link>https://budougumi0617.github.io/2019/11/03/use-cache-in-github-actions/</link>
      <pubDate>Sun, 03 Nov 2019 18:04:33 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/11/03/use-cache-in-github-actions/</guid>
      <description>&lt;p&gt;GitHub Actionsで待望のキャッシュ機能が使えるようになった。&lt;br&gt;
Windowsコンテナでジョブを実行していると少しハマる感じだったが、自分のGoのリポジトリのGitHub Actionsでキャッシュを使えるようになった。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/actions/cache&#34; data-iframely-url=&#34;//cdn.iframe.ly/vNWhS6o&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Goのtestを理解する in 2019</title>
      <link>https://budougumi0617.github.io/2019/10/30/go-testing2019/</link>
      <pubDate>Wed, 30 Oct 2019 18:08:13 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/30/go-testing2019/</guid>
      <description>&lt;p&gt;昨年Go1.10時点でのGoのテストについてまとめた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018/&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まとめ記事を書いた後にリリースされたGo1.11からGo1.13に含まれるテスト関連の変更をまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] レイヤードアーキテクチャの階層構造を守らないimportを警告するlinterを作った</title>
      <link>https://budougumi0617.github.io/2019/10/18/launch-layer-for-the-layered-achitectures/</link>
      <pubDate>Fri, 18 Oct 2019 14:36:56 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/18/launch-layer-for-the-layered-achitectures/</guid>
      <description>&lt;p&gt;Goでクリーンアーキテクチャ等のレイヤードアーキテクチャを実装するための静的解析ツールを作った。&lt;br&gt;
「&lt;code&gt;webhandler&lt;/code&gt;パッケージから&lt;code&gt;usecase&lt;/code&gt;パッケージを使わずに直接&lt;code&gt;domain&lt;/code&gt;パッケージを使わないで！」というような、やってほしくない&lt;code&gt;import&lt;/code&gt;をエラーにできる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/budougumi0617/layer&#34;&gt;https://github.com/budougumi0617/layer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Go] 独自型にfmtパッケージのインターフェースを実装して出力を制御する</title>
      <link>https://budougumi0617.github.io/2019/10/12/confirm-print-with-fmt-interfaces/</link>
      <pubDate>Sat, 12 Oct 2019 15:17:06 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/12/confirm-print-with-fmt-interfaces/</guid>
      <description>&lt;p&gt;&lt;code&gt;fmt&lt;/code&gt;パッケージには&lt;code&gt;fmt.Printf&lt;/code&gt;の出力を任意に変更できるインターフェースが定義されている。&lt;br&gt;
各インターフェースを満たす独自型をフィールドに持つ構造体の出力がどうなるのか確認し、任意の型の出力を制御できるか確認してみた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go]imported and not usedエラー・declared and not usedエラーとの向き合いかた</title>
      <link>https://budougumi0617.github.io/2019/10/06/imported-declared-not-used-error/</link>
      <pubDate>Sun, 06 Oct 2019 11:02:11 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/06/imported-declared-not-used-error/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/05/jrits-why-go-how-is-go/&#34;&gt;先日の登壇資料&lt;/a&gt;に&lt;a href=&#34;https://b.hatena.ne.jp/entry/4675383655814438370/comment/murishinai&#34;&gt;ブコメでコメント&lt;/a&gt;いただいていたので私の考えを述べたいと思う。&lt;br&gt;
結論から書くと、やはり「単純さや簡潔性を保つため」が動機になるのだと思う。&lt;br&gt;
なお、このブログでは敬体は使わない方針なので、常体なのはご容赦願いたい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;そういや &amp;ldquo;imported and not used&amp;rdquo; &amp;ldquo;declared and not used&amp;rdquo; でコンパイル通らなくなるのはどういう哲学なんだろうこれ。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>[発表資料] 第138回RITS技術交流会『なぜ私たちはGoを書くのか。今あらためて考えるGo言語の良さと実際』</title>
      <link>https://budougumi0617.github.io/2019/10/05/jrits-why-go-how-is-go/</link>
      <pubDate>Sat, 05 Oct 2019 09:28:18 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/10/05/jrits-why-go-how-is-go/</guid>
      <description>&lt;p&gt;前職主催の勉強会でGoがどんな言語が発表した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[dkl] 実行中のDocker ContainerやKubernetes Podを一覧して選択、アタッチするツールを作った</title>
      <link>https://budougumi0617.github.io/2019/09/28/release-dkl/</link>
      <pubDate>Sat, 28 Sep 2019 18:05:18 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/28/release-dkl/</guid>
      <description>&lt;p&gt;同僚がPythonで作ったOSSをGoに移植してみた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ dkl -h
Usage of dkl:
  -d -docker
        list docker containers and &lt;span style=&#34;color:#b58900&#34;&gt;exec&lt;/span&gt; selected container.
  -k -kubernetes
        list pods and &lt;span style=&#34;color:#b58900&#34;&gt;exec&lt;/span&gt; selected pod.
  -v  -version
        print version information and quit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>go mod tidyするとmodule ... found, but does not contain package ...エラーで失敗する</title>
      <link>https://budougumi0617.github.io/2019/09/20/fix-go-mod-tidy-does-not-contain-package/</link>
      <pubDate>Fri, 20 Sep 2019 08:35:57 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/20/fix-go-mod-tidy-does-not-contain-package/</guid>
      <description>&lt;p&gt;&lt;code&gt;go mod tidy&lt;/code&gt;が次のようなのエラーで失敗するとき、エラーを解決するメモ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go mod tidy
github.com/budougumi0617/til/go/tui/promptui imports
        github.com/manifoldco/promptui imports
        github.com/alecthomas/gometalinter imports
        gopkg.in/alecthomas/kingpin.v3-unstable imports
        github.com/nicksnyder/go-i18n/i18n: module github.com/nicksnyder/go-i18n@latest &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;v2.0.2+incompatible&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; found, but does not contain package github.com/nicksnyder/go-i18n/i18n
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>golang.tokyoの技術書典7新刊「Gopherの休日2019秋」に寄稿しました #技術書典</title>
      <link>https://budougumi0617.github.io/2019/09/15/shoten7-golangtokyo/</link>
      <pubDate>Sun, 15 Sep 2019 13:04:11 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/15/shoten7-golangtokyo/</guid>
      <description>&lt;p&gt;2019/09/22に行われる技術書典7へ、golang.tokyoも参加します。&lt;br&gt;
私は、今回の新刊である「Gopherの休日2019秋」に「準標準パッケージ（&lt;code&gt;golang.org/x&lt;/code&gt;）の早めぐり」という内容で寄稿しました。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf07/circle/5174941137764352&#34; data-iframely-url=&#34;//cdn.iframe.ly/yAYopWf&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Go本体の開発進捗を確認できるGo Development Dashboard</title>
      <link>https://budougumi0617.github.io/2019/09/08/introduction-dev-golang-org/</link>
      <pubDate>Sun, 08 Sep 2019 10:31:15 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/08/introduction-dev-golang-org/</guid>
      <description>&lt;p&gt;Goの開発状況を確認する&lt;code&gt;Go Development Dashboard&lt;/code&gt;を見つけたのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] gofmtコマンドの-rオプションの使い方</title>
      <link>https://budougumi0617.github.io/2019/09/01/gofmt-rewrite-option/</link>
      <pubDate>Sun, 01 Sep 2019 14:15:42 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/09/01/gofmt-rewrite-option/</guid>
      <description>&lt;p&gt;Goでは標準ツールとして公式から&lt;code&gt;gofmt&lt;/code&gt;コマンドというフォーマッタが提供されている。&lt;br&gt;
このコマンドはコードのインデントなどをフォーマットしてくれるほかに、&lt;code&gt;-r&lt;/code&gt;オプションでASTベースの置換も行える。&lt;br&gt;
実装ベースから使い方を追ってみたのでメモする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] 構造体オブジェクト初期化時にフィールド名を指定することを強制する #golangjp</title>
      <link>https://budougumi0617.github.io/2019/08/17/must-use-key-in-struct-initialize/</link>
      <pubDate>Sat, 17 Aug 2019 08:53:45 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/08/17/must-use-key-in-struct-initialize/</guid>
      <description>&lt;p&gt;静的解析に頼らず、コンパイル時に構造体オブジェクトの初期化でフィールド名の指定を強制するためのTips。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[書評] 改訂2版 みんなのGo言語はGo言語入門者にも初版所有者にもオススメな1冊</title>
      <link>https://budougumi0617.github.io/2019/08/04/review-mingo2/</link>
      <pubDate>Sun, 04 Aug 2019 15:22:15 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/08/04/review-mingo2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/tenntenn&#34;&gt;@tenntenn&lt;/a&gt;さんに献本していただいたので、改訂版2版みんなのGo言語（通称みんGo）の感想をまとめる。&lt;br&gt;
なお、私は初版も持っているので、「前の持っているしどうしよう？」という方向けに初版との比較も記載する。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/08/04_mingo.jpg&#34; alt=&#34;表紙画像&#34;&gt;&lt;/p&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=github.io-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07VPSXF6N&amp;linkId=eeb24badc64c61fb48808b960c329c80&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    
    <item>
      <title>[Go moudles] module名がgithub.com/account/repo/vXとなっているリポジトリの古いバージョンを使う #golangjp</title>
      <link>https://budougumi0617.github.io/2019/07/18/use-old-version-by-modules/</link>
      <pubDate>Thu, 18 Jul 2019 17:56:51 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/07/18/use-old-version-by-modules/</guid>
      <description>&lt;p&gt;Go Modulesの使い方をざっくり調べたのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[発表資料] GoCon Fukuokaでgoogle/wireを使った Goらしいアーキテクチャへの取り組みを発表した #gocon</title>
      <link>https://budougumi0617.github.io/2019/07/15/gocon2019summer/</link>
      <pubDate>Mon, 15 Jul 2019 17:33:07 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/07/15/gocon2019summer/</guid>
      <description>&lt;p&gt;GoCon &amp;lsquo;19 Summer in Fukuokaで登壇してきたので感想と参考資料などをまとめた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go]Sliceを含んだ構造体が等値演算子（==）でpanicを引き起こすのを回避する #golang</title>
      <link>https://budougumi0617.github.io/2019/07/07/prevent-runtime-error-by-pointer/</link>
      <pubDate>Sun, 07 Jul 2019 09:00:50 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/07/07/prevent-runtime-error-by-pointer/</guid>
      <description>&lt;p&gt;Goには&lt;code&gt;comparable&lt;/code&gt;が定義されておらず、比較できない型として&lt;code&gt;Slice&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;などがある。&lt;br&gt;
&lt;code&gt;interface&lt;/code&gt;がそのような型（フィールドにそのような型を持った構造体）を値に持っていたときに&lt;code&gt;==&lt;/code&gt;を利用すると&lt;code&gt;panic&lt;/code&gt;が発生する可能性がある。&lt;br&gt;
行儀の悪い構造体を定義しないテクニックがあったのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[発表資料] 今改めて読み直したい Go基礎情報 その1 #golangtokyo</title>
      <link>https://budougumi0617.github.io/2019/06/20/golangtokyo25-read-again-awesome-go-article/</link>
      <pubDate>Thu, 20 Jun 2019 07:02:01 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/20/golangtokyo25-read-again-awesome-go-article/</guid>
      <description>&lt;p&gt;golang.tokyo #25で過去の優良情報を振り返る発表を行なった。&lt;br&gt;
この記事は発表で使った資料と口頭で話したことの要約をまとめておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GoのLanguage Specificationの特定の仕様に関わる処理系の実装を探す #golang</title>
      <link>https://budougumi0617.github.io/2019/06/13/explore-go-specification-and-implementation/</link>
      <pubDate>Thu, 13 Jun 2019 08:10:59 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/06/13/explore-go-specification-and-implementation/</guid>
      <description>&lt;p&gt;Goの仕様はこのHTML1ページにまとまっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Go Programming Language Specification
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;https://golang.org/ref/spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仕様に書いてある処理はどうやって実装されているのか調べたかった。&lt;br&gt;
Goの仕様の1文からその仕様に関係する処理系のコードを探す方法をメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] プリミティブ型の配列・スライスを出力するときはその型のverbが使える #golangjp</title>
      <link>https://budougumi0617.github.io/2019/05/26/print-array-and-slice-with-verbs/</link>
      <pubDate>Sun, 26 May 2019 20:32:20 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/05/26/print-array-and-slice-with-verbs/</guid>
      <description>&lt;p&gt;柴田さん(&lt;a href=&#34;https://twitter.com/yoshiki_shibata&#34;&gt;@yoshiki_shibata&lt;/a&gt;)に&lt;code&gt;fmt.Printf&lt;/code&gt;について教えてもらったのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[補足資料] Go Conference 2019 Springでdatabase/sql入門を発表した #gocon</title>
      <link>https://budougumi0617.github.io/2019/05/19/gocon2019spring/</link>
      <pubDate>Sun, 19 May 2019 13:01:52 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/05/19/gocon2019spring/</guid>
      <description>&lt;p&gt;Go Conference(GoCon)で「database/sql入門」というタイトルで発表してきた。
この記事は資料中のリンクや、口頭で説明した内容の補足資料となる。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://gocon.connpass.com/event/124530/&#34; data-iframely-url=&#34;//cdn.iframe.ly/NRErGxT?iframe=card-small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>ory/fositeから読み解くGoにおけるStrategy/FactoryMethodパターン</title>
      <link>https://budougumi0617.github.io/2019/04/28/study-design-pattern-from-ory-fosite/</link>
      <pubDate>Sun, 28 Apr 2019 17:05:19 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/04/28/study-design-pattern-from-ory-fosite/</guid>
      <description>&lt;p&gt;&lt;code&gt;ory/fosite&lt;/code&gt;というGoのSDKの中でいくつかのデザインパターンが利用されていたので、それを読み解いてみる。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/ory/fosite&#34; data-iframely-url=&#34;//cdn.iframe.ly/rg9NVGS&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] CicleCI2.1でgo modのデータを共有しながら複数ジョブを実行する</title>
      <link>https://budougumi0617.github.io/2019/04/21/ci_go_with_multiple_jobs_on_circleci/</link>
      <pubDate>Sun, 21 Apr 2019 15:31:49 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/04/21/ci_go_with_multiple_jobs_on_circleci/</guid>
      <description>&lt;p&gt;GitHub上のGoのリポジトリに対して継続的インテグレーション(CI)を行なう場合、CircleCIやTravisCIを使うのが一般的だろう。&lt;br&gt;
CicrcleCI2.1でGo Modulesを使いながらマルチJobを定義したWorkflowを定義する。&lt;br&gt;
&lt;code&gt;attach_workspace&lt;/code&gt;を使ってジョブ間のデータ共有をするのにひと手間必要だった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang.tokyoの技術書典6新刊「文Go」に「Goにおけるデータベース実践入門を寄稿しました。 #技術書典</title>
      <link>https://budougumi0617.github.io/2019/04/11/shoten6/</link>
      <pubDate>Thu, 11 Apr 2019 18:58:21 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/04/11/shoten6/</guid>
      <description>&lt;p&gt;2019/04/16に行われる&lt;a href=&#34;https://techbookfest.org/event/tbf06&#34;&gt;技術書典6&lt;/a&gt;へ、golang.tokyoも参加します。&lt;br&gt;
私は、今回の新刊である「文Go」に「Goにおけるデータベース実践入門」という内容で寄稿しました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://budougumi0617.github.io/2019/04/11_bungo_s.png&#34; alt=&#34;表紙&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf06/circle/63860004&#34; data-iframely-url=&#34;//cdn.iframe.ly/DxmrlWl&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>[Go] MySQLからScanしたときunsupported Scan, storing driver.Value type []uint8 into type *time.Timeと出てパースに失敗する</title>
      <link>https://budougumi0617.github.io/2019/03/31/go_db_unsupported_scan_storing_driver_value_type_uint8_into_type_time_time/</link>
      <pubDate>Sun, 31 Mar 2019 08:35:30 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/31/go_db_unsupported_scan_storing_driver_value_type_uint8_into_type_time_time/</guid>
      <description>&lt;p&gt;GoでDBを操作するコードを書いている。&lt;code&gt;jmoiron/sqlx&lt;/code&gt;パッケージを使ってMySQLサーバ内のDBをを操作しようとして表題のエラーに遭遇した。&lt;br&gt;
MySQLサーバとの接続パラメータを変えることでうまくいったので解決方法をメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go/typesパッケージを使って型チェックを行なうハンズオンを作った #golangtokyo</title>
      <link>https://budougumi0617.github.io/2019/03/24/go-create-type-check-handson/</link>
      <pubDate>Sun, 24 Mar 2019 19:04:50 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/24/go-create-type-check-handson/</guid>
      <description>&lt;p&gt;golang.tokyoで静的解析ハンズオンを行なうにあたり、ハンズオン資料を作成した。&lt;br&gt;
ハンズオン作成時の際参考にした資料や、作る時に工夫した点をまとめておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型チェックでインターフェースを実装しているか調べよう
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golangtokyo.github.io/codelab/first-step-type-check/&#34;&gt;https://golangtokyo.github.io/codelab/first-step-type-check/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Go] selectのcase文中でch &lt;- &lt;- chやch &lt;- f()をしない方が良い #golangjp #横浜go読書会</title>
      <link>https://budougumi0617.github.io/2019/03/15/go-strange-result-in-select/</link>
      <pubDate>Fri, 15 Mar 2019 19:41:58 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/15/go-strange-result-in-select/</guid>
      <description>&lt;p&gt;簡潔にまとめられなかったので式表現をそのままタイトルに書いてしまったが、分かっていないとエンバグしそうな挙動を見つけたのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go][gomcok]引数によって挙動を変えるモックメソッドを定義する #golangjp</title>
      <link>https://budougumi0617.github.io/2019/03/10/define-gomock-method-by-doandreturn/</link>
      <pubDate>Sun, 10 Mar 2019 12:53:08 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/03/10/define-gomock-method-by-doandreturn/</guid>
      <description>&lt;p&gt;Goのテストでモックを使う場合、大抵の場合はgomockを使うと思う。&lt;br&gt;
gomockでモックメソッドの挙動を宣言するときのTipsをメモしておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/mock/&#34;&gt;https://github.com/golang/mock/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/golang/mock/gomock&#34;&gt;https://godoc.org/github.com/golang/mock/gomock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>GoでJSONのUnmarshalがシンタックスエラーで失敗した時、エラー周辺の文字列を表示する</title>
      <link>https://budougumi0617.github.io/2019/02/24/go-print-detail-of-json-syntax-error/</link>
      <pubDate>Sun, 24 Feb 2019 21:08:31 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/24/go-print-detail-of-json-syntax-error/</guid>
      <description>&lt;p&gt;&lt;code&gt;json.Unmarshal&lt;/code&gt;に失敗したとき&lt;code&gt;json.SyntaxError&lt;/code&gt;が取得できた場合は文字列の中のどの位置でパースに失敗したのか知ることができる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Modulesの概要とGo1.12に含まれるModulesに関する変更 #golangjp #go112party</title>
      <link>https://budougumi0617.github.io/2019/02/15/go-modules-on-go112/</link>
      <pubDate>Fri, 15 Feb 2019 10:43:23 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/15/go-modules-on-go112/</guid>
      <description>&lt;p&gt;今更ながらGo Modulesについて簡単にまとめた。
そして今月(2019年2月)にリリースされる予定のGo1.12に含まれるGo Modules関連の仕様変更について調べた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go]未リリース版のGoの仕様や実際の動きを確認する #golangjp</title>
      <link>https://budougumi0617.github.io/2019/02/14/investigate-go-unreleased-version/</link>
      <pubDate>Thu, 14 Feb 2019 07:51:53 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/14/investigate-go-unreleased-version/</guid>
      <description>&lt;p&gt;未リリース版のGo仕様や実際の動きを確認する。
今回は2019/02/14現在未リリースのGo1.12の仕様を確認した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go]スライス生成時(slice operator)に使える珍しい宣言方法 #golangjp</title>
      <link>https://budougumi0617.github.io/2019/02/08/go-slice-operator/</link>
      <pubDate>Fri, 08 Feb 2019 07:24:25 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/08/go-slice-operator/</guid>
      <description>&lt;p&gt;Goにおけるスライス演算子(&lt;em&gt;slice operator&lt;/em&gt;)を改めて調べ直し、3-INDEX記法などを学んだ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang.org/x/tools/go/analysisでLinterツールを自作する #gounco #golang</title>
      <link>https://budougumi0617.github.io/2019/02/01/how-to-use-analisys-package/</link>
      <pubDate>Fri, 01 Feb 2019 08:48:38 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/02/01/how-to-use-analisys-package/</guid>
      <description>&lt;p&gt;この記事ではGo(Un)Conferenceで発表したGoにおけるLinterツールの作成方法をまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go(Un)Conference（Goあんこ）LT大会 5kg
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gounconference.connpass.com/event/112942/&#34;&gt;https://gounconference.connpass.com/event/112942/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;golang.org/x/tools/go/analysisで静的解析ツールを自作する #gounco
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/budougumi0617/how-to-create-the-static-analysis-tool-for-go&#34;&gt;https://speakerdeck.com/budougumi0617/how-to-create-the-static-analysis-tool-for-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>BetaリリースされたGoのGoogle Cloud Functionsを試す #gcp #golangjp</title>
      <link>https://budougumi0617.github.io/2019/01/17/try-go-on-google-cloud-functions/</link>
      <pubDate>Thu, 17 Jan 2019 10:21:04 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2019/01/17/try-go-on-google-cloud-functions/</guid>
      <description>&lt;p&gt;Google Cloud FunctionsでついにGoがサポートされた（まだベータリリースだが）。&lt;br&gt;
さっそくさわってみたメモ。&lt;/p&gt;
&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 168px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/application-development/cloud-functions-go-1-11-is-now-a-supported-language/&#34; data-iframely-url=&#34;//cdn.iframe.ly/mGNAEkA&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//cdn.iframe.ly/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>golang.tokyo #20 忘年LT大会！！ 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/12/19/report-golangtokyo-20/</link>
      <pubDate>Wed, 19 Dec 2018 11:12:16 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/19/report-golangtokyo-20/</guid>
      <description>&lt;p&gt;golang.tokyo #20に参加してきたのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/wireを使ったDIとDI関数のシグネチャについて #go</title>
      <link>https://budougumi0617.github.io/2018/12/14/how-to-use-google-wire/</link>
      <pubDate>Fri, 14 Dec 2018 09:25:57 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/14/how-to-use-google-wire/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://qiita.com/advent-calendar/2018/go&#34;&gt;Go Advent Calendar 2018&lt;/a&gt;の14日目の記事となる。&lt;br&gt;
この記事ではGoogleが提供するGoのDependency Injection(DI、依存性の注入)ツールであるWireを使ったDIの概要と、Wireで利用可能なDI関数の戻り値シグネチャのパターンを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github.com/google/wire
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/wire&#34;&gt;https://github.com/google/wire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compile-time Dependency Injection With Go Cloud&amp;rsquo;s Wire | The Go blog
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/wire&#34;&gt;https://blog.golang.org/wire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Go] bluele/mecab-golangを含むコードをビルドすると Undefined symbols for architecture x86_64 と出て失敗する</title>
      <link>https://budougumi0617.github.io/2018/12/09/mecab-undefined-symbols-for-architecture-x86_64/</link>
      <pubDate>Sun, 09 Dec 2018 21:30:35 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/12/09/mecab-undefined-symbols-for-architecture-x86_64/</guid>
      <description>&lt;p&gt;他の方のリポジトリにビルドすると表題のエラーが出てしまった。
&lt;code&gt;bluele/mecab-golang&lt;/code&gt;をimportしている(CGOの設定が必要だった）のが原因だったのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] JSON内の数字や文字列が混じった配列を構造体にUnmarshalする</title>
      <link>https://budougumi0617.github.io/2018/11/23/unmarshal-json-array-in-go/</link>
      <pubDate>Fri, 23 Nov 2018 23:22:27 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/11/23/unmarshal-json-array-in-go/</guid>
      <description>&lt;p&gt;以下のようなJSONデータはGoではパースしずらい。
理由は、配列に複数の型が含まれていてGoの配列としては&lt;code&gt;[]interface{}&lt;/code&gt;にするしかないことと、名前(&lt;code&gt;key&lt;/code&gt;)が設定されていないのでマッピングしにくいからだ。
これを無理やりUnmarshalしたときのメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Go] n秒おきになにかするループをtime.Tickで書く #go</title>
      <link>https://budougumi0617.github.io/2018/11/18/loop-by-time-tick-in-golang/</link>
      <pubDate>Sun, 18 Nov 2018 11:53:10 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/11/18/loop-by-time-tick-in-golang/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://amazon.jp/dp/4873118468&#34;&gt;Go言語による並行処理&lt;/a&gt;に知らない書き方があったのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[書評] Go言語でつくるインタプリタ を読んだ #go</title>
      <link>https://budougumi0617.github.io/2018/10/30/review-writing-an-gnterpreter-in-go/</link>
      <pubDate>Tue, 30 Oct 2018 10:48:30 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/30/review-writing-an-gnterpreter-in-go/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://amazon.jp/dp/4873118220&#34;&gt;Go言語でつくるインタプリタ&lt;/a&gt;を読んだのでメモ。
プログラマなら一度はやる（？）であろうインタプリタの実装をGoで行う本書では、優れた設計は拡張性が高く「小さく作る」・「常に動くものを作る」を可能にすること、テスト駆動開発とテーブル駆動テストを用いることで検証を繰り返しながら着実に開発を進めることができることを実感することができる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vim-goの自動補完が効かないときの調べ方（gocode が Error parsing input file (outer block)） #vim #go</title>
      <link>https://budougumi0617.github.io/2018/10/22/deug-gocode-and-vim-go-auto-completion/</link>
      <pubDate>Mon, 22 Oct 2018 21:00:19 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/22/deug-gocode-and-vim-go-auto-completion/</guid>
      <description>&lt;p&gt;&lt;code&gt;goimports&lt;/code&gt;などが更新されていたので、&lt;code&gt;vim-go&lt;/code&gt;で&lt;code&gt;GoUpdateBinaries&lt;/code&gt;コマンドを実行したら&lt;code&gt;vim&lt;/code&gt;で自動補完が効かなくなった。&lt;br&gt;
結局はgocodeの調子が悪いことが多いので、原因の調べ方をまとめる。&lt;br&gt;
（今回の場合は &lt;code&gt;let g:go_gocode_propose_source = 0&lt;/code&gt; で解決した。）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[発表資料]go-cloudとWireを利用したDI #gounco #go</title>
      <link>https://budougumi0617.github.io/2018/10/19/presentation-gounco-lt4/</link>
      <pubDate>Fri, 19 Oct 2018 13:31:21 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/10/19/presentation-gounco-lt4/</guid>
      <description>&lt;p&gt;Go(Un)Conference（Goあんこ）LT大会 4kgの発表資料と資料中の参考リンク、補足をまとめた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go listで依存パッケージを一覧する。-tagsで依存パッケージを切り替える #go</title>
      <link>https://budougumi0617.github.io/2018/09/21/package-dependencies-with-go-list-and-build-tags/</link>
      <pubDate>Fri, 21 Sep 2018 09:18:17 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/21/package-dependencies-with-go-list-and-build-tags/</guid>
      <description>&lt;p&gt;今更だがGoでビルドタグで依存パッケージをどう制御できるのか確認した。&lt;br&gt;
また、依存パッケージの一覧を確認するのには&lt;code&gt;go list&lt;/code&gt;コマンドの使い方を調べた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goのtestingを理解する in 2018 - iotestサブパッケージ編 #go</title>
      <link>https://budougumi0617.github.io/2018/09/09/go-testing2018-iotest/</link>
      <pubDate>Sun, 09 Sep 2018 21:51:11 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/09/go-testing2018-iotest/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかった&lt;code&gt;testing/iotest&lt;/code&gt;について触れる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのtestingを理解する in 2018 - quickサブパッケージ編 #go</title>
      <link>https://budougumi0617.github.io/2018/09/05/go-testing2018-quick/</link>
      <pubDate>Wed, 05 Sep 2018 10:02:02 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/09/05/go-testing2018-quick/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかった&lt;code&gt;testing/quick&lt;/code&gt;パッケージについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/&#34;&gt;Goのtestingを理解する in 2018 - Examples編 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのtestingを理解する in 2018 - Examples編 #go</title>
      <link>https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/</link>
      <pubDate>Thu, 30 Aug 2018 20:49:44 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/30/go-testing2018-examples/</guid>
      <description>&lt;p&gt;この記事は以下の記事で触れなかったExamplesについてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018&#34;&gt;Goのtestを理解する in 2018 #go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Goのtestを理解する in 2018 #go</title>
      <link>https://budougumi0617.github.io/2018/08/19/go-testing2018/</link>
      <pubDate>Sun, 19 Aug 2018 12:14:01 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/19/go-testing2018/</guid>
      <description>&lt;p&gt;2018年夏(Go1.10)時点でGoのテスト方法をまとめる。&lt;br&gt;
この記事は以下のスライド資料の補足記事になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tour of testing in 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/budougumi0617/tour-of-testing-in-2018&#34;&gt;https://speakerdeck.com/budougumi0617/tour-of-testing-in-2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mercari.go #2 参加メモ #mercarigo</title>
      <link>https://budougumi0617.github.io/2018/08/12/report-mercarigo2/</link>
      <pubDate>Sun, 12 Aug 2018 12:04:41 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/08/12/report-mercarigo2/</guid>
      <description>&lt;p&gt;mercari.go #2に参加してきた。今回はGoの話だけでなく、GraphQLについても勉強することができた。&lt;br&gt;
次回は9月開催にGopherCon2018の参加報告を予定しているとのこと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[発表資料]初級者向けGoの落とし穴と解説 #gounco</title>
      <link>https://budougumi0617.github.io/2018/07/26/presentation-gounco-lt3/</link>
      <pubDate>Thu, 26 Jul 2018 08:00:00 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/26/presentation-gounco-lt3/</guid>
      <description>&lt;p&gt;Go(Un)Conference（Goあんこ）LT大会 3kgの発表資料と資料中の参考リンク、補足をまとめた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mercari.go #1 参加メモ #mercarigo</title>
      <link>https://budougumi0617.github.io/2018/07/05/report-mercarigo-1/</link>
      <pubDate>Thu, 05 Jul 2018 08:00:48 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/07/05/report-mercarigo-1/</guid>
      <description>&lt;p&gt;メルカリ内でGoがどのように使われているのかを聞くため&lt;a href=&#34;https://mercari.connpass.com/event/91306/&#34;&gt;mercari.go #1&lt;/a&gt;に参加してきた。&lt;br&gt;
詳しくは所感に書いたがいろいろな角度のGoの話を聞くことができてとても参加できてよかった。なお次回は8月を予定しているとのこと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[発表資料]Go入門</title>
      <link>https://budougumi0617.github.io/2018/05/30/go-introduction/</link>
      <pubDate>Wed, 30 May 2018 08:58:32 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/30/go-introduction/</guid>
      <description>Vue.js/React/Go/Rails5.2のリアル★ShuuuMai #04の発表資料と資料中の参考リンク、補足をまとめた。 https://connpass.com/event/86508/ Golang https://golang.org/ Go自</description>
    </item>
    
    <item>
      <title>[Go]vim-goとDelveでVim上からGoのデバッグを行う #vim #golang</title>
      <link>https://budougumi0617.github.io/2018/05/30/debug-go-by-vim-go-and-delve/</link>
      <pubDate>Wed, 30 May 2018 08:00:00 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/30/debug-go-by-vim-go-and-delve/</guid>
      <description>VimでGoを使う人は大半の人がvim-goプラグインをインストールしているだろう。 fatih/vim-go https://github.com/fatih/vim-go 今年の3月、ついにvim-goがdelveをサポート</description>
    </item>
    
    <item>
      <title>[Go]go.uber.org/zap.loggerの出力をbytes.Bufferに変更する #golang</title>
      <link>https://budougumi0617.github.io/2018/05/24/inject-io-writer-to-zap-logger/</link>
      <pubDate>Thu, 24 May 2018 08:44:38 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/24/inject-io-writer-to-zap-logger/</guid>
      <description>go.uber.org/zapのzap.loggerは構造化されたログを高速に出力できるとしてGolangのLoggerの中で有名だ。 https://github.com/uber-go/zap gR</description>
    </item>
    
    <item>
      <title>go getで取得されるコードはmasterブランチ(HEAD)がデフォルトではない #golang</title>
      <link>https://budougumi0617.github.io/2018/05/10/go-get-from-go1-tag-or-branch/</link>
      <pubDate>Thu, 10 May 2018 09:00:17 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/10/go-get-from-go1-tag-or-branch/</guid>
      <description>gocon中の@ymotongpooさんのTweetが気になったので調べた。 前から結構言ってるんだけど、go getで最新取られたくない場合は</description>
    </item>
    
    <item>
      <title>[vim-go]GoFillStructで構造体のフィールド初期化文を自動生成する</title>
      <link>https://budougumi0617.github.io/2018/05/06/vim-go-gofillstruct/</link>
      <pubDate>Sun, 06 May 2018 16:25:33 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/05/06/vim-go-gofillstruct/</guid>
      <description>Goで構造体の初期化をするときに「フィールド名なんだっけ？」となることがある。 また、フィールド名を手打ちしてタイポすることもあるだろう。 vi</description>
    </item>
    
    <item>
      <title>golang.tokyo #14 ゴールーチンとチャネルによる並行処理 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/04/19/golangtokyo-14-goroutine/</link>
      <pubDate>Thu, 19 Apr 2018 09:41:43 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/19/golangtokyo-14-goroutine/</guid>
      <description>golang.tokyo #14はgroutineとchannelの話。 @morkuniさんの発表は入門編、@knsh14さんの発表はdeep diveという感じで非</description>
    </item>
    
    <item>
      <title>Go Conference 2018 Spring 参加メモ #gocon</title>
      <link>https://budougumi0617.github.io/2018/04/17/go-conference-2018-spring/</link>
      <pubDate>Tue, 17 Apr 2018 22:52:49 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/17/go-conference-2018-spring/</guid>
      <description>先日行われたgoconの参加メモ。今回は2トラック制だったので、自分が見たものだけ。 公開されているスライド資料などは以下のリンクに添付されて</description>
    </item>
    
    <item>
      <title>Goのデバッガ(Delve)のいろいろな起動のしかた(引数を渡して起動、起動中のプロセスにアタッチして起動 etc...)</title>
      <link>https://budougumi0617.github.io/2018/04/08/debug-by-delve/</link>
      <pubDate>Sun, 08 Apr 2018 09:12:28 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/04/08/debug-by-delve/</guid>
      <description>goでデバッグするときはdelveを使うことが多いと思う。 ユースケース別の起動方法をまとめた。 TL;DR 基本的な起動方法と簡単な操作方法(dlv debug/dlv test</description>
    </item>
    
    <item>
      <title>[Go]golang.tokyo #13 - Macでハンズオンアプリを動かすまでに必要だったこと #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/03/14/report-golang-tokyo-13-android-with-gomobile/</link>
      <pubDate>Wed, 14 Mar 2018 09:46:52 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/03/14/report-golang-tokyo-13-android-with-gomobile/</guid>
      <description>golang.tokyo #13の参加メモ。今回のgolang.tokyoはgomobileハンズオンだった。 自分は今回半分運営お手伝いとして参加していて、前半にあ</description>
    </item>
    
    <item>
      <title>[Go]go-chiで作ったREST APIの定義からMarkdownやJSONを動的に出力する</title>
      <link>https://budougumi0617.github.io/2018/03/11/go-chi-generates-routing-map/</link>
      <pubDate>Sun, 11 Mar 2018 19:37:16 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/03/11/go-chi-generates-routing-map/</guid>
      <description>https://github.com/go-chi/chi go-chi/chiはGolangのWebサーバを作成するときに使うシンプルなHTTPルータ。 Swagger定義ではないが、ルーティングの</description>
    </item>
    
    <item>
      <title>[書評]Goならわかるシステムプログラミングを読んだ</title>
      <link>https://budougumi0617.github.io/2018/02/26/review-go-system-programming/</link>
      <pubDate>Mon, 26 Feb 2018 08:56:25 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/26/review-go-system-programming/</guid>
      <description>先日「Goならわかるシステムプログラミング」を読み終わった。 Goならわかるシステムプログラミング（紙書籍） https://www.lambdanote.com/products/go 概要 この本は元々ASCII.jp</description>
    </item>
    
    <item>
      <title>Go 1.10 Release Party in Tokyo参加メモ #go110party</title>
      <link>https://budougumi0617.github.io/2018/02/22/go110party/</link>
      <pubDate>Thu, 22 Feb 2018 13:48:52 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/22/go110party/</guid>
      <description>Go1.10のリリースパーティ@googleに参加したのでその参加メモ。 Go1.10はGo1.9から半年ぶりのリリース URL https://gocon.connpass.com/event/78128/ 会場 Google Tokyo 日時 201</description>
    </item>
    
    <item>
      <title>[Goならわかるシステムプログラミング]libcontainerで実装したLinuxコンテナを起動するためのDockerfile</title>
      <link>https://budougumi0617.github.io/2018/02/15/dockerfile-for-libcontainer/</link>
      <pubDate>Thu, 15 Feb 2018 08:33:14 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/15/dockerfile-for-libcontainer/</guid>
      <description>Goならわかるシステムプログラミング ― 第20回 Go言語とコンテナ http://ascii.jp/elem/000/001/502/1502967/ Goならわかるシステムプログラミングの中で、Goとlibcontainer</description>
    </item>
    
    <item>
      <title>[Go]Google Kubernetes Engineのチュートリアルをやるときに注意すること</title>
      <link>https://budougumi0617.github.io/2018/02/12/gcp-bookshelf-on-kubernetes-engine/</link>
      <pubDate>Mon, 12 Feb 2018 08:04:35 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/12/gcp-bookshelf-on-kubernetes-engine/</guid>
      <description>Google Cloud Platform(GCP)のKubernetes Engine(GKE)でKubernetes(k8s)を動かしたいと以下のチュートリアル</description>
    </item>
    
    <item>
      <title>[Go]gRPC GatewayでgRPCに対するREST APIを自動生成する</title>
      <link>https://budougumi0617.github.io/2018/02/03/grpc-gateway-for-rest-api/</link>
      <pubDate>Sat, 03 Feb 2018 14:52:19 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/02/03/grpc-gateway-for-rest-api/</guid>
      <description>gRPCで作ったAPIは通常REST APIからコールできない。 grpc-ecosystem/grpc-gatewayを使うとgRPC APIに</description>
    </item>
    
    <item>
      <title>[Go]golang.tokyo #12 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2018/01/31/golangtokyo-12/</link>
      <pubDate>Wed, 31 Jan 2018 09:30:08 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/31/golangtokyo-12/</guid>
      <description>golang.tokyo #12にブログ枠で参加した。 今回はテーマ：『スタートアップ・新規事業におけるGo』で本発表2名、LT3名という内容だった。 URL https://golangtokyo.connpass.com/event/76540/ 会場 株式会社</description>
    </item>
    
    <item>
      <title>[Go]gomockを使ったgRPCのテスト</title>
      <link>https://budougumi0617.github.io/2018/01/21/try-gomock-on-grpc-go/</link>
      <pubDate>Sun, 21 Jan 2018 19:21:28 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/21/try-gomock-on-grpc-go/</guid>
      <description>gRPCの勉強というより、gomockの勉強と言ったほうが良いかもしれないが、 protocコマンドで生成したgRPCコードをモックしてテスト</description>
    </item>
    
    <item>
      <title>AWS Lambda Go早めぐり(LambdaContext, Logging, Error...)</title>
      <link>https://budougumi0617.github.io/2018/01/17/hello-aws-lambda-go/</link>
      <pubDate>Wed, 17 Jan 2018 07:33:10 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/17/hello-aws-lambda-go/</guid>
      <description>AWS LambdaでGoが正式にサポートされた！！ AWS Lambda Supports Go https://aws.amazon.com/jp/about-aws/whats-new/2018/01/aws-lambda-supports-go/ aws/aws-lambda-go https://github.com/aws/aws-lambda-go 2018/01/17現在、日本語版はまだだが、英語のDocsは公開されているので</description>
    </item>
    
    <item>
      <title>[Go]gRPC Basics: GoからgRPCのストリーミングRPCを理解する</title>
      <link>https://budougumi0617.github.io/2018/01/14/grpc-basics-go/</link>
      <pubDate>Sun, 14 Jan 2018 10:47:23 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/14/grpc-basics-go/</guid>
      <description>gRPC-goのクイックスタート、サーバーレリフレクションを試したので、次はgRPC Basics: Goをやってみた。クイックスタートを終えているので、そ</description>
    </item>
    
    <item>
      <title>[Go][gRPC]Server Reflection Tutorialをやってみた</title>
      <link>https://budougumi0617.github.io/2018/01/04/server-reflection-tutorial/</link>
      <pubDate>Thu, 04 Jan 2018 08:54:30 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/04/server-reflection-tutorial/</guid>
      <description>前回のgRPCのクイックスタートをやったときにサーバーリフレクションのことがよくわからなかった。サーバーリフレクションにもチュートリアルがあ</description>
    </item>
    
    <item>
      <title>[Go]gRPCのGo Quick Startをやってみた。</title>
      <link>https://budougumi0617.github.io/2018/01/01/hello-grpc-go/</link>
      <pubDate>Mon, 01 Jan 2018 17:30:50 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2018/01/01/hello-grpc-go/</guid>
      <description>gRPCについて理解を始めるため、gRPCのクイックスタートをやったのでメモしておく。 Go Quick Start https://grpc.io/docs/quickstart/go.html ちなみに今回行ったのは、Goのクイックスタート</description>
    </item>
    
    <item>
      <title>[Go]MacのVSCodeでGoのデバッグを試すと&#34;unexpected fault address...&#34;エラーになる</title>
      <link>https://budougumi0617.github.io/2017/12/24/activate-delve-on-mac/</link>
      <pubDate>Sun, 24 Dec 2017 13:11:28 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/24/activate-delve-on-mac/</guid>
      <description>MacのVisual Studio Code(以下VSCode)を使ってGoのコードの中でSyscallが呼ばれるまでをデバッグで確認したかったが、ステッ</description>
    </item>
    
    <item>
      <title>[Go]golang.tokyo #11 参加メモ #golangtokyo</title>
      <link>https://budougumi0617.github.io/2017/12/12/golangtokyo-11/</link>
      <pubDate>Tue, 12 Dec 2017 09:39:32 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/12/golangtokyo-11/</guid>
      <description>URL https://golangtokyo.connpass.com/event/72986/ 会場 TECH PLAY SHIBUYA 日時 2017/12/11(月) 19:00 〜 21:50 Toggeter https://togetter.com/li/1180514 闇のBashをGoに置き換える技術(nashiox) https://speakerdeck.com/nashiox/golang-dot-tokyo-number-11 怖くて触れないけどなぜか動いてい</description>
    </item>
    
    <item>
      <title>[Go]CircleCI2.0&#43;Codecovで作るGo学習環境</title>
      <link>https://budougumi0617.github.io/2017/12/10/setup-study-go-learning-environment/</link>
      <pubDate>Sun, 10 Dec 2017 08:13:12 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/12/10/setup-study-go-learning-environment/</guid>
      <description>Goならわかるシステムプログラミングの写経、練習問題を解くにあたり、Goの軽いCI環境を作った。 TL;DR 自己学習や写経だと、レビューしてもらう(第</description>
    </item>
    
    <item>
      <title>Go Conference 2017 Autumn参加メモ #gocon</title>
      <link>https://budougumi0617.github.io/2017/11/09/gocon2017-autumn/</link>
      <pubDate>Thu, 09 Nov 2017 01:27:48 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/11/09/gocon2017-autumn/</guid>
      <description>URL https://gocon.connpass.com/event/66615/ 会場 株式会社メルカリ 日時 2017/11/05(日) 09:00 〜 17:30 toggeter https://togetter.com/li/1168291 感想 自分はgoplの練習問題や簡単なツールしかGoで作ったことがないので、サ</description>
    </item>
    
    <item>
      <title>[書評]Goプログラミング実践入門　標準ライブラリでゼロからWebアプリを作る</title>
      <link>https://budougumi0617.github.io/2017/10/12/go-web-programing/</link>
      <pubDate>Thu, 12 Oct 2017 08:37:20 +0900</pubDate>
      <author>budougumi[at]gmail.com (budougumi0617)</author>
      <guid>https://budougumi0617.github.io/2017/10/12/go-web-programing/</guid>
      <description>表題の本を読み終わった。 Goプログラミング実践入門 標準ライブラリでゼロからWebアプリを作る 前提 自分のGoの経験は以下の通り。 プログラミング</description>
    </item>
    
  </channel>
</rss>